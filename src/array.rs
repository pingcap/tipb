// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Array {
    // message fields
    length: ::std::option::Option<i32>,
    nullCount: ::std::option::Option<i32>,
    nullBitmap: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    offsets: ::std::vec::Vec<i32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Array {
    pub fn new() -> Array {
        ::std::default::Default::default()
    }

    // optional int32 length = 1;

    pub fn clear_length(&mut self) {
        self.length = ::std::option::Option::None;
    }

    pub fn has_length(&self) -> bool {
        self.length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: i32) {
        self.length = ::std::option::Option::Some(v);
    }

    pub fn get_length(&self) -> i32 {
        self.length.unwrap_or(0)
    }

    // optional int32 nullCount = 2;

    pub fn clear_nullCount(&mut self) {
        self.nullCount = ::std::option::Option::None;
    }

    pub fn has_nullCount(&self) -> bool {
        self.nullCount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nullCount(&mut self, v: i32) {
        self.nullCount = ::std::option::Option::Some(v);
    }

    pub fn get_nullCount(&self) -> i32 {
        self.nullCount.unwrap_or(0)
    }

    // optional bytes nullBitmap = 3;

    pub fn clear_nullBitmap(&mut self) {
        self.nullBitmap.clear();
    }

    pub fn has_nullBitmap(&self) -> bool {
        self.nullBitmap.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nullBitmap(&mut self, v: ::std::vec::Vec<u8>) {
        self.nullBitmap = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nullBitmap(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.nullBitmap.is_none() {
            self.nullBitmap.set_default();
        }
        self.nullBitmap.as_mut().unwrap()
    }

    // Take field
    pub fn take_nullBitmap(&mut self) -> ::std::vec::Vec<u8> {
        self.nullBitmap.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_nullBitmap(&self) -> &[u8] {
        match self.nullBitmap.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional bytes data = 4;

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.data.is_none() {
            self.data.set_default();
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        self.data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_data(&self) -> &[u8] {
        match self.data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // repeated int32 offsets = 5;

    pub fn clear_offsets(&mut self) {
        self.offsets.clear();
    }

    // Param is passed by value, moved
    pub fn set_offsets(&mut self, v: ::std::vec::Vec<i32>) {
        self.offsets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_offsets(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.offsets
    }

    // Take field
    pub fn take_offsets(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.offsets, ::std::vec::Vec::new())
    }

    pub fn get_offsets(&self) -> &[i32] {
        &self.offsets
    }
}

impl ::protobuf::Message for Array {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.length = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.nullCount = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.nullBitmap)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.data)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.offsets)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.length {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.nullCount {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.nullBitmap.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        for value in &self.offsets {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.length {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.nullCount {
            os.write_int32(2, v)?;
        }
        if let Some(ref v) = self.nullBitmap.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.data.as_ref() {
            os.write_bytes(4, &v)?;
        }
        for v in &self.offsets {
            os.write_int32(5, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Array {
        Array::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "length",
                    |m: &Array| { &m.length },
                    |m: &mut Array| { &mut m.length },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "nullCount",
                    |m: &Array| { &m.nullCount },
                    |m: &mut Array| { &mut m.nullCount },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "nullBitmap",
                    |m: &Array| { &m.nullBitmap },
                    |m: &mut Array| { &mut m.nullBitmap },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &Array| { &m.data },
                    |m: &mut Array| { &mut m.data },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "offsets",
                    |m: &Array| { &m.offsets },
                    |m: &mut Array| { &mut m.offsets },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Array>(
                    "Array",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Array {
        static mut instance: ::protobuf::lazy::Lazy<Array> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Array,
        };
        unsafe {
            instance.get(Array::new)
        }
    }
}

impl ::protobuf::Clear for Array {
    fn clear(&mut self) {
        self.clear_length();
        self.clear_nullCount();
        self.clear_nullBitmap();
        self.clear_data();
        self.clear_offsets();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Array {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Array {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChunkedArray {
    // message fields
    arrays: ::protobuf::RepeatedField<Array>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ChunkedArray {
    pub fn new() -> ChunkedArray {
        ::std::default::Default::default()
    }

    // repeated .tipb.Array arrays = 1;

    pub fn clear_arrays(&mut self) {
        self.arrays.clear();
    }

    // Param is passed by value, moved
    pub fn set_arrays(&mut self, v: ::protobuf::RepeatedField<Array>) {
        self.arrays = v;
    }

    // Mutable pointer to the field.
    pub fn mut_arrays(&mut self) -> &mut ::protobuf::RepeatedField<Array> {
        &mut self.arrays
    }

    // Take field
    pub fn take_arrays(&mut self) -> ::protobuf::RepeatedField<Array> {
        ::std::mem::replace(&mut self.arrays, ::protobuf::RepeatedField::new())
    }

    pub fn get_arrays(&self) -> &[Array] {
        &self.arrays
    }
}

impl ::protobuf::Message for ChunkedArray {
    fn is_initialized(&self) -> bool {
        for v in &self.arrays {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.arrays)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.arrays {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.arrays {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChunkedArray {
        ChunkedArray::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Array>>(
                    "arrays",
                    |m: &ChunkedArray| { &m.arrays },
                    |m: &mut ChunkedArray| { &mut m.arrays },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ChunkedArray>(
                    "ChunkedArray",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ChunkedArray {
        static mut instance: ::protobuf::lazy::Lazy<ChunkedArray> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ChunkedArray,
        };
        unsafe {
            instance.get(ChunkedArray::new)
        }
    }
}

impl ::protobuf::Clear for ChunkedArray {
    fn clear(&mut self) {
        self.clear_arrays();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChunkedArray {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkedArray {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0barray.proto\x12\x04tipb\x1a\x14gogoproto/gogo.proto\"\x97\x01\n\
    \x05Array\x12\x1c\n\x06length\x18\x01\x20\x01(\x05R\x06lengthB\x04\xc8\
    \xde\x1f\0\x12\"\n\tnullCount\x18\x02\x20\x01(\x05R\tnullCountB\x04\xc8\
    \xde\x1f\0\x12\x1e\n\nnullBitmap\x18\x03\x20\x01(\x0cR\nnullBitmap\x12\
    \x12\n\x04data\x18\x04\x20\x01(\x0cR\x04data\x12\x18\n\x07offsets\x18\
    \x05\x20\x03(\x05R\x07offsets\"3\n\x0cChunkedArray\x12#\n\x06arrays\x18\
    \x01\x20\x03(\x0b2\x0b.tipb.ArrayR\x06arraysB%\n\x15com.pingcap.tidb.tip\
    bP\x01\xc8\xe2\x1e\x01\xe0\xe2\x1e\x01\xd0\xe2\x1e\x01J\xe3\x08\n\x06\
    \x12\x04\0\0\x16\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\
    \x03\x02\x08\x0c\n\t\n\x02\x03\0\x12\x03\x04\x07\x1d\n\x08\n\x01\x08\x12\
    \x03\x06\0\"\n\x0b\n\x04\x08\xe7\x07\0\x12\x03\x06\0\"\n\x0c\n\x05\x08\
    \xe7\x07\0\x02\x12\x03\x06\x07\x1a\n\r\n\x06\x08\xe7\x07\0\x02\0\x12\x03\
    \x06\x07\x1a\n\x0e\n\x07\x08\xe7\x07\0\x02\0\x01\x12\x03\x06\x07\x1a\n\
    \x0c\n\x05\x08\xe7\x07\0\x03\x12\x03\x06\x1d!\n\x08\n\x01\x08\x12\x03\
    \x07\0.\n\x0b\n\x04\x08\xe7\x07\x01\x12\x03\x07\0.\n\x0c\n\x05\x08\xe7\
    \x07\x01\x02\x12\x03\x07\x07\x13\n\r\n\x06\x08\xe7\x07\x01\x02\0\x12\x03\
    \x07\x07\x13\n\x0e\n\x07\x08\xe7\x07\x01\x02\0\x01\x12\x03\x07\x07\x13\n\
    \x0c\n\x05\x08\xe7\x07\x01\x07\x12\x03\x07\x16-\n\x08\n\x01\x08\x12\x03\
    \x08\0(\n\x0b\n\x04\x08\xe7\x07\x02\x12\x03\x08\0(\n\x0c\n\x05\x08\xe7\
    \x07\x02\x02\x12\x03\x08\x07\x20\n\r\n\x06\x08\xe7\x07\x02\x02\0\x12\x03\
    \x08\x07\x20\n\x0e\n\x07\x08\xe7\x07\x02\x02\0\x01\x12\x03\x08\x08\x1f\n\
    \x0c\n\x05\x08\xe7\x07\x02\x03\x12\x03\x08#'\n\x08\n\x01\x08\x12\x03\t\0\
    $\n\x0b\n\x04\x08\xe7\x07\x03\x12\x03\t\0$\n\x0c\n\x05\x08\xe7\x07\x03\
    \x02\x12\x03\t\x07\x1c\n\r\n\x06\x08\xe7\x07\x03\x02\0\x12\x03\t\x07\x1c\
    \n\x0e\n\x07\x08\xe7\x07\x03\x02\0\x01\x12\x03\t\x08\x1b\n\x0c\n\x05\x08\
    \xe7\x07\x03\x03\x12\x03\t\x1f#\n\x08\n\x01\x08\x12\x03\n\0*\n\x0b\n\x04\
    \x08\xe7\x07\x04\x12\x03\n\0*\n\x0c\n\x05\x08\xe7\x07\x04\x02\x12\x03\n\
    \x07\"\n\r\n\x06\x08\xe7\x07\x04\x02\0\x12\x03\n\x07\"\n\x0e\n\x07\x08\
    \xe7\x07\x04\x02\0\x01\x12\x03\n\x08!\n\x0c\n\x05\x08\xe7\x07\x04\x03\
    \x12\x03\n%)\n\n\n\x02\x04\0\x12\x04\x0c\0\x12\x01\n\n\n\x03\x04\0\x01\
    \x12\x03\x0c\x08\r\n\x0b\n\x04\x04\0\x02\0\x12\x03\r\x04A\n\x0c\n\x05\
    \x04\0\x02\0\x04\x12\x03\r\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\r\
    \r\x12\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\r\x13\x19\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\r\x20!\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\r\"@\n\x0f\
    \n\x08\x04\0\x02\0\x08\xe7\x07\0\x12\x03\r#?\n\x10\n\t\x04\0\x02\0\x08\
    \xe7\x07\0\x02\x12\x03\r#7\n\x11\n\n\x04\0\x02\0\x08\xe7\x07\0\x02\0\x12\
    \x03\r#7\n\x12\n\x0b\x04\0\x02\0\x08\xe7\x07\0\x02\0\x01\x12\x03\r$6\n\
    \x10\n\t\x04\0\x02\0\x08\xe7\x07\0\x03\x12\x03\r:?\n\x0b\n\x04\x04\0\x02\
    \x01\x12\x03\x0e\x04A\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x0e\x04\x0c\
    \n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0e\r\x12\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x0e\x13\x1c\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0e\
    \x20!\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x0e\"@\n\x0f\n\x08\x04\0\x02\
    \x01\x08\xe7\x07\0\x12\x03\x0e#?\n\x10\n\t\x04\0\x02\x01\x08\xe7\x07\0\
    \x02\x12\x03\x0e#7\n\x11\n\n\x04\0\x02\x01\x08\xe7\x07\0\x02\0\x12\x03\
    \x0e#7\n\x12\n\x0b\x04\0\x02\x01\x08\xe7\x07\0\x02\0\x01\x12\x03\x0e$6\n\
    \x10\n\t\x04\0\x02\x01\x08\xe7\x07\0\x03\x12\x03\x0e:?\n\x0b\n\x04\x04\0\
    \x02\x02\x12\x03\x0f\x04\"\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x0f\x04\
    \x0c\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0f\r\x12\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03\x0f\x13\x1d\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\
    \x0f\x20!\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x10\x04\"\n\x0c\n\x05\x04\0\
    \x02\x03\x04\x12\x03\x10\x04\x0c\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\
    \x10\r\x12\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x10\x13\x17\n\x0c\n\x05\
    \x04\0\x02\x03\x03\x12\x03\x10\x20!\n\x0b\n\x04\x04\0\x02\x04\x12\x03\
    \x11\x04\"\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03\x11\x04\x0c\n\x0c\n\x05\
    \x04\0\x02\x04\x05\x12\x03\x11\r\x12\n\x0c\n\x05\x04\0\x02\x04\x01\x12\
    \x03\x11\x13\x1a\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x11\x20!\n\n\n\
    \x02\x04\x01\x12\x04\x14\0\x16\x01\n\n\n\x03\x04\x01\x01\x12\x03\x14\x08\
    \x14\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x15\x04\x1e\n\x0c\n\x05\x04\x01\
    \x02\0\x04\x12\x03\x15\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x15\
    \r\x12\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x15\x13\x19\n\x0c\n\x05\x04\
    \x01\x02\0\x03\x12\x03\x15\x1c\x1d\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
