// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: explain.proto

package tipb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TaskType int32

const (
	TaskType_unknown  TaskType = 0
	TaskType_root     TaskType = 1
	TaskType_cop      TaskType = 2
	TaskType_batchCop TaskType = 3
	TaskType_mpp      TaskType = 4
)

var TaskType_name = map[int32]string{
	0: "unknown",
	1: "root",
	2: "cop",
	3: "batchCop",
	4: "mpp",
}
var TaskType_value = map[string]int32{
	"unknown":  0,
	"root":     1,
	"cop":      2,
	"batchCop": 3,
	"mpp":      4,
}

func (x TaskType) String() string {
	return proto.EnumName(TaskType_name, int32(x))
}
func (TaskType) EnumDescriptor() ([]byte, []int) { return fileDescriptorExplain, []int{0} }

type StoreType int32

const (
	StoreType_unspecified StoreType = 0
	StoreType_tidb        StoreType = 1
	StoreType_tikv        StoreType = 2
	StoreType_tiflash     StoreType = 3
)

var StoreType_name = map[int32]string{
	0: "unspecified",
	1: "tidb",
	2: "tikv",
	3: "tiflash",
}
var StoreType_value = map[string]int32{
	"unspecified": 0,
	"tidb":        1,
	"tikv":        2,
	"tiflash":     3,
}

func (x StoreType) String() string {
	return proto.EnumName(StoreType_name, int32(x))
}
func (StoreType) EnumDescriptor() ([]byte, []int) { return fileDescriptorExplain, []int{1} }

type DriverSide int32

const (
	DriverSide_empty     DriverSide = 0
	DriverSide_build     DriverSide = 1
	DriverSide_probe     DriverSide = 2
	DriverSide_seed      DriverSide = 3
	DriverSide_recursive DriverSide = 4
)

var DriverSide_name = map[int32]string{
	0: "empty",
	1: "build",
	2: "probe",
	3: "seed",
	4: "recursive",
}
var DriverSide_value = map[string]int32{
	"empty":     0,
	"build":     1,
	"probe":     2,
	"seed":      3,
	"recursive": 4,
}

func (x DriverSide) String() string {
	return proto.EnumName(DriverSide_name, int32(x))
}
func (DriverSide) EnumDescriptor() ([]byte, []int) { return fileDescriptorExplain, []int{2} }

type ExplainData struct {
	Main *ExplainOperator   `protobuf:"bytes,1,opt,name=main" json:"main,omitempty"`
	Ctes []*ExplainOperator `protobuf:"bytes,2,rep,name=ctes" json:"ctes,omitempty"`
	// If runtime stats are not available, the act_rows, *_exec_info, memory_bytes and disk_bytes should not be used.
	WithRuntimeStats bool `protobuf:"varint,3,opt,name=with_runtime_stats,json=withRuntimeStats,proto3" json:"with_runtime_stats,omitempty"`
	// If this field is true. The main and ctes fields should be empty and should not be used.
	// This field can be changed to a enum or int if we need to represent more states in the future.
	DiscardedDueToTooLong bool `protobuf:"varint,4,opt,name=discarded_due_to_too_long,json=discardedDueToTooLong,proto3" json:"discarded_due_to_too_long,omitempty"`
}

func (m *ExplainData) Reset()                    { *m = ExplainData{} }
func (m *ExplainData) String() string            { return proto.CompactTextString(m) }
func (*ExplainData) ProtoMessage()               {}
func (*ExplainData) Descriptor() ([]byte, []int) { return fileDescriptorExplain, []int{0} }

func (m *ExplainData) GetMain() *ExplainOperator {
	if m != nil {
		return m.Main
	}
	return nil
}

func (m *ExplainData) GetCtes() []*ExplainOperator {
	if m != nil {
		return m.Ctes
	}
	return nil
}

func (m *ExplainData) GetWithRuntimeStats() bool {
	if m != nil {
		return m.WithRuntimeStats
	}
	return false
}

func (m *ExplainData) GetDiscardedDueToTooLong() bool {
	if m != nil {
		return m.DiscardedDueToTooLong
	}
	return false
}

type ExplainOperator struct {
	Name       string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Children   []*ExplainOperator `protobuf:"bytes,2,rep,name=children" json:"children,omitempty"`
	DriverSide DriverSide         `protobuf:"varint,3,opt,name=driver_side,json=driverSide,proto3,enum=tipb.DriverSide" json:"driver_side,omitempty"`
	// the cost of the current operator
	// runtime stats available: cost is re-calculated using actual row count
	// runtime stats unavailable: cost is estimated
	Cost      float64   `protobuf:"fixed64,4,opt,name=cost,proto3" json:"cost,omitempty"`
	EstRows   float64   `protobuf:"fixed64,5,opt,name=est_rows,json=estRows,proto3" json:"est_rows,omitempty"`
	ActRows   uint64    `protobuf:"varint,6,opt,name=act_rows,json=actRows,proto3" json:"act_rows,omitempty"`
	TaskType  TaskType  `protobuf:"varint,7,opt,name=task_type,json=taskType,proto3,enum=tipb.TaskType" json:"task_type,omitempty"`
	StoreType StoreType `protobuf:"varint,8,opt,name=store_type,json=storeType,proto3,enum=tipb.StoreType" json:"store_type,omitempty"`
	// The XXXReader/XXXScan/MemTable/PointGet/BatchPointGet may use this
	AccessObjects     []*AccessObject `protobuf:"bytes,9,rep,name=access_objects,json=accessObjects" json:"access_objects,omitempty"`
	OperatorInfo      string          `protobuf:"bytes,10,opt,name=operator_info,json=operatorInfo,proto3" json:"operator_info,omitempty"`
	RootBasicExecInfo string          `protobuf:"bytes,11,opt,name=root_basic_exec_info,json=rootBasicExecInfo,proto3" json:"root_basic_exec_info,omitempty"`
	RootGroupExecInfo []string        `protobuf:"bytes,12,rep,name=root_group_exec_info,json=rootGroupExecInfo" json:"root_group_exec_info,omitempty"`
	CopExecInfo       string          `protobuf:"bytes,13,opt,name=cop_exec_info,json=copExecInfo,proto3" json:"cop_exec_info,omitempty"`
	MemoryBytes       int64           `protobuf:"varint,14,opt,name=memory_bytes,json=memoryBytes,proto3" json:"memory_bytes,omitempty"`
	DiskBytes         int64           `protobuf:"varint,15,opt,name=disk_bytes,json=diskBytes,proto3" json:"disk_bytes,omitempty"`
}

func (m *ExplainOperator) Reset()                    { *m = ExplainOperator{} }
func (m *ExplainOperator) String() string            { return proto.CompactTextString(m) }
func (*ExplainOperator) ProtoMessage()               {}
func (*ExplainOperator) Descriptor() ([]byte, []int) { return fileDescriptorExplain, []int{1} }

func (m *ExplainOperator) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExplainOperator) GetChildren() []*ExplainOperator {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *ExplainOperator) GetDriverSide() DriverSide {
	if m != nil {
		return m.DriverSide
	}
	return DriverSide_empty
}

func (m *ExplainOperator) GetCost() float64 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *ExplainOperator) GetEstRows() float64 {
	if m != nil {
		return m.EstRows
	}
	return 0
}

func (m *ExplainOperator) GetActRows() uint64 {
	if m != nil {
		return m.ActRows
	}
	return 0
}

func (m *ExplainOperator) GetTaskType() TaskType {
	if m != nil {
		return m.TaskType
	}
	return TaskType_unknown
}

func (m *ExplainOperator) GetStoreType() StoreType {
	if m != nil {
		return m.StoreType
	}
	return StoreType_unspecified
}

func (m *ExplainOperator) GetAccessObjects() []*AccessObject {
	if m != nil {
		return m.AccessObjects
	}
	return nil
}

func (m *ExplainOperator) GetOperatorInfo() string {
	if m != nil {
		return m.OperatorInfo
	}
	return ""
}

func (m *ExplainOperator) GetRootBasicExecInfo() string {
	if m != nil {
		return m.RootBasicExecInfo
	}
	return ""
}

func (m *ExplainOperator) GetRootGroupExecInfo() []string {
	if m != nil {
		return m.RootGroupExecInfo
	}
	return nil
}

func (m *ExplainOperator) GetCopExecInfo() string {
	if m != nil {
		return m.CopExecInfo
	}
	return ""
}

func (m *ExplainOperator) GetMemoryBytes() int64 {
	if m != nil {
		return m.MemoryBytes
	}
	return 0
}

func (m *ExplainOperator) GetDiskBytes() int64 {
	if m != nil {
		return m.DiskBytes
	}
	return 0
}

type AccessObject struct {
	Table     string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	Index     string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	Partition string `protobuf:"bytes,3,opt,name=partition,proto3" json:"partition,omitempty"`
}

func (m *AccessObject) Reset()                    { *m = AccessObject{} }
func (m *AccessObject) String() string            { return proto.CompactTextString(m) }
func (*AccessObject) ProtoMessage()               {}
func (*AccessObject) Descriptor() ([]byte, []int) { return fileDescriptorExplain, []int{2} }

func (m *AccessObject) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *AccessObject) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *AccessObject) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

func init() {
	proto.RegisterType((*ExplainData)(nil), "tipb.ExplainData")
	proto.RegisterType((*ExplainOperator)(nil), "tipb.ExplainOperator")
	proto.RegisterType((*AccessObject)(nil), "tipb.AccessObject")
	proto.RegisterEnum("tipb.TaskType", TaskType_name, TaskType_value)
	proto.RegisterEnum("tipb.StoreType", StoreType_name, StoreType_value)
	proto.RegisterEnum("tipb.DriverSide", DriverSide_name, DriverSide_value)
}
func (m *ExplainData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExplainData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Main != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExplain(dAtA, i, uint64(m.Main.Size()))
		n1, err := m.Main.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Ctes) > 0 {
		for _, msg := range m.Ctes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintExplain(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.WithRuntimeStats {
		dAtA[i] = 0x18
		i++
		if m.WithRuntimeStats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DiscardedDueToTooLong {
		dAtA[i] = 0x20
		i++
		if m.DiscardedDueToTooLong {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ExplainOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExplainOperator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExplain(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Children) > 0 {
		for _, msg := range m.Children {
			dAtA[i] = 0x12
			i++
			i = encodeVarintExplain(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.DriverSide != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintExplain(dAtA, i, uint64(m.DriverSide))
	}
	if m.Cost != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Cost))))
		i += 8
	}
	if m.EstRows != 0 {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.EstRows))))
		i += 8
	}
	if m.ActRows != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintExplain(dAtA, i, uint64(m.ActRows))
	}
	if m.TaskType != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintExplain(dAtA, i, uint64(m.TaskType))
	}
	if m.StoreType != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintExplain(dAtA, i, uint64(m.StoreType))
	}
	if len(m.AccessObjects) > 0 {
		for _, msg := range m.AccessObjects {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintExplain(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OperatorInfo) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintExplain(dAtA, i, uint64(len(m.OperatorInfo)))
		i += copy(dAtA[i:], m.OperatorInfo)
	}
	if len(m.RootBasicExecInfo) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintExplain(dAtA, i, uint64(len(m.RootBasicExecInfo)))
		i += copy(dAtA[i:], m.RootBasicExecInfo)
	}
	if len(m.RootGroupExecInfo) > 0 {
		for _, s := range m.RootGroupExecInfo {
			dAtA[i] = 0x62
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.CopExecInfo) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintExplain(dAtA, i, uint64(len(m.CopExecInfo)))
		i += copy(dAtA[i:], m.CopExecInfo)
	}
	if m.MemoryBytes != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintExplain(dAtA, i, uint64(m.MemoryBytes))
	}
	if m.DiskBytes != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintExplain(dAtA, i, uint64(m.DiskBytes))
	}
	return i, nil
}

func (m *AccessObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Table) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExplain(dAtA, i, uint64(len(m.Table)))
		i += copy(dAtA[i:], m.Table)
	}
	if len(m.Index) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExplain(dAtA, i, uint64(len(m.Index)))
		i += copy(dAtA[i:], m.Index)
	}
	if len(m.Partition) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExplain(dAtA, i, uint64(len(m.Partition)))
		i += copy(dAtA[i:], m.Partition)
	}
	return i, nil
}

func encodeVarintExplain(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ExplainData) Size() (n int) {
	var l int
	_ = l
	if m.Main != nil {
		l = m.Main.Size()
		n += 1 + l + sovExplain(uint64(l))
	}
	if len(m.Ctes) > 0 {
		for _, e := range m.Ctes {
			l = e.Size()
			n += 1 + l + sovExplain(uint64(l))
		}
	}
	if m.WithRuntimeStats {
		n += 2
	}
	if m.DiscardedDueToTooLong {
		n += 2
	}
	return n
}

func (m *ExplainOperator) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovExplain(uint64(l))
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovExplain(uint64(l))
		}
	}
	if m.DriverSide != 0 {
		n += 1 + sovExplain(uint64(m.DriverSide))
	}
	if m.Cost != 0 {
		n += 9
	}
	if m.EstRows != 0 {
		n += 9
	}
	if m.ActRows != 0 {
		n += 1 + sovExplain(uint64(m.ActRows))
	}
	if m.TaskType != 0 {
		n += 1 + sovExplain(uint64(m.TaskType))
	}
	if m.StoreType != 0 {
		n += 1 + sovExplain(uint64(m.StoreType))
	}
	if len(m.AccessObjects) > 0 {
		for _, e := range m.AccessObjects {
			l = e.Size()
			n += 1 + l + sovExplain(uint64(l))
		}
	}
	l = len(m.OperatorInfo)
	if l > 0 {
		n += 1 + l + sovExplain(uint64(l))
	}
	l = len(m.RootBasicExecInfo)
	if l > 0 {
		n += 1 + l + sovExplain(uint64(l))
	}
	if len(m.RootGroupExecInfo) > 0 {
		for _, s := range m.RootGroupExecInfo {
			l = len(s)
			n += 1 + l + sovExplain(uint64(l))
		}
	}
	l = len(m.CopExecInfo)
	if l > 0 {
		n += 1 + l + sovExplain(uint64(l))
	}
	if m.MemoryBytes != 0 {
		n += 1 + sovExplain(uint64(m.MemoryBytes))
	}
	if m.DiskBytes != 0 {
		n += 1 + sovExplain(uint64(m.DiskBytes))
	}
	return n
}

func (m *AccessObject) Size() (n int) {
	var l int
	_ = l
	l = len(m.Table)
	if l > 0 {
		n += 1 + l + sovExplain(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovExplain(uint64(l))
	}
	l = len(m.Partition)
	if l > 0 {
		n += 1 + l + sovExplain(uint64(l))
	}
	return n
}

func sovExplain(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExplain(x uint64) (n int) {
	return sovExplain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExplainData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExplainData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExplainData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Main", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplain
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Main == nil {
				m.Main = &ExplainOperator{}
			}
			if err := m.Main.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplain
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctes = append(m.Ctes, &ExplainOperator{})
			if err := m.Ctes[len(m.Ctes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithRuntimeStats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithRuntimeStats = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscardedDueToTooLong", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscardedDueToTooLong = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipExplain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExplain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExplainOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExplainOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExplainOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplain
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &ExplainOperator{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverSide", wireType)
			}
			m.DriverSide = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DriverSide |= (DriverSide(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Cost = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstRows", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.EstRows = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActRows", wireType)
			}
			m.ActRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActRows |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskType", wireType)
			}
			m.TaskType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskType |= (TaskType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreType", wireType)
			}
			m.StoreType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreType |= (StoreType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessObjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplain
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessObjects = append(m.AccessObjects, &AccessObject{})
			if err := m.AccessObjects[len(m.AccessObjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootBasicExecInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootBasicExecInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootGroupExecInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootGroupExecInfo = append(m.RootGroupExecInfo, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopExecInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CopExecInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryBytes", wireType)
			}
			m.MemoryBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryBytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskBytes", wireType)
			}
			m.DiskBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskBytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExplain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExplain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccessObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Table = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExplain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExplain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExplain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExplain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthExplain
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExplain
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExplain(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExplain = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExplain   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("explain.proto", fileDescriptorExplain) }

var fileDescriptorExplain = []byte{
	// 706 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0x41, 0x6f, 0xe4, 0x34,
	0x14, 0xc7, 0x9b, 0x99, 0x74, 0x27, 0x79, 0x99, 0x69, 0x83, 0xd5, 0x4a, 0x59, 0x04, 0xd5, 0x50,
	0x2e, 0xdd, 0x82, 0x66, 0xb5, 0xcb, 0x05, 0x0e, 0x1c, 0xb6, 0x74, 0x41, 0x48, 0x48, 0x8b, 0xd2,
	0x1e, 0xb8, 0x45, 0x8e, 0xf3, 0x3a, 0x35, 0x33, 0xf1, 0xb3, 0x6c, 0xa7, 0xed, 0x7c, 0x13, 0x3e,
	0x12, 0x12, 0x17, 0xce, 0x9c, 0x50, 0xf9, 0x22, 0xc8, 0xce, 0xcc, 0x74, 0xe0, 0xd0, 0xdb, 0xdf,
	0xff, 0xff, 0xef, 0xd9, 0x2f, 0xf6, 0x53, 0x60, 0x82, 0x0f, 0x7a, 0xc9, 0xa5, 0x9a, 0x69, 0x43,
	0x8e, 0x58, 0xec, 0xa4, 0xae, 0x3f, 0x3e, 0x9a, 0xd3, 0x9c, 0x82, 0xf1, 0xda, 0xab, 0x3e, 0x3b,
	0xfd, 0x23, 0x82, 0xec, 0x7d, 0x4f, 0x5f, 0x72, 0xc7, 0xd9, 0x2b, 0x88, 0x5b, 0x2e, 0x55, 0x11,
	0x4d, 0xa3, 0xb3, 0xec, 0xed, 0xf1, 0xcc, 0x97, 0xce, 0xd6, 0xc0, 0x07, 0x8d, 0x86, 0x3b, 0x32,
	0x65, 0x40, 0x3c, 0x2a, 0x1c, 0xda, 0x62, 0x30, 0x1d, 0x3e, 0x83, 0x7a, 0x84, 0x7d, 0x09, 0xec,
	0x5e, 0xba, 0xdb, 0xca, 0x74, 0xca, 0xc9, 0x16, 0x2b, 0xeb, 0xb8, 0xb3, 0xc5, 0x70, 0x1a, 0x9d,
	0x25, 0x65, 0xee, 0x93, 0xb2, 0x0f, 0xae, 0xbc, 0xcf, 0xbe, 0x86, 0x97, 0x8d, 0xb4, 0x82, 0x9b,
	0x06, 0x9b, 0xaa, 0xe9, 0xb0, 0x72, 0x54, 0x39, 0xa2, 0x6a, 0x49, 0x6a, 0x5e, 0xc4, 0xa1, 0xe8,
	0x78, 0x0b, 0x5c, 0x76, 0x78, 0x4d, 0xd7, 0x44, 0x3f, 0x91, 0x9a, 0x9f, 0xfe, 0x15, 0xc3, 0xe1,
	0xff, 0x3a, 0x60, 0x0c, 0x62, 0xc5, 0x5b, 0x0c, 0x5f, 0x94, 0x96, 0x41, 0xb3, 0x37, 0x90, 0x88,
	0x5b, 0xb9, 0x6c, 0x0c, 0xaa, 0xe7, 0xdb, 0xdf, 0x62, 0xec, 0x0d, 0x64, 0x8d, 0x91, 0x77, 0x68,
	0x2a, 0x2b, 0x1b, 0x0c, 0xbd, 0x1f, 0xbc, 0xcd, 0xfb, 0xaa, 0xcb, 0x10, 0x5c, 0xc9, 0x06, 0x4b,
	0x68, 0xb6, 0xda, 0x9f, 0x2c, 0xc8, 0xba, 0xd0, 0x72, 0x54, 0x06, 0xcd, 0x5e, 0x42, 0x82, 0xd6,
	0x55, 0x86, 0xee, 0x6d, 0xb1, 0x1f, 0xfc, 0x11, 0x5a, 0x57, 0xd2, 0xbd, 0xf5, 0x11, 0x17, 0xeb,
	0xe8, 0xc5, 0x34, 0x3a, 0x8b, 0xcb, 0x11, 0x17, 0x7d, 0xf4, 0x05, 0xa4, 0x8e, 0xdb, 0x45, 0xe5,
	0x56, 0x1a, 0x8b, 0x51, 0x38, 0xfa, 0xa0, 0x3f, 0xfa, 0x9a, 0xdb, 0xc5, 0xf5, 0x4a, 0x63, 0x99,
	0xb8, 0xb5, 0x62, 0x33, 0x00, 0xeb, 0xc8, 0x60, 0x4f, 0x27, 0x81, 0x3e, 0xec, 0xe9, 0x2b, 0xef,
	0x07, 0x3c, 0xb5, 0x1b, 0xc9, 0xbe, 0x81, 0x03, 0x2e, 0x04, 0x5a, 0x5b, 0x51, 0xfd, 0x2b, 0x0a,
	0x67, 0x8b, 0x34, 0x5c, 0x09, 0xeb, 0x6b, 0xde, 0x85, 0xec, 0x43, 0x88, 0xca, 0x09, 0xdf, 0x59,
	0x59, 0xf6, 0x39, 0x4c, 0x68, 0x7d, 0x55, 0x95, 0x54, 0x37, 0x54, 0x40, 0xb8, 0xe4, 0xf1, 0xc6,
	0xfc, 0x51, 0xdd, 0x10, 0x7b, 0x0d, 0x47, 0x86, 0xc8, 0x55, 0x35, 0xb7, 0x52, 0x54, 0xf8, 0x80,
	0xa2, 0x67, 0xb3, 0xc0, 0x7e, 0xe4, 0xb3, 0x0b, 0x1f, 0xbd, 0x7f, 0x40, 0xf1, 0x9f, 0x82, 0xb9,
	0xa1, 0x4e, 0xef, 0x14, 0x8c, 0xa7, 0xc3, 0x4d, 0xc1, 0x0f, 0x3e, 0xda, 0x16, 0x9c, 0xc2, 0x44,
	0xd0, 0x2e, 0x39, 0x09, 0x5b, 0x67, 0x82, 0x9e, 0x98, 0xcf, 0x60, 0xdc, 0x62, 0x4b, 0x66, 0x55,
	0xd5, 0x2b, 0x3f, 0xb5, 0x07, 0xd3, 0xe8, 0x6c, 0x58, 0x66, 0xbd, 0x77, 0xe1, 0x2d, 0xf6, 0x29,
	0x40, 0x23, 0xed, 0x62, 0x0d, 0x1c, 0x06, 0x20, 0xf5, 0x4e, 0x88, 0x4f, 0x7f, 0x81, 0xf1, 0xee,
	0x5d, 0xb0, 0x23, 0xd8, 0x77, 0xbc, 0x5e, 0x6e, 0x26, 0xab, 0x5f, 0x78, 0x57, 0xaa, 0x06, 0x1f,
	0x8a, 0x41, 0xef, 0x86, 0x05, 0xfb, 0x04, 0x52, 0xcd, 0x8d, 0x93, 0x4e, 0x92, 0x0a, 0xb3, 0x93,
	0x96, 0x4f, 0xc6, 0xf9, 0x3b, 0x48, 0x36, 0xef, 0xc8, 0x32, 0x18, 0x75, 0x6a, 0xa1, 0xe8, 0x5e,
	0xe5, 0x7b, 0x2c, 0x81, 0xd8, 0x7f, 0x6d, 0x1e, 0xb1, 0x11, 0x0c, 0x05, 0xe9, 0x7c, 0xc0, 0xc6,
	0x90, 0xd4, 0xdc, 0x89, 0xdb, 0xef, 0x48, 0xe7, 0x43, 0x6f, 0xb7, 0x5a, 0xe7, 0xf1, 0xf9, 0xb7,
	0x90, 0x6e, 0x1f, 0x97, 0x1d, 0x42, 0xd6, 0x29, 0xab, 0x51, 0xc8, 0x1b, 0x89, 0x4d, 0xbf, 0x8f,
	0x93, 0x4d, 0x9d, 0x47, 0xbd, 0x5a, 0xdc, 0xe5, 0x03, 0x7f, 0x90, 0x93, 0x37, 0x4b, 0x6e, 0x6f,
	0xf3, 0xe1, 0xf9, 0xf7, 0x00, 0x4f, 0x43, 0xcc, 0x52, 0xd8, 0xc7, 0x56, 0xbb, 0x55, 0xbe, 0xe7,
	0x65, 0xdd, 0xc9, 0x65, 0x93, 0x47, 0x5e, 0x6a, 0x43, 0x35, 0xe6, 0x03, 0xbf, 0x8b, 0x45, 0x6c,
	0xf2, 0x21, 0x9b, 0x40, 0x6a, 0x50, 0x74, 0xc6, 0xca, 0x3b, 0xcc, 0xe3, 0x8b, 0x57, 0xbf, 0x3f,
	0x9e, 0x44, 0x7f, 0x3e, 0x9e, 0x44, 0x7f, 0x3f, 0x9e, 0x44, 0xbf, 0xfd, 0x73, 0xb2, 0x07, 0xc7,
	0x82, 0xda, 0x99, 0x96, 0x6a, 0x2e, 0xb8, 0x9e, 0xf9, 0x26, 0xc2, 0x54, 0xfd, 0x1c, 0xd5, 0x2f,
	0xc2, 0x0f, 0xe8, 0xab, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xce, 0xee, 0xe0, 0xad, 0x04,
	0x00, 0x00,
}
