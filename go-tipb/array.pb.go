// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: array.proto

package tipb

import (
	"fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Array struct {
	Length           int32   `protobuf:"varint,1,opt,name=length" json:"length"`
	NullCount        int32   `protobuf:"varint,2,opt,name=nullCount" json:"nullCount"`
	NullBitmap       []byte  `protobuf:"bytes,3,opt,name=nullBitmap" json:"nullBitmap,omitempty"`
	Data             []byte  `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	Offsets          []int32 `protobuf:"varint,5,rep,name=offsets" json:"offsets,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Array) Reset()                    { *m = Array{} }
func (m *Array) String() string            { return proto.CompactTextString(m) }
func (*Array) ProtoMessage()               {}
func (*Array) Descriptor() ([]byte, []int) { return fileDescriptorArray, []int{0} }

func (m *Array) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Array) GetNullCount() int32 {
	if m != nil {
		return m.NullCount
	}
	return 0
}

func (m *Array) GetNullBitmap() []byte {
	if m != nil {
		return m.NullBitmap
	}
	return nil
}

func (m *Array) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Array) GetOffsets() []int32 {
	if m != nil {
		return m.Offsets
	}
	return nil
}

type ChunkedArray struct {
	Arrays           []*Array `protobuf:"bytes,1,rep,name=arrays" json:"arrays,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ChunkedArray) Reset()                    { *m = ChunkedArray{} }
func (m *ChunkedArray) String() string            { return proto.CompactTextString(m) }
func (*ChunkedArray) ProtoMessage()               {}
func (*ChunkedArray) Descriptor() ([]byte, []int) { return fileDescriptorArray, []int{1} }

func (m *ChunkedArray) GetArrays() []*Array {
	if m != nil {
		return m.Arrays
	}
	return nil
}

func init() {
	proto.RegisterType((*Array)(nil), "tipb.Array")
	proto.RegisterType((*ChunkedArray)(nil), "tipb.ChunkedArray")
}
func (m *Array) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Array) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintArray(dAtA, i, uint64(m.Length))
	dAtA[i] = 0x10
	i++
	i = encodeVarintArray(dAtA, i, uint64(m.NullCount))
	if m.NullBitmap != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintArray(dAtA, i, uint64(len(m.NullBitmap)))
		i += copy(dAtA[i:], m.NullBitmap)
	}
	if m.Data != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintArray(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Offsets) > 0 {
		for _, num := range m.Offsets {
			dAtA[i] = 0x28
			i++
			i = encodeVarintArray(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChunkedArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkedArray) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Arrays) > 0 {
		for _, msg := range m.Arrays {
			dAtA[i] = 0xa
			i++
			i = encodeVarintArray(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintArray(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Array) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovArray(uint64(m.Length))
	n += 1 + sovArray(uint64(m.NullCount))
	if m.NullBitmap != nil {
		l = len(m.NullBitmap)
		n += 1 + l + sovArray(uint64(l))
	}
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovArray(uint64(l))
	}
	if len(m.Offsets) > 0 {
		for _, e := range m.Offsets {
			n += 1 + sovArray(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChunkedArray) Size() (n int) {
	var l int
	_ = l
	if len(m.Arrays) > 0 {
		for _, e := range m.Arrays {
			l = e.Size()
			n += 1 + l + sovArray(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovArray(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozArray(x uint64) (n int) {
	return sovArray(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Array) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArray
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Array: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Array: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArray
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullCount", wireType)
			}
			m.NullCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArray
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NullCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullBitmap", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArray
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthArray
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NullBitmap = append(m.NullBitmap[:0], dAtA[iNdEx:postIndex]...)
			if m.NullBitmap == nil {
				m.NullBitmap = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArray
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthArray
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowArray
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Offsets = append(m.Offsets, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowArray
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthArray
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowArray
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Offsets = append(m.Offsets, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Offsets", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArray(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArray
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChunkedArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArray
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkedArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkedArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arrays", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArray
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArray
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arrays = append(m.Arrays, &Array{})
			if err := m.Arrays[len(m.Arrays)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArray(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArray
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArray(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArray
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArray
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArray
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthArray
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowArray
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipArray(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthArray = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArray   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("array.proto", fileDescriptorArray) }

var fileDescriptorArray = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0x41, 0x4e, 0xc3, 0x30,
	0x10, 0x45, 0x3b, 0x24, 0x29, 0x62, 0xd2, 0x95, 0x05, 0x92, 0x85, 0x90, 0x89, 0xc2, 0x26, 0x6c,
	0x8c, 0x04, 0x27, 0x20, 0xbd, 0x00, 0xca, 0x0d, 0xdc, 0x26, 0x4d, 0x2d, 0x52, 0xdb, 0x4a, 0x26,
	0x0b, 0x4e, 0x02, 0x47, 0xea, 0x92, 0x13, 0x20, 0x14, 0x2e, 0x82, 0xec, 0x16, 0xd1, 0xdd, 0xfc,
	0xf7, 0xbe, 0x25, 0x7f, 0x4c, 0x55, 0xdf, 0xab, 0x37, 0xe9, 0x7a, 0x4b, 0x96, 0xc5, 0xa4, 0xdd,
	0xea, 0xfa, 0xb2, 0xb5, 0xad, 0x0d, 0xe0, 0xc1, 0x5f, 0x07, 0x97, 0xbf, 0x03, 0x26, 0xcf, 0xbe,
	0xcb, 0x6e, 0x70, 0xde, 0x35, 0xa6, 0xa5, 0x2d, 0x87, 0x0c, 0x8a, 0xa4, 0x8c, 0xf7, 0x5f, 0xb7,
	0xb3, 0xea, 0xc8, 0x58, 0x8e, 0x17, 0x66, 0xec, 0xba, 0xa5, 0x1d, 0x0d, 0xf1, 0xb3, 0x93, 0xc2,
	0x3f, 0x66, 0x02, 0xd1, 0x87, 0x52, 0xd3, 0x4e, 0x39, 0x1e, 0x65, 0x50, 0x2c, 0xaa, 0x13, 0xc2,
	0x18, 0xc6, 0xb5, 0x22, 0xc5, 0xe3, 0x60, 0xc2, 0xcd, 0x38, 0x9e, 0xdb, 0xcd, 0x66, 0x68, 0x68,
	0xe0, 0x49, 0x16, 0x15, 0x49, 0xf5, 0x17, 0xf3, 0x27, 0x5c, 0x2c, 0xb7, 0xa3, 0x79, 0x6d, 0xea,
	0xc3, 0xff, 0xee, 0x70, 0x1e, 0x46, 0x0d, 0x1c, 0xb2, 0xa8, 0x48, 0x1f, 0x53, 0xe9, 0x67, 0xc9,
	0x20, 0xab, 0xa3, 0x2a, 0xef, 0xf7, 0x93, 0x80, 0xcf, 0x49, 0xc0, 0xf7, 0x24, 0xe0, 0xe3, 0x47,
	0xcc, 0xf0, 0x6a, 0x6d, 0x77, 0xd2, 0x69, 0xd3, 0xae, 0x95, 0x93, 0xa4, 0xeb, 0x55, 0x78, 0xf6,
	0x02, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x12, 0xc2, 0x68, 0xf1, 0x23, 0x01, 0x00, 0x00,
}
