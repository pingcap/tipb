// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: analyze.proto

package tipb

import (
	encoding_binary "encoding/binary"
	"fmt"
	"io"
	"math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"

	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AnalyzeType int32

const (
	AnalyzeType_TypeIndex        AnalyzeType = 0
	AnalyzeType_TypeColumn       AnalyzeType = 1
	AnalyzeType_TypeCommonHandle AnalyzeType = 2
	AnalyzeType_TypeSampleIndex  AnalyzeType = 3
	AnalyzeType_TypeMixed        AnalyzeType = 4
	AnalyzeType_TypeFullSampling AnalyzeType = 5
)

var AnalyzeType_name = map[int32]string{
	0: "TypeIndex",
	1: "TypeColumn",
	2: "TypeCommonHandle",
	3: "TypeSampleIndex",
	4: "TypeMixed",
	5: "TypeFullSampling",
}

var AnalyzeType_value = map[string]int32{
	"TypeIndex":        0,
	"TypeColumn":       1,
	"TypeCommonHandle": 2,
	"TypeSampleIndex":  3,
	"TypeMixed":        4,
	"TypeFullSampling": 5,
}

func (x AnalyzeType) Enum() *AnalyzeType {
	p := new(AnalyzeType)
	*p = x
	return p
}

func (x AnalyzeType) String() string {
	return proto.EnumName(AnalyzeType_name, int32(x))
}

func (x *AnalyzeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AnalyzeType_value, data, "AnalyzeType")
	if err != nil {
		return err
	}
	*x = AnalyzeType(value)
	return nil
}

func (AnalyzeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_76c3eb6de5a1604f, []int{0}
}

type AnalyzeReq struct {
	Tp AnalyzeType `protobuf:"varint,1,opt,name=tp,enum=tipb.AnalyzeType" json:"tp"`
	// Deprecated. Start Ts has been moved to coprocessor.Request.
	StartTsFallback *uint64            `protobuf:"varint,2,opt,name=start_ts_fallback,json=startTsFallback" json:"start_ts_fallback,omitempty"`
	Flags           uint64             `protobuf:"varint,3,opt,name=flags" json:"flags"`
	TimeZoneOffset  int64              `protobuf:"varint,4,opt,name=time_zone_offset,json=timeZoneOffset" json:"time_zone_offset"`
	IdxReq          *AnalyzeIndexReq   `protobuf:"bytes,5,opt,name=idx_req,json=idxReq" json:"idx_req,omitempty"`
	ColReq          *AnalyzeColumnsReq `protobuf:"bytes,6,opt,name=col_req,json=colReq" json:"col_req,omitempty"`
}

func (m *AnalyzeReq) Reset()         { *m = AnalyzeReq{} }
func (m *AnalyzeReq) String() string { return proto.CompactTextString(m) }
func (*AnalyzeReq) ProtoMessage()    {}
func (*AnalyzeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c3eb6de5a1604f, []int{0}
}
func (m *AnalyzeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnalyzeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnalyzeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnalyzeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzeReq.Merge(m, src)
}
func (m *AnalyzeReq) XXX_Size() int {
	return m.Size()
}
func (m *AnalyzeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzeReq.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzeReq proto.InternalMessageInfo

func (m *AnalyzeReq) GetTp() AnalyzeType {
	if m != nil {
		return m.Tp
	}
	return AnalyzeType_TypeIndex
}

func (m *AnalyzeReq) GetStartTsFallback() uint64 {
	if m != nil && m.StartTsFallback != nil {
		return *m.StartTsFallback
	}
	return 0
}

func (m *AnalyzeReq) GetFlags() uint64 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *AnalyzeReq) GetTimeZoneOffset() int64 {
	if m != nil {
		return m.TimeZoneOffset
	}
	return 0
}

func (m *AnalyzeReq) GetIdxReq() *AnalyzeIndexReq {
	if m != nil {
		return m.IdxReq
	}
	return nil
}

func (m *AnalyzeReq) GetColReq() *AnalyzeColumnsReq {
	if m != nil {
		return m.ColReq
	}
	return nil
}

type AnalyzeIndexReq struct {
	// bucket_size is the max histograms bucket size.
	BucketSize int64 `protobuf:"varint,1,opt,name=bucket_size,json=bucketSize" json:"bucket_size"`
	// num_columns is the number of columns in the index.
	NumColumns    int32  `protobuf:"varint,2,opt,name=num_columns,json=numColumns" json:"num_columns"`
	CmsketchDepth *int32 `protobuf:"varint,3,opt,name=cmsketch_depth,json=cmsketchDepth" json:"cmsketch_depth,omitempty"`
	CmsketchWidth *int32 `protobuf:"varint,4,opt,name=cmsketch_width,json=cmsketchWidth" json:"cmsketch_width,omitempty"`
	SampleSize    int64  `protobuf:"varint,5,opt,name=sample_size,json=sampleSize" json:"sample_size"`
	SketchSize    int64  `protobuf:"varint,6,opt,name=sketch_size,json=sketchSize" json:"sketch_size"`
	TopNSize      *int32 `protobuf:"varint,7,opt,name=top_n_size,json=topNSize" json:"top_n_size,omitempty"`
	Version       *int32 `protobuf:"varint,8,opt,name=version" json:"version,omitempty"`
}

func (m *AnalyzeIndexReq) Reset()         { *m = AnalyzeIndexReq{} }
func (m *AnalyzeIndexReq) String() string { return proto.CompactTextString(m) }
func (*AnalyzeIndexReq) ProtoMessage()    {}
func (*AnalyzeIndexReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c3eb6de5a1604f, []int{1}
}
func (m *AnalyzeIndexReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnalyzeIndexReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnalyzeIndexReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnalyzeIndexReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzeIndexReq.Merge(m, src)
}
func (m *AnalyzeIndexReq) XXX_Size() int {
	return m.Size()
}
func (m *AnalyzeIndexReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzeIndexReq.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzeIndexReq proto.InternalMessageInfo

func (m *AnalyzeIndexReq) GetBucketSize() int64 {
	if m != nil {
		return m.BucketSize
	}
	return 0
}

func (m *AnalyzeIndexReq) GetNumColumns() int32 {
	if m != nil {
		return m.NumColumns
	}
	return 0
}

func (m *AnalyzeIndexReq) GetCmsketchDepth() int32 {
	if m != nil && m.CmsketchDepth != nil {
		return *m.CmsketchDepth
	}
	return 0
}

func (m *AnalyzeIndexReq) GetCmsketchWidth() int32 {
	if m != nil && m.CmsketchWidth != nil {
		return *m.CmsketchWidth
	}
	return 0
}

func (m *AnalyzeIndexReq) GetSampleSize() int64 {
	if m != nil {
		return m.SampleSize
	}
	return 0
}

func (m *AnalyzeIndexReq) GetSketchSize() int64 {
	if m != nil {
		return m.SketchSize
	}
	return 0
}

func (m *AnalyzeIndexReq) GetTopNSize() int32 {
	if m != nil && m.TopNSize != nil {
		return *m.TopNSize
	}
	return 0
}

func (m *AnalyzeIndexReq) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

type AnalyzeColumnsReq struct {
	// bucket_size is the max histograms bucket size, we need this because when primary key is handle,
	// the histogram will be directly built.
	BucketSize int64 `protobuf:"varint,1,opt,name=bucket_size,json=bucketSize" json:"bucket_size"`
	// sample_size is the max number of samples that will be collected.
	SampleSize int64 `protobuf:"varint,2,opt,name=sample_size,json=sampleSize" json:"sample_size"`
	// sketch_size is the max sketch size.
	SketchSize int64 `protobuf:"varint,3,opt,name=sketch_size,json=sketchSize" json:"sketch_size"`
	// columns_info is the info of all the columns that needs to be analyzed.
	ColumnsInfo            []*ColumnInfo         `protobuf:"bytes,4,rep,name=columns_info,json=columnsInfo" json:"columns_info,omitempty"`
	CmsketchDepth          *int32                `protobuf:"varint,5,opt,name=cmsketch_depth,json=cmsketchDepth" json:"cmsketch_depth,omitempty"`
	CmsketchWidth          *int32                `protobuf:"varint,6,opt,name=cmsketch_width,json=cmsketchWidth" json:"cmsketch_width,omitempty"`
	PrimaryColumnIds       []int64               `protobuf:"varint,7,rep,name=primary_column_ids,json=primaryColumnIds" json:"primary_column_ids,omitempty"`
	Version                *int32                `protobuf:"varint,8,opt,name=version" json:"version,omitempty"`
	PrimaryPrefixColumnIds []int64               `protobuf:"varint,9,rep,name=primary_prefix_column_ids,json=primaryPrefixColumnIds" json:"primary_prefix_column_ids,omitempty"`
	ColumnGroups           []*AnalyzeColumnGroup `protobuf:"bytes,10,rep,name=column_groups,json=columnGroups" json:"column_groups,omitempty"`
	// sample_rate is the sampling rate that how many samples will collected.
	// There must be one non-zero value in sample_rate and sample_size.
	SampleRate *float64 `protobuf:"fixed64,11,opt,name=sample_rate,json=sampleRate" json:"sample_rate,omitempty"`
}

func (m *AnalyzeColumnsReq) Reset()         { *m = AnalyzeColumnsReq{} }
func (m *AnalyzeColumnsReq) String() string { return proto.CompactTextString(m) }
func (*AnalyzeColumnsReq) ProtoMessage()    {}
func (*AnalyzeColumnsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c3eb6de5a1604f, []int{2}
}
func (m *AnalyzeColumnsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnalyzeColumnsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnalyzeColumnsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnalyzeColumnsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzeColumnsReq.Merge(m, src)
}
func (m *AnalyzeColumnsReq) XXX_Size() int {
	return m.Size()
}
func (m *AnalyzeColumnsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzeColumnsReq.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzeColumnsReq proto.InternalMessageInfo

func (m *AnalyzeColumnsReq) GetBucketSize() int64 {
	if m != nil {
		return m.BucketSize
	}
	return 0
}

func (m *AnalyzeColumnsReq) GetSampleSize() int64 {
	if m != nil {
		return m.SampleSize
	}
	return 0
}

func (m *AnalyzeColumnsReq) GetSketchSize() int64 {
	if m != nil {
		return m.SketchSize
	}
	return 0
}

func (m *AnalyzeColumnsReq) GetColumnsInfo() []*ColumnInfo {
	if m != nil {
		return m.ColumnsInfo
	}
	return nil
}

func (m *AnalyzeColumnsReq) GetCmsketchDepth() int32 {
	if m != nil && m.CmsketchDepth != nil {
		return *m.CmsketchDepth
	}
	return 0
}

func (m *AnalyzeColumnsReq) GetCmsketchWidth() int32 {
	if m != nil && m.CmsketchWidth != nil {
		return *m.CmsketchWidth
	}
	return 0
}

func (m *AnalyzeColumnsReq) GetPrimaryColumnIds() []int64 {
	if m != nil {
		return m.PrimaryColumnIds
	}
	return nil
}

func (m *AnalyzeColumnsReq) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *AnalyzeColumnsReq) GetPrimaryPrefixColumnIds() []int64 {
	if m != nil {
		return m.PrimaryPrefixColumnIds
	}
	return nil
}

func (m *AnalyzeColumnsReq) GetColumnGroups() []*AnalyzeColumnGroup {
	if m != nil {
		return m.ColumnGroups
	}
	return nil
}

func (m *AnalyzeColumnsReq) GetSampleRate() float64 {
	if m != nil && m.SampleRate != nil {
		return *m.SampleRate
	}
	return 0
}

type AnalyzeMixedResp struct {
	ColumnsResp *AnalyzeColumnsResp `protobuf:"bytes,1,opt,name=columns_resp,json=columnsResp" json:"columns_resp,omitempty"`
	IndexResp   *AnalyzeIndexResp   `protobuf:"bytes,2,opt,name=index_resp,json=indexResp" json:"index_resp,omitempty"`
}

func (m *AnalyzeMixedResp) Reset()         { *m = AnalyzeMixedResp{} }
func (m *AnalyzeMixedResp) String() string { return proto.CompactTextString(m) }
func (*AnalyzeMixedResp) ProtoMessage()    {}
func (*AnalyzeMixedResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c3eb6de5a1604f, []int{3}
}
func (m *AnalyzeMixedResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnalyzeMixedResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnalyzeMixedResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnalyzeMixedResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzeMixedResp.Merge(m, src)
}
func (m *AnalyzeMixedResp) XXX_Size() int {
	return m.Size()
}
func (m *AnalyzeMixedResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzeMixedResp.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzeMixedResp proto.InternalMessageInfo

func (m *AnalyzeMixedResp) GetColumnsResp() *AnalyzeColumnsResp {
	if m != nil {
		return m.ColumnsResp
	}
	return nil
}

func (m *AnalyzeMixedResp) GetIndexResp() *AnalyzeIndexResp {
	if m != nil {
		return m.IndexResp
	}
	return nil
}

type AnalyzeColumnGroup struct {
	ColumnOffsets []int64 `protobuf:"varint,1,rep,name=column_offsets,json=columnOffsets" json:"column_offsets,omitempty"`
	PrefixLengths []int64 `protobuf:"varint,2,rep,name=prefix_lengths,json=prefixLengths" json:"prefix_lengths,omitempty"`
}

func (m *AnalyzeColumnGroup) Reset()         { *m = AnalyzeColumnGroup{} }
func (m *AnalyzeColumnGroup) String() string { return proto.CompactTextString(m) }
func (*AnalyzeColumnGroup) ProtoMessage()    {}
func (*AnalyzeColumnGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c3eb6de5a1604f, []int{4}
}
func (m *AnalyzeColumnGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnalyzeColumnGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnalyzeColumnGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnalyzeColumnGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzeColumnGroup.Merge(m, src)
}
func (m *AnalyzeColumnGroup) XXX_Size() int {
	return m.Size()
}
func (m *AnalyzeColumnGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzeColumnGroup.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzeColumnGroup proto.InternalMessageInfo

func (m *AnalyzeColumnGroup) GetColumnOffsets() []int64 {
	if m != nil {
		return m.ColumnOffsets
	}
	return nil
}

func (m *AnalyzeColumnGroup) GetPrefixLengths() []int64 {
	if m != nil {
		return m.PrefixLengths
	}
	return nil
}

type AnalyzeColumnsResp struct {
	// collectors is the sample collectors for columns.
	Collectors []*SampleCollector `protobuf:"bytes,1,rep,name=collectors" json:"collectors,omitempty"`
	// pk_hist is the histogram for primary key when it is the handle.
	PkHist       *Histogram          `protobuf:"bytes,2,opt,name=pk_hist,json=pkHist" json:"pk_hist,omitempty"`
	RowCollector *RowSampleCollector `protobuf:"bytes,3,opt,name=row_collector,json=rowCollector" json:"row_collector,omitempty"`
}

func (m *AnalyzeColumnsResp) Reset()         { *m = AnalyzeColumnsResp{} }
func (m *AnalyzeColumnsResp) String() string { return proto.CompactTextString(m) }
func (*AnalyzeColumnsResp) ProtoMessage()    {}
func (*AnalyzeColumnsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c3eb6de5a1604f, []int{5}
}
func (m *AnalyzeColumnsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnalyzeColumnsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnalyzeColumnsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnalyzeColumnsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzeColumnsResp.Merge(m, src)
}
func (m *AnalyzeColumnsResp) XXX_Size() int {
	return m.Size()
}
func (m *AnalyzeColumnsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzeColumnsResp.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzeColumnsResp proto.InternalMessageInfo

func (m *AnalyzeColumnsResp) GetCollectors() []*SampleCollector {
	if m != nil {
		return m.Collectors
	}
	return nil
}

func (m *AnalyzeColumnsResp) GetPkHist() *Histogram {
	if m != nil {
		return m.PkHist
	}
	return nil
}

func (m *AnalyzeColumnsResp) GetRowCollector() *RowSampleCollector {
	if m != nil {
		return m.RowCollector
	}
	return nil
}

type AnalyzeIndexResp struct {
	Hist      *Histogram       `protobuf:"bytes,1,opt,name=hist" json:"hist,omitempty"`
	Cms       *CMSketch        `protobuf:"bytes,2,opt,name=cms" json:"cms,omitempty"`
	Collector *SampleCollector `protobuf:"bytes,3,opt,name=collector" json:"collector,omitempty"`
}

func (m *AnalyzeIndexResp) Reset()         { *m = AnalyzeIndexResp{} }
func (m *AnalyzeIndexResp) String() string { return proto.CompactTextString(m) }
func (*AnalyzeIndexResp) ProtoMessage()    {}
func (*AnalyzeIndexResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c3eb6de5a1604f, []int{6}
}
func (m *AnalyzeIndexResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnalyzeIndexResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnalyzeIndexResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnalyzeIndexResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzeIndexResp.Merge(m, src)
}
func (m *AnalyzeIndexResp) XXX_Size() int {
	return m.Size()
}
func (m *AnalyzeIndexResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzeIndexResp.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzeIndexResp proto.InternalMessageInfo

func (m *AnalyzeIndexResp) GetHist() *Histogram {
	if m != nil {
		return m.Hist
	}
	return nil
}

func (m *AnalyzeIndexResp) GetCms() *CMSketch {
	if m != nil {
		return m.Cms
	}
	return nil
}

func (m *AnalyzeIndexResp) GetCollector() *SampleCollector {
	if m != nil {
		return m.Collector
	}
	return nil
}

// Bucket is an element of histogram.
type Bucket struct {
	Count      int64  `protobuf:"varint,1,opt,name=count" json:"count"`
	LowerBound []byte `protobuf:"bytes,2,opt,name=lower_bound,json=lowerBound" json:"lower_bound,omitempty"`
	UpperBound []byte `protobuf:"bytes,3,opt,name=upper_bound,json=upperBound" json:"upper_bound,omitempty"`
	Repeats    int64  `protobuf:"varint,4,opt,name=repeats" json:"repeats"`
	Ndv        *int64 `protobuf:"varint,5,opt,name=ndv" json:"ndv,omitempty"`
}

func (m *Bucket) Reset()         { *m = Bucket{} }
func (m *Bucket) String() string { return proto.CompactTextString(m) }
func (*Bucket) ProtoMessage()    {}
func (*Bucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c3eb6de5a1604f, []int{7}
}
func (m *Bucket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bucket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bucket.Merge(m, src)
}
func (m *Bucket) XXX_Size() int {
	return m.Size()
}
func (m *Bucket) XXX_DiscardUnknown() {
	xxx_messageInfo_Bucket.DiscardUnknown(m)
}

var xxx_messageInfo_Bucket proto.InternalMessageInfo

func (m *Bucket) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Bucket) GetLowerBound() []byte {
	if m != nil {
		return m.LowerBound
	}
	return nil
}

func (m *Bucket) GetUpperBound() []byte {
	if m != nil {
		return m.UpperBound
	}
	return nil
}

func (m *Bucket) GetRepeats() int64 {
	if m != nil {
		return m.Repeats
	}
	return 0
}

func (m *Bucket) GetNdv() int64 {
	if m != nil && m.Ndv != nil {
		return *m.Ndv
	}
	return 0
}

type Histogram struct {
	// ndv is the number of distinct values.
	Ndv int64 `protobuf:"varint,1,opt,name=ndv" json:"ndv"`
	// buckets represents all the buckets.
	Buckets []*Bucket `protobuf:"bytes,2,rep,name=buckets" json:"buckets,omitempty"`
}

func (m *Histogram) Reset()         { *m = Histogram{} }
func (m *Histogram) String() string { return proto.CompactTextString(m) }
func (*Histogram) ProtoMessage()    {}
func (*Histogram) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c3eb6de5a1604f, []int{8}
}
func (m *Histogram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Histogram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Histogram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Histogram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Histogram.Merge(m, src)
}
func (m *Histogram) XXX_Size() int {
	return m.Size()
}
func (m *Histogram) XXX_DiscardUnknown() {
	xxx_messageInfo_Histogram.DiscardUnknown(m)
}

var xxx_messageInfo_Histogram proto.InternalMessageInfo

func (m *Histogram) GetNdv() int64 {
	if m != nil {
		return m.Ndv
	}
	return 0
}

func (m *Histogram) GetBuckets() []*Bucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

// FMSketch is used to count distinct values for columns.
type FMSketch struct {
	Mask    uint64   `protobuf:"varint,1,opt,name=mask" json:"mask"`
	Hashset []uint64 `protobuf:"varint,2,rep,name=hashset" json:"hashset,omitempty"`
}

func (m *FMSketch) Reset()         { *m = FMSketch{} }
func (m *FMSketch) String() string { return proto.CompactTextString(m) }
func (*FMSketch) ProtoMessage()    {}
func (*FMSketch) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c3eb6de5a1604f, []int{9}
}
func (m *FMSketch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FMSketch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FMSketch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FMSketch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FMSketch.Merge(m, src)
}
func (m *FMSketch) XXX_Size() int {
	return m.Size()
}
func (m *FMSketch) XXX_DiscardUnknown() {
	xxx_messageInfo_FMSketch.DiscardUnknown(m)
}

var xxx_messageInfo_FMSketch proto.InternalMessageInfo

func (m *FMSketch) GetMask() uint64 {
	if m != nil {
		return m.Mask
	}
	return 0
}

func (m *FMSketch) GetHashset() []uint64 {
	if m != nil {
		return m.Hashset
	}
	return nil
}

// SampleCollector is used for collect samples and calculate the count and ndv of an column.
type SampleCollector struct {
	Samples   [][]byte  `protobuf:"bytes,1,rep,name=samples" json:"samples,omitempty"`
	NullCount int64     `protobuf:"varint,2,opt,name=null_count,json=nullCount" json:"null_count"`
	Count     int64     `protobuf:"varint,3,opt,name=count" json:"count"`
	FmSketch  *FMSketch `protobuf:"bytes,4,opt,name=fm_sketch,json=fmSketch" json:"fm_sketch,omitempty"`
	CmSketch  *CMSketch `protobuf:"bytes,5,opt,name=cm_sketch,json=cmSketch" json:"cm_sketch,omitempty"`
	TotalSize *int64    `protobuf:"varint,6,opt,name=total_size,json=totalSize" json:"total_size,omitempty"`
}

func (m *SampleCollector) Reset()         { *m = SampleCollector{} }
func (m *SampleCollector) String() string { return proto.CompactTextString(m) }
func (*SampleCollector) ProtoMessage()    {}
func (*SampleCollector) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c3eb6de5a1604f, []int{10}
}
func (m *SampleCollector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SampleCollector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SampleCollector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SampleCollector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SampleCollector.Merge(m, src)
}
func (m *SampleCollector) XXX_Size() int {
	return m.Size()
}
func (m *SampleCollector) XXX_DiscardUnknown() {
	xxx_messageInfo_SampleCollector.DiscardUnknown(m)
}

var xxx_messageInfo_SampleCollector proto.InternalMessageInfo

func (m *SampleCollector) GetSamples() [][]byte {
	if m != nil {
		return m.Samples
	}
	return nil
}

func (m *SampleCollector) GetNullCount() int64 {
	if m != nil {
		return m.NullCount
	}
	return 0
}

func (m *SampleCollector) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SampleCollector) GetFmSketch() *FMSketch {
	if m != nil {
		return m.FmSketch
	}
	return nil
}

func (m *SampleCollector) GetCmSketch() *CMSketch {
	if m != nil {
		return m.CmSketch
	}
	return nil
}

func (m *SampleCollector) GetTotalSize() int64 {
	if m != nil && m.TotalSize != nil {
		return *m.TotalSize
	}
	return 0
}

type RowSampleCollector struct {
	Samples    []*RowSample `protobuf:"bytes,1,rep,name=samples" json:"samples,omitempty"`
	NullCounts []int64      `protobuf:"varint,2,rep,name=null_counts,json=nullCounts" json:"null_counts,omitempty"`
	Count      int64        `protobuf:"varint,3,opt,name=count" json:"count"`
	FmSketch   []*FMSketch  `protobuf:"bytes,4,rep,name=fm_sketch,json=fmSketch" json:"fm_sketch,omitempty"`
	TotalSize  []int64      `protobuf:"varint,5,rep,name=total_size,json=totalSize" json:"total_size,omitempty"`
}

func (m *RowSampleCollector) Reset()         { *m = RowSampleCollector{} }
func (m *RowSampleCollector) String() string { return proto.CompactTextString(m) }
func (*RowSampleCollector) ProtoMessage()    {}
func (*RowSampleCollector) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c3eb6de5a1604f, []int{11}
}
func (m *RowSampleCollector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RowSampleCollector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RowSampleCollector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RowSampleCollector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowSampleCollector.Merge(m, src)
}
func (m *RowSampleCollector) XXX_Size() int {
	return m.Size()
}
func (m *RowSampleCollector) XXX_DiscardUnknown() {
	xxx_messageInfo_RowSampleCollector.DiscardUnknown(m)
}

var xxx_messageInfo_RowSampleCollector proto.InternalMessageInfo

func (m *RowSampleCollector) GetSamples() []*RowSample {
	if m != nil {
		return m.Samples
	}
	return nil
}

func (m *RowSampleCollector) GetNullCounts() []int64 {
	if m != nil {
		return m.NullCounts
	}
	return nil
}

func (m *RowSampleCollector) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *RowSampleCollector) GetFmSketch() []*FMSketch {
	if m != nil {
		return m.FmSketch
	}
	return nil
}

func (m *RowSampleCollector) GetTotalSize() []int64 {
	if m != nil {
		return m.TotalSize
	}
	return nil
}

type RowSample struct {
	Row    [][]byte `protobuf:"bytes,1,rep,name=row" json:"row,omitempty"`
	Weight int64    `protobuf:"varint,2,opt,name=weight" json:"weight"`
}

func (m *RowSample) Reset()         { *m = RowSample{} }
func (m *RowSample) String() string { return proto.CompactTextString(m) }
func (*RowSample) ProtoMessage()    {}
func (*RowSample) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c3eb6de5a1604f, []int{12}
}
func (m *RowSample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RowSample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RowSample.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RowSample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowSample.Merge(m, src)
}
func (m *RowSample) XXX_Size() int {
	return m.Size()
}
func (m *RowSample) XXX_DiscardUnknown() {
	xxx_messageInfo_RowSample.DiscardUnknown(m)
}

var xxx_messageInfo_RowSample proto.InternalMessageInfo

func (m *RowSample) GetRow() [][]byte {
	if m != nil {
		return m.Row
	}
	return nil
}

func (m *RowSample) GetWeight() int64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type CMSketchRow struct {
	Counters []uint32 `protobuf:"varint,1,rep,name=counters" json:"counters,omitempty"`
}

func (m *CMSketchRow) Reset()         { *m = CMSketchRow{} }
func (m *CMSketchRow) String() string { return proto.CompactTextString(m) }
func (*CMSketchRow) ProtoMessage()    {}
func (*CMSketchRow) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c3eb6de5a1604f, []int{13}
}
func (m *CMSketchRow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMSketchRow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMSketchRow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMSketchRow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMSketchRow.Merge(m, src)
}
func (m *CMSketchRow) XXX_Size() int {
	return m.Size()
}
func (m *CMSketchRow) XXX_DiscardUnknown() {
	xxx_messageInfo_CMSketchRow.DiscardUnknown(m)
}

var xxx_messageInfo_CMSketchRow proto.InternalMessageInfo

func (m *CMSketchRow) GetCounters() []uint32 {
	if m != nil {
		return m.Counters
	}
	return nil
}

type CMSketchTopN struct {
	Data  []byte `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Count uint64 `protobuf:"varint,2,opt,name=count" json:"count"`
}

func (m *CMSketchTopN) Reset()         { *m = CMSketchTopN{} }
func (m *CMSketchTopN) String() string { return proto.CompactTextString(m) }
func (*CMSketchTopN) ProtoMessage()    {}
func (*CMSketchTopN) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c3eb6de5a1604f, []int{14}
}
func (m *CMSketchTopN) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMSketchTopN) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMSketchTopN.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMSketchTopN) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMSketchTopN.Merge(m, src)
}
func (m *CMSketchTopN) XXX_Size() int {
	return m.Size()
}
func (m *CMSketchTopN) XXX_DiscardUnknown() {
	xxx_messageInfo_CMSketchTopN.DiscardUnknown(m)
}

var xxx_messageInfo_CMSketchTopN proto.InternalMessageInfo

func (m *CMSketchTopN) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CMSketchTopN) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type CMSketch struct {
	Rows         []*CMSketchRow  `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
	TopN         []*CMSketchTopN `protobuf:"bytes,2,rep,name=top_n,json=topN" json:"top_n,omitempty"`
	DefaultValue uint64          `protobuf:"varint,3,opt,name=default_value,json=defaultValue" json:"default_value"`
}

func (m *CMSketch) Reset()         { *m = CMSketch{} }
func (m *CMSketch) String() string { return proto.CompactTextString(m) }
func (*CMSketch) ProtoMessage()    {}
func (*CMSketch) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c3eb6de5a1604f, []int{15}
}
func (m *CMSketch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMSketch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMSketch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMSketch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMSketch.Merge(m, src)
}
func (m *CMSketch) XXX_Size() int {
	return m.Size()
}
func (m *CMSketch) XXX_DiscardUnknown() {
	xxx_messageInfo_CMSketch.DiscardUnknown(m)
}

var xxx_messageInfo_CMSketch proto.InternalMessageInfo

func (m *CMSketch) GetRows() []*CMSketchRow {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *CMSketch) GetTopN() []*CMSketchTopN {
	if m != nil {
		return m.TopN
	}
	return nil
}

func (m *CMSketch) GetDefaultValue() uint64 {
	if m != nil {
		return m.DefaultValue
	}
	return 0
}

func init() {
	proto.RegisterEnum("tipb.AnalyzeType", AnalyzeType_name, AnalyzeType_value)
	proto.RegisterType((*AnalyzeReq)(nil), "tipb.AnalyzeReq")
	proto.RegisterType((*AnalyzeIndexReq)(nil), "tipb.AnalyzeIndexReq")
	proto.RegisterType((*AnalyzeColumnsReq)(nil), "tipb.AnalyzeColumnsReq")
	proto.RegisterType((*AnalyzeMixedResp)(nil), "tipb.AnalyzeMixedResp")
	proto.RegisterType((*AnalyzeColumnGroup)(nil), "tipb.AnalyzeColumnGroup")
	proto.RegisterType((*AnalyzeColumnsResp)(nil), "tipb.AnalyzeColumnsResp")
	proto.RegisterType((*AnalyzeIndexResp)(nil), "tipb.AnalyzeIndexResp")
	proto.RegisterType((*Bucket)(nil), "tipb.Bucket")
	proto.RegisterType((*Histogram)(nil), "tipb.Histogram")
	proto.RegisterType((*FMSketch)(nil), "tipb.FMSketch")
	proto.RegisterType((*SampleCollector)(nil), "tipb.SampleCollector")
	proto.RegisterType((*RowSampleCollector)(nil), "tipb.RowSampleCollector")
	proto.RegisterType((*RowSample)(nil), "tipb.RowSample")
	proto.RegisterType((*CMSketchRow)(nil), "tipb.CMSketchRow")
	proto.RegisterType((*CMSketchTopN)(nil), "tipb.CMSketchTopN")
	proto.RegisterType((*CMSketch)(nil), "tipb.CMSketch")
}

func init() { proto.RegisterFile("analyze.proto", fileDescriptor_76c3eb6de5a1604f) }

var fileDescriptor_76c3eb6de5a1604f = []byte{
	// 1272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcf, 0x6e, 0xdb, 0x46,
	0x13, 0x37, 0xf5, 0x5f, 0x23, 0xd9, 0x96, 0xf7, 0x4b, 0xf2, 0xb1, 0x46, 0xaa, 0x08, 0x0c, 0xd2,
	0x28, 0x49, 0xa1, 0x16, 0x0e, 0x7a, 0x08, 0x82, 0x06, 0xa8, 0x53, 0xa4, 0x09, 0xda, 0xa4, 0xc1,
	0x26, 0x68, 0x81, 0x5e, 0x08, 0x9a, 0x5c, 0x49, 0x84, 0x49, 0x2e, 0xcd, 0x5d, 0x46, 0x8e, 0xd1,
	0x6b, 0x7b, 0x6c, 0x7b, 0xcc, 0x23, 0xf4, 0xde, 0x3e, 0x44, 0x4e, 0x45, 0x8e, 0x39, 0x15, 0x45,
	0x8c, 0x5e, 0xfb, 0x0c, 0xc5, 0xce, 0x2e, 0x29, 0xc9, 0x96, 0x8b, 0xe4, 0xc4, 0x9d, 0x99, 0xdf,
	0xce, 0xce, 0xfc, 0x66, 0x76, 0x96, 0xb0, 0xee, 0x25, 0x5e, 0xf4, 0xfc, 0x88, 0x8d, 0xd2, 0x8c,
	0x4b, 0x4e, 0x6a, 0x32, 0x4c, 0xf7, 0xb6, 0xbb, 0xc2, 0x9f, 0xb2, 0xd8, 0xd3, 0xba, 0xed, 0x73,
	0x13, 0x3e, 0xe1, 0xb8, 0xfc, 0x48, 0xad, 0x8c, 0x76, 0x33, 0xcb, 0x85, 0xc4, 0xa5, 0x56, 0x38,
	0x3f, 0x57, 0x00, 0x3e, 0xd3, 0xce, 0x28, 0x3b, 0x20, 0x57, 0xa1, 0x22, 0x53, 0xdb, 0x1a, 0x58,
	0xc3, 0x8d, 0x9d, 0xad, 0x91, 0x72, 0x3b, 0x32, 0xd6, 0xa7, 0xcf, 0x53, 0xb6, 0x5b, 0x7b, 0xf9,
	0xe7, 0xa5, 0x35, 0x5a, 0x91, 0x29, 0xb9, 0x0e, 0x5b, 0x42, 0x7a, 0x99, 0x74, 0xa5, 0x70, 0xc7,
	0x5e, 0x14, 0xed, 0x79, 0xfe, 0xbe, 0x5d, 0x19, 0x58, 0xc3, 0x1a, 0xdd, 0x44, 0xc3, 0x53, 0x71,
	0xcf, 0xa8, 0xc9, 0x36, 0xd4, 0xc7, 0x91, 0x37, 0x11, 0x76, 0x55, 0xd9, 0x8d, 0x13, 0xad, 0x22,
	0x23, 0xe8, 0xc9, 0x30, 0x66, 0xee, 0x11, 0x4f, 0x98, 0xcb, 0xc7, 0x63, 0xc1, 0xa4, 0x5d, 0x1b,
	0x58, 0xc3, 0xaa, 0x81, 0x6d, 0x28, 0xeb, 0x77, 0x3c, 0x61, 0x5f, 0xa3, 0x8d, 0x8c, 0xa0, 0x19,
	0x06, 0x87, 0x6e, 0xc6, 0x0e, 0xec, 0xfa, 0xc0, 0x1a, 0x76, 0x76, 0xce, 0x2f, 0x45, 0xf9, 0x20,
	0x09, 0xd8, 0x21, 0x65, 0x07, 0xb4, 0x11, 0x06, 0xea, 0x4b, 0x3e, 0x86, 0xa6, 0xcf, 0x23, 0xc4,
	0x37, 0x10, 0xff, 0xff, 0x25, 0xfc, 0x5d, 0x1e, 0xe5, 0x71, 0x22, 0x70, 0x87, 0xcf, 0x23, 0xca,
	0x0e, 0x9c, 0xdf, 0x2a, 0xb0, 0x79, 0xc2, 0x1b, 0xb9, 0x02, 0x9d, 0xbd, 0xdc, 0xdf, 0x67, 0xd2,
	0x15, 0xe1, 0x11, 0x43, 0x7e, 0x8a, 0x00, 0x41, 0x1b, 0x9e, 0x84, 0x47, 0x4c, 0xc1, 0x92, 0x3c,
	0x76, 0x7d, 0xed, 0x14, 0xe9, 0xa8, 0x17, 0xb0, 0x24, 0x8f, 0xcd, 0x61, 0xe4, 0x0a, 0x6c, 0xf8,
	0xb1, 0xd8, 0x67, 0xd2, 0x9f, 0xba, 0x01, 0x4b, 0xe5, 0x14, 0x89, 0xa9, 0xd3, 0xf5, 0x42, 0xfb,
	0xb9, 0x52, 0x2e, 0xc1, 0x66, 0x61, 0x20, 0xa7, 0x48, 0xcc, 0x02, 0xec, 0x5b, 0xa5, 0x54, 0x87,
	0x0a, 0x2f, 0x4e, 0x23, 0xa6, 0x63, 0xab, 0x2f, 0xc6, 0xa6, 0x0d, 0x45, 0x6c, 0xc6, 0x17, 0xc2,
	0x1a, 0x4b, 0x30, 0x34, 0x20, 0xec, 0x22, 0x80, 0xe4, 0xa9, 0x9b, 0x68, 0x54, 0x13, 0x0f, 0x6c,
	0x49, 0x9e, 0x3e, 0x42, 0xab, 0x0d, 0xcd, 0x67, 0x2c, 0x13, 0x21, 0x4f, 0xec, 0x16, 0x9a, 0x0a,
	0xd1, 0xf9, 0xa7, 0x0a, 0x5b, 0xa7, 0x38, 0x7d, 0x07, 0xde, 0x16, 0x53, 0xa8, 0xbc, 0x5d, 0x0a,
	0xd5, 0x33, 0x52, 0xb8, 0x09, 0x5d, 0x53, 0x01, 0x37, 0x4c, 0xc6, 0xdc, 0xae, 0x0d, 0xaa, 0xc3,
	0xce, 0x4e, 0x4f, 0xd7, 0x5d, 0x07, 0xf7, 0x20, 0x19, 0x73, 0xda, 0x31, 0x28, 0x25, 0xac, 0xa8,
	0x49, 0xfd, 0xed, 0x6a, 0xd2, 0x58, 0x55, 0x93, 0x0f, 0x81, 0xa4, 0x59, 0x18, 0x7b, 0xd9, 0x73,
	0xd3, 0x0c, 0x6e, 0x18, 0x08, 0xbb, 0x39, 0xa8, 0x0e, 0xab, 0xb4, 0x67, 0x2c, 0x26, 0x92, 0x40,
	0x9c, 0xcd, 0x2a, 0xb9, 0x05, 0xef, 0x15, 0x7e, 0xd2, 0x8c, 0x8d, 0xc3, 0xc3, 0x45, 0x77, 0x6d,
	0x74, 0x77, 0xc1, 0x00, 0x1e, 0xa3, 0x7d, 0xee, 0xf4, 0x53, 0x58, 0x37, 0xd8, 0x49, 0xc6, 0xf3,
	0x54, 0xd8, 0x80, 0x34, 0xd8, 0x2b, 0xda, 0xff, 0x0b, 0x05, 0xa0, 0x86, 0x34, 0x14, 0x04, 0xb9,
	0x54, 0x96, 0x24, 0xf3, 0x24, 0xb3, 0x3b, 0x03, 0x6b, 0x68, 0x15, 0xc5, 0xa0, 0x9e, 0x64, 0xce,
	0x8f, 0x16, 0xf4, 0x8c, 0x97, 0x87, 0xe1, 0x21, 0x0b, 0x28, 0x13, 0x29, 0xb9, 0x3d, 0xa7, 0x3e,
	0x63, 0x42, 0x0f, 0x92, 0xd5, 0x67, 0x0a, 0x85, 0x2f, 0x4b, 0x80, 0x9b, 0x3f, 0x01, 0x08, 0xd5,
	0x85, 0xd3, 0x5b, 0x2b, 0xb8, 0xf5, 0xc2, 0xaa, 0xdb, 0x2d, 0x52, 0xda, 0x0e, 0x8b, 0xa5, 0xb3,
	0x07, 0xe4, 0x74, 0x36, 0x58, 0x28, 0x9d, 0xbe, 0x1e, 0x2a, 0xc2, 0xb6, 0x90, 0x2e, 0x43, 0x8a,
	0x9e, 0x26, 0x78, 0x15, 0x0d, 0xb1, 0x11, 0x4b, 0x26, 0x72, 0xaa, 0x2e, 0x2d, 0xc2, 0xb4, 0xf6,
	0x2b, 0xad, 0x74, 0x7e, 0xb7, 0x4e, 0x1c, 0x52, 0x46, 0xec, 0xf3, 0x28, 0x62, 0xbe, 0xe4, 0x99,
	0x3e, 0xa0, 0x9c, 0x47, 0x4f, 0x90, 0xa9, 0xbb, 0x85, 0x95, 0x2e, 0x00, 0xc9, 0x10, 0x9a, 0xe9,
	0xbe, 0x3b, 0x0d, 0x85, 0x34, 0x59, 0x6e, 0xea, 0x3d, 0xf7, 0x43, 0x21, 0xf9, 0x24, 0xf3, 0x62,
	0xda, 0x48, 0xf7, 0x95, 0xa0, 0x8a, 0x98, 0xf1, 0x99, 0x5b, 0xee, 0xc5, 0x9e, 0x2f, 0x09, 0xa5,
	0x7c, 0x76, 0xf2, 0x98, 0x6e, 0xc6, 0x67, 0xa5, 0xe4, 0xfc, 0x34, 0xaf, 0x51, 0x49, 0x1d, 0xb9,
	0x0c, 0x35, 0x3c, 0xda, 0x5a, 0x7d, 0x34, 0x1a, 0xc9, 0x00, 0xaa, 0x7e, 0x2c, 0x4c, 0x78, 0x1b,
	0xe6, 0xea, 0x3c, 0x7c, 0x82, 0x2d, 0x4e, 0x95, 0x89, 0xdc, 0x84, 0xf6, 0xc9, 0xb0, 0xce, 0x48,
	0x7d, 0x8e, 0x73, 0x5e, 0x58, 0xd0, 0xd8, 0xc5, 0x7b, 0xaf, 0x1e, 0x05, 0x9f, 0xe7, 0x89, 0x5c,
	0x1a, 0x0a, 0x5a, 0xa5, 0x9a, 0x2f, 0xe2, 0x33, 0x96, 0xb9, 0x7b, 0x3c, 0x4f, 0x02, 0x8c, 0xa2,
	0x4b, 0x01, 0x55, 0xbb, 0x4a, 0xa3, 0x00, 0x79, 0x9a, 0x96, 0x80, 0xaa, 0x06, 0xa0, 0x4a, 0x03,
	0xfa, 0xd0, 0xcc, 0x58, 0xca, 0x3c, 0x29, 0x96, 0x5e, 0x93, 0x42, 0x49, 0x7a, 0x50, 0x4d, 0x82,
	0x67, 0x7a, 0x58, 0x52, 0xb5, 0x74, 0xbe, 0x84, 0x76, 0x49, 0x02, 0xb9, 0xa0, 0xcd, 0x8b, 0xa1,
	0x29, 0x05, 0xf9, 0x00, 0x9a, 0x7a, 0x6c, 0xe9, 0x3e, 0xe9, 0xec, 0x74, 0x75, 0xca, 0x3a, 0x27,
	0x5a, 0x18, 0x9d, 0x3b, 0xd0, 0xba, 0x67, 0xd8, 0x22, 0x36, 0xd4, 0x62, 0x4f, 0xec, 0xa3, 0xb3,
	0xe2, 0xf1, 0x43, 0x8d, 0xba, 0xf7, 0x53, 0x4f, 0x4c, 0xd5, 0x93, 0xa7, 0xbc, 0xd5, 0x68, 0x21,
	0x3a, 0x7f, 0x5b, 0xb0, 0x79, 0x82, 0x46, 0x85, 0xd6, 0xd7, 0x4f, 0x77, 0x5a, 0x97, 0x16, 0x22,
	0xb9, 0x0c, 0x90, 0xe4, 0x51, 0xe4, 0x6a, 0x3e, 0x17, 0xa7, 0x67, 0x5b, 0xe9, 0xef, 0x22, 0xa7,
	0x25, 0xdf, 0xd5, 0xd3, 0x7c, 0xdf, 0x80, 0xf6, 0x38, 0x76, 0xf5, 0x00, 0x43, 0xbe, 0xca, 0x9a,
	0x17, 0x59, 0xd0, 0xd6, 0x38, 0x36, 0xf9, 0xdc, 0x80, 0xb6, 0x5f, 0x82, 0xeb, 0x2b, 0x1b, 0xa4,
	0xe5, 0x17, 0xe0, 0xf7, 0xd5, 0x73, 0x22, 0xbd, 0x68, 0xe1, 0xd1, 0xa1, 0x6d, 0xd4, 0xa8, 0x51,
	0xed, 0xfc, 0x61, 0x01, 0x39, 0xdd, 0xc5, 0xe4, 0xda, 0x72, 0xaa, 0x65, 0x97, 0x96, 0xd0, 0x79,
	0xee, 0xf8, 0xe4, 0x16, 0xb9, 0x9b, 0xdb, 0x3b, 0x7f, 0x72, 0x4d, 0xf2, 0xe2, 0x5d, 0xb2, 0xaf,
	0xfe, 0x67, 0xf6, 0xcb, 0x09, 0xd5, 0x71, 0x58, 0x2c, 0x24, 0x74, 0x1b, 0xda, 0x65, 0x90, 0xaa,
	0xc9, 0x32, 0x3e, 0x33, 0xd5, 0x52, 0x4b, 0x72, 0x11, 0x1a, 0x33, 0x16, 0x4e, 0xa6, 0xcb, 0x55,
	0x32, 0x3a, 0xe7, 0x1a, 0x74, 0x4a, 0x0a, 0xf9, 0x8c, 0x6c, 0x43, 0x0b, 0x03, 0x64, 0x66, 0xb6,
	0xac, 0xd3, 0x52, 0x76, 0xee, 0x40, 0xb7, 0x80, 0x3e, 0xe5, 0xe9, 0x23, 0x42, 0xa0, 0x16, 0x78,
	0xd2, 0xc3, 0x26, 0xeb, 0x52, 0x5c, 0xcf, 0x73, 0xae, 0x2c, 0xfe, 0x76, 0xa1, 0xca, 0xf9, 0xc1,
	0x82, 0x56, 0xe1, 0x80, 0x5c, 0x81, 0x5a, 0xc6, 0x67, 0x05, 0xd7, 0x5b, 0x27, 0x8a, 0xc9, 0x67,
	0x14, 0xcd, 0xe4, 0x2a, 0xd4, 0xf1, 0xd7, 0xc0, 0xb4, 0x3e, 0x59, 0xc6, 0xa9, 0x30, 0x68, 0x4d,
	0xfd, 0x29, 0x90, 0x6b, 0xb0, 0x1e, 0xb0, 0xb1, 0x97, 0x47, 0xd2, 0x7d, 0xe6, 0x45, 0x39, 0x5b,
	0xfa, 0xef, 0xeb, 0x1a, 0xd3, 0x37, 0xca, 0x72, 0xfd, 0x7b, 0xe8, 0x2c, 0xfc, 0x5f, 0x92, 0x75,
	0x68, 0xab, 0x2f, 0x0e, 0xab, 0xde, 0x1a, 0xd9, 0x00, 0x50, 0xa2, 0x1e, 0xb9, 0x3d, 0x8b, 0x9c,
	0x83, 0x9e, 0x96, 0xe3, 0x98, 0x27, 0xf7, 0xbd, 0x24, 0x88, 0x58, 0xaf, 0x42, 0xfe, 0x07, 0x9b,
	0x4a, 0xab, 0x49, 0xd7, 0x5b, 0xab, 0x85, 0x27, 0x7c, 0x9a, 0x7a, 0xb5, 0x62, 0xe7, 0xbd, 0x3c,
	0x8a, 0x10, 0x17, 0x26, 0x93, 0x5e, 0x7d, 0xf7, 0xd6, 0xeb, 0x5f, 0x5b, 0xd6, 0xcb, 0x37, 0x7d,
	0xeb, 0xd5, 0x9b, 0xbe, 0xf5, 0xd7, 0x9b, 0xbe, 0xf5, 0xcb, 0x71, 0x7f, 0xed, 0xc5, 0x71, 0x7f,
	0xed, 0xd5, 0x71, 0x7f, 0xed, 0xf5, 0x71, 0x7f, 0x0d, 0xce, 0xfb, 0x3c, 0x1e, 0xa5, 0x61, 0x32,
	0xf1, 0xbd, 0x74, 0x24, 0xc3, 0x60, 0x0f, 0x93, 0x7e, 0x6c, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0x10, 0xc3, 0x90, 0xb5, 0x82, 0x0b, 0x00, 0x00,
}

func (m *AnalyzeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnalyzeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnalyzeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ColReq != nil {
		{
			size, err := m.ColReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnalyze(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.IdxReq != nil {
		{
			size, err := m.IdxReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnalyze(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	i = encodeVarintAnalyze(dAtA, i, uint64(m.TimeZoneOffset))
	i--
	dAtA[i] = 0x20
	i = encodeVarintAnalyze(dAtA, i, uint64(m.Flags))
	i--
	dAtA[i] = 0x18
	if m.StartTsFallback != nil {
		i = encodeVarintAnalyze(dAtA, i, uint64(*m.StartTsFallback))
		i--
		dAtA[i] = 0x10
	}
	i = encodeVarintAnalyze(dAtA, i, uint64(m.Tp))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AnalyzeIndexReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnalyzeIndexReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnalyzeIndexReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != nil {
		i = encodeVarintAnalyze(dAtA, i, uint64(*m.Version))
		i--
		dAtA[i] = 0x40
	}
	if m.TopNSize != nil {
		i = encodeVarintAnalyze(dAtA, i, uint64(*m.TopNSize))
		i--
		dAtA[i] = 0x38
	}
	i = encodeVarintAnalyze(dAtA, i, uint64(m.SketchSize))
	i--
	dAtA[i] = 0x30
	i = encodeVarintAnalyze(dAtA, i, uint64(m.SampleSize))
	i--
	dAtA[i] = 0x28
	if m.CmsketchWidth != nil {
		i = encodeVarintAnalyze(dAtA, i, uint64(*m.CmsketchWidth))
		i--
		dAtA[i] = 0x20
	}
	if m.CmsketchDepth != nil {
		i = encodeVarintAnalyze(dAtA, i, uint64(*m.CmsketchDepth))
		i--
		dAtA[i] = 0x18
	}
	i = encodeVarintAnalyze(dAtA, i, uint64(m.NumColumns))
	i--
	dAtA[i] = 0x10
	i = encodeVarintAnalyze(dAtA, i, uint64(m.BucketSize))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AnalyzeColumnsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnalyzeColumnsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnalyzeColumnsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SampleRate != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.SampleRate))))
		i--
		dAtA[i] = 0x59
	}
	if len(m.ColumnGroups) > 0 {
		for iNdEx := len(m.ColumnGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ColumnGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAnalyze(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.PrimaryPrefixColumnIds) > 0 {
		for iNdEx := len(m.PrimaryPrefixColumnIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintAnalyze(dAtA, i, uint64(m.PrimaryPrefixColumnIds[iNdEx]))
			i--
			dAtA[i] = 0x48
		}
	}
	if m.Version != nil {
		i = encodeVarintAnalyze(dAtA, i, uint64(*m.Version))
		i--
		dAtA[i] = 0x40
	}
	if len(m.PrimaryColumnIds) > 0 {
		for iNdEx := len(m.PrimaryColumnIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintAnalyze(dAtA, i, uint64(m.PrimaryColumnIds[iNdEx]))
			i--
			dAtA[i] = 0x38
		}
	}
	if m.CmsketchWidth != nil {
		i = encodeVarintAnalyze(dAtA, i, uint64(*m.CmsketchWidth))
		i--
		dAtA[i] = 0x30
	}
	if m.CmsketchDepth != nil {
		i = encodeVarintAnalyze(dAtA, i, uint64(*m.CmsketchDepth))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ColumnsInfo) > 0 {
		for iNdEx := len(m.ColumnsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ColumnsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAnalyze(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	i = encodeVarintAnalyze(dAtA, i, uint64(m.SketchSize))
	i--
	dAtA[i] = 0x18
	i = encodeVarintAnalyze(dAtA, i, uint64(m.SampleSize))
	i--
	dAtA[i] = 0x10
	i = encodeVarintAnalyze(dAtA, i, uint64(m.BucketSize))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AnalyzeMixedResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnalyzeMixedResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnalyzeMixedResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IndexResp != nil {
		{
			size, err := m.IndexResp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnalyze(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ColumnsResp != nil {
		{
			size, err := m.ColumnsResp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnalyze(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnalyzeColumnGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnalyzeColumnGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnalyzeColumnGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrefixLengths) > 0 {
		for iNdEx := len(m.PrefixLengths) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintAnalyze(dAtA, i, uint64(m.PrefixLengths[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	if len(m.ColumnOffsets) > 0 {
		for iNdEx := len(m.ColumnOffsets) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintAnalyze(dAtA, i, uint64(m.ColumnOffsets[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *AnalyzeColumnsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnalyzeColumnsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnalyzeColumnsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RowCollector != nil {
		{
			size, err := m.RowCollector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnalyze(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PkHist != nil {
		{
			size, err := m.PkHist.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnalyze(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Collectors) > 0 {
		for iNdEx := len(m.Collectors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collectors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAnalyze(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AnalyzeIndexResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnalyzeIndexResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnalyzeIndexResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Collector != nil {
		{
			size, err := m.Collector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnalyze(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Cms != nil {
		{
			size, err := m.Cms.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnalyze(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Hist != nil {
		{
			size, err := m.Hist.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnalyze(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bucket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bucket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ndv != nil {
		i = encodeVarintAnalyze(dAtA, i, uint64(*m.Ndv))
		i--
		dAtA[i] = 0x28
	}
	i = encodeVarintAnalyze(dAtA, i, uint64(m.Repeats))
	i--
	dAtA[i] = 0x20
	if m.UpperBound != nil {
		i -= len(m.UpperBound)
		copy(dAtA[i:], m.UpperBound)
		i = encodeVarintAnalyze(dAtA, i, uint64(len(m.UpperBound)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LowerBound != nil {
		i -= len(m.LowerBound)
		copy(dAtA[i:], m.LowerBound)
		i = encodeVarintAnalyze(dAtA, i, uint64(len(m.LowerBound)))
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintAnalyze(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Histogram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Histogram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Histogram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buckets) > 0 {
		for iNdEx := len(m.Buckets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Buckets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAnalyze(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintAnalyze(dAtA, i, uint64(m.Ndv))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *FMSketch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FMSketch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FMSketch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hashset) > 0 {
		for iNdEx := len(m.Hashset) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintAnalyze(dAtA, i, uint64(m.Hashset[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i = encodeVarintAnalyze(dAtA, i, uint64(m.Mask))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SampleCollector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SampleCollector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SampleCollector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalSize != nil {
		i = encodeVarintAnalyze(dAtA, i, uint64(*m.TotalSize))
		i--
		dAtA[i] = 0x30
	}
	if m.CmSketch != nil {
		{
			size, err := m.CmSketch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnalyze(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.FmSketch != nil {
		{
			size, err := m.FmSketch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnalyze(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintAnalyze(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x18
	i = encodeVarintAnalyze(dAtA, i, uint64(m.NullCount))
	i--
	dAtA[i] = 0x10
	if len(m.Samples) > 0 {
		for iNdEx := len(m.Samples) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Samples[iNdEx])
			copy(dAtA[i:], m.Samples[iNdEx])
			i = encodeVarintAnalyze(dAtA, i, uint64(len(m.Samples[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RowSampleCollector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowSampleCollector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RowSampleCollector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalSize) > 0 {
		for iNdEx := len(m.TotalSize) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintAnalyze(dAtA, i, uint64(m.TotalSize[iNdEx]))
			i--
			dAtA[i] = 0x28
		}
	}
	if len(m.FmSketch) > 0 {
		for iNdEx := len(m.FmSketch) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FmSketch[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAnalyze(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	i = encodeVarintAnalyze(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x18
	if len(m.NullCounts) > 0 {
		for iNdEx := len(m.NullCounts) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintAnalyze(dAtA, i, uint64(m.NullCounts[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	if len(m.Samples) > 0 {
		for iNdEx := len(m.Samples) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Samples[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAnalyze(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RowSample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowSample) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RowSample) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintAnalyze(dAtA, i, uint64(m.Weight))
	i--
	dAtA[i] = 0x10
	if len(m.Row) > 0 {
		for iNdEx := len(m.Row) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Row[iNdEx])
			copy(dAtA[i:], m.Row[iNdEx])
			i = encodeVarintAnalyze(dAtA, i, uint64(len(m.Row[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CMSketchRow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMSketchRow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMSketchRow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Counters) > 0 {
		for iNdEx := len(m.Counters) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintAnalyze(dAtA, i, uint64(m.Counters[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *CMSketchTopN) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMSketchTopN) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMSketchTopN) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintAnalyze(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x10
	if m.Data != nil {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintAnalyze(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CMSketch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMSketch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMSketch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintAnalyze(dAtA, i, uint64(m.DefaultValue))
	i--
	dAtA[i] = 0x18
	if len(m.TopN) > 0 {
		for iNdEx := len(m.TopN) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TopN[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAnalyze(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Rows) > 0 {
		for iNdEx := len(m.Rows) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rows[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAnalyze(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAnalyze(dAtA []byte, offset int, v uint64) int {
	offset -= sovAnalyze(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AnalyzeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAnalyze(uint64(m.Tp))
	if m.StartTsFallback != nil {
		n += 1 + sovAnalyze(uint64(*m.StartTsFallback))
	}
	n += 1 + sovAnalyze(uint64(m.Flags))
	n += 1 + sovAnalyze(uint64(m.TimeZoneOffset))
	if m.IdxReq != nil {
		l = m.IdxReq.Size()
		n += 1 + l + sovAnalyze(uint64(l))
	}
	if m.ColReq != nil {
		l = m.ColReq.Size()
		n += 1 + l + sovAnalyze(uint64(l))
	}
	return n
}

func (m *AnalyzeIndexReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAnalyze(uint64(m.BucketSize))
	n += 1 + sovAnalyze(uint64(m.NumColumns))
	if m.CmsketchDepth != nil {
		n += 1 + sovAnalyze(uint64(*m.CmsketchDepth))
	}
	if m.CmsketchWidth != nil {
		n += 1 + sovAnalyze(uint64(*m.CmsketchWidth))
	}
	n += 1 + sovAnalyze(uint64(m.SampleSize))
	n += 1 + sovAnalyze(uint64(m.SketchSize))
	if m.TopNSize != nil {
		n += 1 + sovAnalyze(uint64(*m.TopNSize))
	}
	if m.Version != nil {
		n += 1 + sovAnalyze(uint64(*m.Version))
	}
	return n
}

func (m *AnalyzeColumnsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAnalyze(uint64(m.BucketSize))
	n += 1 + sovAnalyze(uint64(m.SampleSize))
	n += 1 + sovAnalyze(uint64(m.SketchSize))
	if len(m.ColumnsInfo) > 0 {
		for _, e := range m.ColumnsInfo {
			l = e.Size()
			n += 1 + l + sovAnalyze(uint64(l))
		}
	}
	if m.CmsketchDepth != nil {
		n += 1 + sovAnalyze(uint64(*m.CmsketchDepth))
	}
	if m.CmsketchWidth != nil {
		n += 1 + sovAnalyze(uint64(*m.CmsketchWidth))
	}
	if len(m.PrimaryColumnIds) > 0 {
		for _, e := range m.PrimaryColumnIds {
			n += 1 + sovAnalyze(uint64(e))
		}
	}
	if m.Version != nil {
		n += 1 + sovAnalyze(uint64(*m.Version))
	}
	if len(m.PrimaryPrefixColumnIds) > 0 {
		for _, e := range m.PrimaryPrefixColumnIds {
			n += 1 + sovAnalyze(uint64(e))
		}
	}
	if len(m.ColumnGroups) > 0 {
		for _, e := range m.ColumnGroups {
			l = e.Size()
			n += 1 + l + sovAnalyze(uint64(l))
		}
	}
	if m.SampleRate != nil {
		n += 9
	}
	return n
}

func (m *AnalyzeMixedResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ColumnsResp != nil {
		l = m.ColumnsResp.Size()
		n += 1 + l + sovAnalyze(uint64(l))
	}
	if m.IndexResp != nil {
		l = m.IndexResp.Size()
		n += 1 + l + sovAnalyze(uint64(l))
	}
	return n
}

func (m *AnalyzeColumnGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ColumnOffsets) > 0 {
		for _, e := range m.ColumnOffsets {
			n += 1 + sovAnalyze(uint64(e))
		}
	}
	if len(m.PrefixLengths) > 0 {
		for _, e := range m.PrefixLengths {
			n += 1 + sovAnalyze(uint64(e))
		}
	}
	return n
}

func (m *AnalyzeColumnsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Collectors) > 0 {
		for _, e := range m.Collectors {
			l = e.Size()
			n += 1 + l + sovAnalyze(uint64(l))
		}
	}
	if m.PkHist != nil {
		l = m.PkHist.Size()
		n += 1 + l + sovAnalyze(uint64(l))
	}
	if m.RowCollector != nil {
		l = m.RowCollector.Size()
		n += 1 + l + sovAnalyze(uint64(l))
	}
	return n
}

func (m *AnalyzeIndexResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hist != nil {
		l = m.Hist.Size()
		n += 1 + l + sovAnalyze(uint64(l))
	}
	if m.Cms != nil {
		l = m.Cms.Size()
		n += 1 + l + sovAnalyze(uint64(l))
	}
	if m.Collector != nil {
		l = m.Collector.Size()
		n += 1 + l + sovAnalyze(uint64(l))
	}
	return n
}

func (m *Bucket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAnalyze(uint64(m.Count))
	if m.LowerBound != nil {
		l = len(m.LowerBound)
		n += 1 + l + sovAnalyze(uint64(l))
	}
	if m.UpperBound != nil {
		l = len(m.UpperBound)
		n += 1 + l + sovAnalyze(uint64(l))
	}
	n += 1 + sovAnalyze(uint64(m.Repeats))
	if m.Ndv != nil {
		n += 1 + sovAnalyze(uint64(*m.Ndv))
	}
	return n
}

func (m *Histogram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAnalyze(uint64(m.Ndv))
	if len(m.Buckets) > 0 {
		for _, e := range m.Buckets {
			l = e.Size()
			n += 1 + l + sovAnalyze(uint64(l))
		}
	}
	return n
}

func (m *FMSketch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAnalyze(uint64(m.Mask))
	if len(m.Hashset) > 0 {
		for _, e := range m.Hashset {
			n += 1 + sovAnalyze(uint64(e))
		}
	}
	return n
}

func (m *SampleCollector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Samples) > 0 {
		for _, b := range m.Samples {
			l = len(b)
			n += 1 + l + sovAnalyze(uint64(l))
		}
	}
	n += 1 + sovAnalyze(uint64(m.NullCount))
	n += 1 + sovAnalyze(uint64(m.Count))
	if m.FmSketch != nil {
		l = m.FmSketch.Size()
		n += 1 + l + sovAnalyze(uint64(l))
	}
	if m.CmSketch != nil {
		l = m.CmSketch.Size()
		n += 1 + l + sovAnalyze(uint64(l))
	}
	if m.TotalSize != nil {
		n += 1 + sovAnalyze(uint64(*m.TotalSize))
	}
	return n
}

func (m *RowSampleCollector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Samples) > 0 {
		for _, e := range m.Samples {
			l = e.Size()
			n += 1 + l + sovAnalyze(uint64(l))
		}
	}
	if len(m.NullCounts) > 0 {
		for _, e := range m.NullCounts {
			n += 1 + sovAnalyze(uint64(e))
		}
	}
	n += 1 + sovAnalyze(uint64(m.Count))
	if len(m.FmSketch) > 0 {
		for _, e := range m.FmSketch {
			l = e.Size()
			n += 1 + l + sovAnalyze(uint64(l))
		}
	}
	if len(m.TotalSize) > 0 {
		for _, e := range m.TotalSize {
			n += 1 + sovAnalyze(uint64(e))
		}
	}
	return n
}

func (m *RowSample) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Row) > 0 {
		for _, b := range m.Row {
			l = len(b)
			n += 1 + l + sovAnalyze(uint64(l))
		}
	}
	n += 1 + sovAnalyze(uint64(m.Weight))
	return n
}

func (m *CMSketchRow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Counters) > 0 {
		for _, e := range m.Counters {
			n += 1 + sovAnalyze(uint64(e))
		}
	}
	return n
}

func (m *CMSketchTopN) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovAnalyze(uint64(l))
	}
	n += 1 + sovAnalyze(uint64(m.Count))
	return n
}

func (m *CMSketch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rows) > 0 {
		for _, e := range m.Rows {
			l = e.Size()
			n += 1 + l + sovAnalyze(uint64(l))
		}
	}
	if len(m.TopN) > 0 {
		for _, e := range m.TopN {
			l = e.Size()
			n += 1 + l + sovAnalyze(uint64(l))
		}
	}
	n += 1 + sovAnalyze(uint64(m.DefaultValue))
	return n
}

func sovAnalyze(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAnalyze(x uint64) (n int) {
	return sovAnalyze(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AnalyzeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnalyzeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnalyzeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= AnalyzeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTsFallback", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTsFallback = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZoneOffset", wireType)
			}
			m.TimeZoneOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeZoneOffset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdxReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdxReq == nil {
				m.IdxReq = &AnalyzeIndexReq{}
			}
			if err := m.IdxReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ColReq == nil {
				m.ColReq = &AnalyzeColumnsReq{}
			}
			if err := m.ColReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnalyzeIndexReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnalyzeIndexReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnalyzeIndexReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketSize", wireType)
			}
			m.BucketSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BucketSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumColumns", wireType)
			}
			m.NumColumns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumColumns |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmsketchDepth", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CmsketchDepth = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmsketchWidth", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CmsketchWidth = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleSize", wireType)
			}
			m.SampleSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SampleSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SketchSize", wireType)
			}
			m.SketchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SketchSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopNSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopNSize = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnalyzeColumnsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnalyzeColumnsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnalyzeColumnsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketSize", wireType)
			}
			m.BucketSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BucketSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleSize", wireType)
			}
			m.SampleSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SampleSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SketchSize", wireType)
			}
			m.SketchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SketchSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnsInfo = append(m.ColumnsInfo, &ColumnInfo{})
			if err := m.ColumnsInfo[len(m.ColumnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmsketchDepth", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CmsketchDepth = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmsketchWidth", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CmsketchWidth = &v
		case 7:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalyze
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PrimaryColumnIds = append(m.PrimaryColumnIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalyze
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAnalyze
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAnalyze
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PrimaryColumnIds) == 0 {
					m.PrimaryColumnIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAnalyze
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PrimaryColumnIds = append(m.PrimaryColumnIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryColumnIds", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		case 9:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalyze
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PrimaryPrefixColumnIds = append(m.PrimaryPrefixColumnIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalyze
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAnalyze
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAnalyze
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PrimaryPrefixColumnIds) == 0 {
					m.PrimaryPrefixColumnIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAnalyze
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PrimaryPrefixColumnIds = append(m.PrimaryPrefixColumnIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryPrefixColumnIds", wireType)
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnGroups = append(m.ColumnGroups, &AnalyzeColumnGroup{})
			if err := m.ColumnGroups[len(m.ColumnGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.SampleRate = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnalyzeMixedResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnalyzeMixedResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnalyzeMixedResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnsResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ColumnsResp == nil {
				m.ColumnsResp = &AnalyzeColumnsResp{}
			}
			if err := m.ColumnsResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IndexResp == nil {
				m.IndexResp = &AnalyzeIndexResp{}
			}
			if err := m.IndexResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnalyzeColumnGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnalyzeColumnGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnalyzeColumnGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalyze
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ColumnOffsets = append(m.ColumnOffsets, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalyze
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAnalyze
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAnalyze
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ColumnOffsets) == 0 {
					m.ColumnOffsets = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAnalyze
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ColumnOffsets = append(m.ColumnOffsets, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnOffsets", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalyze
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PrefixLengths = append(m.PrefixLengths, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalyze
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAnalyze
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAnalyze
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PrefixLengths) == 0 {
					m.PrefixLengths = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAnalyze
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PrefixLengths = append(m.PrefixLengths, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixLengths", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnalyzeColumnsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnalyzeColumnsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnalyzeColumnsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collectors = append(m.Collectors, &SampleCollector{})
			if err := m.Collectors[len(m.Collectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkHist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PkHist == nil {
				m.PkHist = &Histogram{}
			}
			if err := m.PkHist.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowCollector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RowCollector == nil {
				m.RowCollector = &RowSampleCollector{}
			}
			if err := m.RowCollector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnalyzeIndexResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnalyzeIndexResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnalyzeIndexResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hist == nil {
				m.Hist = &Histogram{}
			}
			if err := m.Hist.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cms == nil {
				m.Cms = &CMSketch{}
			}
			if err := m.Cms.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Collector == nil {
				m.Collector = &SampleCollector{}
			}
			if err := m.Collector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerBound", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LowerBound = append(m.LowerBound[:0], dAtA[iNdEx:postIndex]...)
			if m.LowerBound == nil {
				m.LowerBound = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperBound", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpperBound = append(m.UpperBound[:0], dAtA[iNdEx:postIndex]...)
			if m.UpperBound == nil {
				m.UpperBound = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repeats", wireType)
			}
			m.Repeats = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Repeats |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ndv", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ndv = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Histogram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Histogram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Histogram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ndv", wireType)
			}
			m.Ndv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ndv |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buckets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buckets = append(m.Buckets, &Bucket{})
			if err := m.Buckets[len(m.Buckets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FMSketch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FMSketch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FMSketch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mask", wireType)
			}
			m.Mask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mask |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalyze
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Hashset = append(m.Hashset, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalyze
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAnalyze
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAnalyze
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Hashset) == 0 {
					m.Hashset = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAnalyze
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Hashset = append(m.Hashset, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashset", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SampleCollector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SampleCollector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SampleCollector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Samples", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Samples = append(m.Samples, make([]byte, postIndex-iNdEx))
			copy(m.Samples[len(m.Samples)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullCount", wireType)
			}
			m.NullCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NullCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FmSketch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FmSketch == nil {
				m.FmSketch = &FMSketch{}
			}
			if err := m.FmSketch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmSketch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CmSketch == nil {
				m.CmSketch = &CMSketch{}
			}
			if err := m.CmSketch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowSampleCollector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowSampleCollector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowSampleCollector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Samples", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Samples = append(m.Samples, &RowSample{})
			if err := m.Samples[len(m.Samples)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalyze
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NullCounts = append(m.NullCounts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalyze
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAnalyze
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAnalyze
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NullCounts) == 0 {
					m.NullCounts = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAnalyze
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NullCounts = append(m.NullCounts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NullCounts", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FmSketch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FmSketch = append(m.FmSketch, &FMSketch{})
			if err := m.FmSketch[len(m.FmSketch)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalyze
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TotalSize = append(m.TotalSize, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalyze
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAnalyze
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAnalyze
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TotalSize) == 0 {
					m.TotalSize = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAnalyze
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TotalSize = append(m.TotalSize, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowSample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowSample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowSample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Row = append(m.Row, make([]byte, postIndex-iNdEx))
			copy(m.Row[len(m.Row)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMSketchRow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMSketchRow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMSketchRow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalyze
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Counters = append(m.Counters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalyze
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAnalyze
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAnalyze
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Counters) == 0 {
					m.Counters = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAnalyze
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Counters = append(m.Counters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Counters", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMSketchTopN) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMSketchTopN: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMSketchTopN: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMSketch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMSketch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMSketch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rows = append(m.Rows, &CMSketchRow{})
			if err := m.Rows[len(m.Rows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopN", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalyze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopN = append(m.TopN, &CMSketchTopN{})
			if err := m.TopN[len(m.TopN)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			m.DefaultValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultValue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAnalyze(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAnalyze
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAnalyze
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAnalyze
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAnalyze        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAnalyze          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAnalyze = fmt.Errorf("proto: unexpected end of group")
)
