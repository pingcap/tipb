// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: executor.proto

package tipb

import (
	"fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	encoding_binary "encoding/binary"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ExecType int32

const (
	ExecType_TypeTableScan          ExecType = 0
	ExecType_TypeIndexScan          ExecType = 1
	ExecType_TypeSelection          ExecType = 2
	ExecType_TypeAggregation        ExecType = 3
	ExecType_TypeTopN               ExecType = 4
	ExecType_TypeLimit              ExecType = 5
	ExecType_TypeStreamAgg          ExecType = 6
	ExecType_TypeJoin               ExecType = 7
	ExecType_TypeKill               ExecType = 8
	ExecType_TypeExchangeSender     ExecType = 9
	ExecType_TypeExchangeReceiver   ExecType = 10
	ExecType_TypeProjection         ExecType = 11
	ExecType_TypePartitionTableScan ExecType = 12
	ExecType_TypeSort               ExecType = 13
	ExecType_TypeWindow             ExecType = 14
	ExecType_TypeExpand             ExecType = 15
	ExecType_TypeExpand2            ExecType = 16
)

var ExecType_name = map[int32]string{
	0:  "TypeTableScan",
	1:  "TypeIndexScan",
	2:  "TypeSelection",
	3:  "TypeAggregation",
	4:  "TypeTopN",
	5:  "TypeLimit",
	6:  "TypeStreamAgg",
	7:  "TypeJoin",
	8:  "TypeKill",
	9:  "TypeExchangeSender",
	10: "TypeExchangeReceiver",
	11: "TypeProjection",
	12: "TypePartitionTableScan",
	13: "TypeSort",
	14: "TypeWindow",
	15: "TypeExpand",
	16: "TypeExpand2",
}
var ExecType_value = map[string]int32{
	"TypeTableScan":          0,
	"TypeIndexScan":          1,
	"TypeSelection":          2,
	"TypeAggregation":        3,
	"TypeTopN":               4,
	"TypeLimit":              5,
	"TypeStreamAgg":          6,
	"TypeJoin":               7,
	"TypeKill":               8,
	"TypeExchangeSender":     9,
	"TypeExchangeReceiver":   10,
	"TypeProjection":         11,
	"TypePartitionTableScan": 12,
	"TypeSort":               13,
	"TypeWindow":             14,
	"TypeExpand":             15,
	"TypeExpand2":            16,
}

func (x ExecType) Enum() *ExecType {
	p := new(ExecType)
	*p = x
	return p
}
func (x ExecType) String() string {
	return proto.EnumName(ExecType_name, int32(x))
}
func (x *ExecType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExecType_value, data, "ExecType")
	if err != nil {
		return err
	}
	*x = ExecType(value)
	return nil
}
func (ExecType) EnumDescriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{0} }

type ExchangeType int32

const (
	ExchangeType_PassThrough ExchangeType = 0
	ExchangeType_Broadcast   ExchangeType = 1
	ExchangeType_Hash        ExchangeType = 2
)

var ExchangeType_name = map[int32]string{
	0: "PassThrough",
	1: "Broadcast",
	2: "Hash",
}
var ExchangeType_value = map[string]int32{
	"PassThrough": 0,
	"Broadcast":   1,
	"Hash":        2,
}

func (x ExchangeType) Enum() *ExchangeType {
	p := new(ExchangeType)
	*p = x
	return p
}
func (x ExchangeType) String() string {
	return proto.EnumName(ExchangeType_name, int32(x))
}
func (x *ExchangeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExchangeType_value, data, "ExchangeType")
	if err != nil {
		return err
	}
	*x = ExchangeType(value)
	return nil
}
func (ExchangeType) EnumDescriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{1} }

// Data compression mode
type CompressionMode int32

const (
	CompressionMode_NONE             CompressionMode = 0
	CompressionMode_FAST             CompressionMode = 1
	CompressionMode_HIGH_COMPRESSION CompressionMode = 2
)

var CompressionMode_name = map[int32]string{
	0: "NONE",
	1: "FAST",
	2: "HIGH_COMPRESSION",
}
var CompressionMode_value = map[string]int32{
	"NONE":             0,
	"FAST":             1,
	"HIGH_COMPRESSION": 2,
}

func (x CompressionMode) Enum() *CompressionMode {
	p := new(CompressionMode)
	*p = x
	return p
}
func (x CompressionMode) String() string {
	return proto.EnumName(CompressionMode_name, int32(x))
}
func (x *CompressionMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CompressionMode_value, data, "CompressionMode")
	if err != nil {
		return err
	}
	*x = CompressionMode(value)
	return nil
}
func (CompressionMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{2} }

type EngineType int32

const (
	EngineType_Local   EngineType = 0
	EngineType_TiKV    EngineType = 1
	EngineType_TiFlash EngineType = 2
)

var EngineType_name = map[int32]string{
	0: "Local",
	1: "TiKV",
	2: "TiFlash",
}
var EngineType_value = map[string]int32{
	"Local":   0,
	"TiKV":    1,
	"TiFlash": 2,
}

func (x EngineType) Enum() *EngineType {
	p := new(EngineType)
	*p = x
	return p
}
func (x EngineType) String() string {
	return proto.EnumName(EngineType_name, int32(x))
}
func (x *EngineType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EngineType_value, data, "EngineType")
	if err != nil {
		return err
	}
	*x = EngineType(value)
	return nil
}
func (EngineType) EnumDescriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{3} }

type ANNQueryDistanceMetric int32

const (
	ANNQueryDistanceMetric_InvalidMetric ANNQueryDistanceMetric = 0
	ANNQueryDistanceMetric_L1            ANNQueryDistanceMetric = 1
	ANNQueryDistanceMetric_L2            ANNQueryDistanceMetric = 2
	ANNQueryDistanceMetric_Cosine        ANNQueryDistanceMetric = 3
	ANNQueryDistanceMetric_InnerProduct  ANNQueryDistanceMetric = 4
)

var ANNQueryDistanceMetric_name = map[int32]string{
	0: "InvalidMetric",
	1: "L1",
	2: "L2",
	3: "Cosine",
	4: "InnerProduct",
}
var ANNQueryDistanceMetric_value = map[string]int32{
	"InvalidMetric": 0,
	"L1":            1,
	"L2":            2,
	"Cosine":        3,
	"InnerProduct":  4,
}

func (x ANNQueryDistanceMetric) Enum() *ANNQueryDistanceMetric {
	p := new(ANNQueryDistanceMetric)
	*p = x
	return p
}
func (x ANNQueryDistanceMetric) String() string {
	return proto.EnumName(ANNQueryDistanceMetric_name, int32(x))
}
func (x *ANNQueryDistanceMetric) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ANNQueryDistanceMetric_value, data, "ANNQueryDistanceMetric")
	if err != nil {
		return err
	}
	*x = ANNQueryDistanceMetric(value)
	return nil
}
func (ANNQueryDistanceMetric) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorExecutor, []int{4}
}

type ANNQueryType int32

const (
	ANNQueryType_InvalidQueryType ANNQueryType = 0
	ANNQueryType_OrderBy          ANNQueryType = 1
)

var ANNQueryType_name = map[int32]string{
	0: "InvalidQueryType",
	1: "OrderBy",
}
var ANNQueryType_value = map[string]int32{
	"InvalidQueryType": 0,
	"OrderBy":          1,
}

func (x ANNQueryType) Enum() *ANNQueryType {
	p := new(ANNQueryType)
	*p = x
	return p
}
func (x ANNQueryType) String() string {
	return proto.EnumName(ANNQueryType_name, int32(x))
}
func (x *ANNQueryType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ANNQueryType_value, data, "ANNQueryType")
	if err != nil {
		return err
	}
	*x = ANNQueryType(value)
	return nil
}
func (ANNQueryType) EnumDescriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{5} }

type JoinType int32

const (
	JoinType_TypeInnerJoin             JoinType = 0
	JoinType_TypeLeftOuterJoin         JoinType = 1
	JoinType_TypeRightOuterJoin        JoinType = 2
	JoinType_TypeSemiJoin              JoinType = 3
	JoinType_TypeAntiSemiJoin          JoinType = 4
	JoinType_TypeLeftOuterSemiJoin     JoinType = 5
	JoinType_TypeAntiLeftOuterSemiJoin JoinType = 6
)

var JoinType_name = map[int32]string{
	0: "TypeInnerJoin",
	1: "TypeLeftOuterJoin",
	2: "TypeRightOuterJoin",
	3: "TypeSemiJoin",
	4: "TypeAntiSemiJoin",
	5: "TypeLeftOuterSemiJoin",
	6: "TypeAntiLeftOuterSemiJoin",
}
var JoinType_value = map[string]int32{
	"TypeInnerJoin":             0,
	"TypeLeftOuterJoin":         1,
	"TypeRightOuterJoin":        2,
	"TypeSemiJoin":              3,
	"TypeAntiSemiJoin":          4,
	"TypeLeftOuterSemiJoin":     5,
	"TypeAntiLeftOuterSemiJoin": 6,
}

func (x JoinType) Enum() *JoinType {
	p := new(JoinType)
	*p = x
	return p
}
func (x JoinType) String() string {
	return proto.EnumName(JoinType_name, int32(x))
}
func (x *JoinType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(JoinType_value, data, "JoinType")
	if err != nil {
		return err
	}
	*x = JoinType(value)
	return nil
}
func (JoinType) EnumDescriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{6} }

type JoinExecType int32

const (
	JoinExecType_TypeHashJoin JoinExecType = 0
)

var JoinExecType_name = map[int32]string{
	0: "TypeHashJoin",
}
var JoinExecType_value = map[string]int32{
	"TypeHashJoin": 0,
}

func (x JoinExecType) Enum() *JoinExecType {
	p := new(JoinExecType)
	*p = x
	return p
}
func (x JoinExecType) String() string {
	return proto.EnumName(JoinExecType_name, int32(x))
}
func (x *JoinExecType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(JoinExecType_value, data, "JoinExecType")
	if err != nil {
		return err
	}
	*x = JoinExecType(value)
	return nil
}
func (JoinExecType) EnumDescriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{7} }

type RuntimeFilterType int32

const (
	RuntimeFilterType_IN           RuntimeFilterType = 0
	RuntimeFilterType_MIN_MAX      RuntimeFilterType = 1
	RuntimeFilterType_BLOOM_FILTER RuntimeFilterType = 2
)

var RuntimeFilterType_name = map[int32]string{
	0: "IN",
	1: "MIN_MAX",
	2: "BLOOM_FILTER",
}
var RuntimeFilterType_value = map[string]int32{
	"IN":           0,
	"MIN_MAX":      1,
	"BLOOM_FILTER": 2,
}

func (x RuntimeFilterType) Enum() *RuntimeFilterType {
	p := new(RuntimeFilterType)
	*p = x
	return p
}
func (x RuntimeFilterType) String() string {
	return proto.EnumName(RuntimeFilterType_name, int32(x))
}
func (x *RuntimeFilterType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RuntimeFilterType_value, data, "RuntimeFilterType")
	if err != nil {
		return err
	}
	*x = RuntimeFilterType(value)
	return nil
}
func (RuntimeFilterType) EnumDescriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{8} }

type RuntimeFilterMode int32

const (
	RuntimeFilterMode_LOCAL  RuntimeFilterMode = 0
	RuntimeFilterMode_GLOBAL RuntimeFilterMode = 1
)

var RuntimeFilterMode_name = map[int32]string{
	0: "LOCAL",
	1: "GLOBAL",
}
var RuntimeFilterMode_value = map[string]int32{
	"LOCAL":  0,
	"GLOBAL": 1,
}

func (x RuntimeFilterMode) Enum() *RuntimeFilterMode {
	p := new(RuntimeFilterMode)
	*p = x
	return p
}
func (x RuntimeFilterMode) String() string {
	return proto.EnumName(RuntimeFilterMode_name, int32(x))
}
func (x *RuntimeFilterMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RuntimeFilterMode_value, data, "RuntimeFilterMode")
	if err != nil {
		return err
	}
	*x = RuntimeFilterMode(value)
	return nil
}
func (RuntimeFilterMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{9} }

type WindowBoundType int32

const (
	WindowBoundType_Following  WindowBoundType = 0
	WindowBoundType_Preceding  WindowBoundType = 1
	WindowBoundType_CurrentRow WindowBoundType = 2
)

var WindowBoundType_name = map[int32]string{
	0: "Following",
	1: "Preceding",
	2: "CurrentRow",
}
var WindowBoundType_value = map[string]int32{
	"Following":  0,
	"Preceding":  1,
	"CurrentRow": 2,
}

func (x WindowBoundType) Enum() *WindowBoundType {
	p := new(WindowBoundType)
	*p = x
	return p
}
func (x WindowBoundType) String() string {
	return proto.EnumName(WindowBoundType_name, int32(x))
}
func (x *WindowBoundType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WindowBoundType_value, data, "WindowBoundType")
	if err != nil {
		return err
	}
	*x = WindowBoundType(value)
	return nil
}
func (WindowBoundType) EnumDescriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{10} }

// Used for range frame's comparison when finding frame's boundary
type RangeCmpDataType int32

const (
	RangeCmpDataType_Int      RangeCmpDataType = 0
	RangeCmpDataType_Float    RangeCmpDataType = 1
	RangeCmpDataType_Decimal  RangeCmpDataType = 2
	RangeCmpDataType_DateTime RangeCmpDataType = 3
	RangeCmpDataType_Duration RangeCmpDataType = 4
)

var RangeCmpDataType_name = map[int32]string{
	0: "Int",
	1: "Float",
	2: "Decimal",
	3: "DateTime",
	4: "Duration",
}
var RangeCmpDataType_value = map[string]int32{
	"Int":      0,
	"Float":    1,
	"Decimal":  2,
	"DateTime": 3,
	"Duration": 4,
}

func (x RangeCmpDataType) Enum() *RangeCmpDataType {
	p := new(RangeCmpDataType)
	*p = x
	return p
}
func (x RangeCmpDataType) String() string {
	return proto.EnumName(RangeCmpDataType_name, int32(x))
}
func (x *RangeCmpDataType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RangeCmpDataType_value, data, "RangeCmpDataType")
	if err != nil {
		return err
	}
	*x = RangeCmpDataType(value)
	return nil
}
func (RangeCmpDataType) EnumDescriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{11} }

type WindowFrameType int32

const (
	WindowFrameType_Rows   WindowFrameType = 0
	WindowFrameType_Ranges WindowFrameType = 1
	WindowFrameType_Groups WindowFrameType = 2
)

var WindowFrameType_name = map[int32]string{
	0: "Rows",
	1: "Ranges",
	2: "Groups",
}
var WindowFrameType_value = map[string]int32{
	"Rows":   0,
	"Ranges": 1,
	"Groups": 2,
}

func (x WindowFrameType) Enum() *WindowFrameType {
	p := new(WindowFrameType)
	*p = x
	return p
}
func (x WindowFrameType) String() string {
	return proto.EnumName(WindowFrameType_name, int32(x))
}
func (x *WindowFrameType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WindowFrameType_value, data, "WindowFrameType")
	if err != nil {
		return err
	}
	*x = WindowFrameType(value)
	return nil
}
func (WindowFrameType) EnumDescriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{12} }

// It represents a Executor.
type Executor struct {
	Tp                            ExecType            `protobuf:"varint,1,opt,name=tp,enum=tipb.ExecType" json:"tp"`
	TblScan                       *TableScan          `protobuf:"bytes,2,opt,name=tbl_scan,json=tblScan" json:"tbl_scan,omitempty"`
	IdxScan                       *IndexScan          `protobuf:"bytes,3,opt,name=idx_scan,json=idxScan" json:"idx_scan,omitempty"`
	Selection                     *Selection          `protobuf:"bytes,4,opt,name=selection" json:"selection,omitempty"`
	Aggregation                   *Aggregation        `protobuf:"bytes,5,opt,name=aggregation" json:"aggregation,omitempty"`
	TopN                          *TopN               `protobuf:"bytes,6,opt,name=topN" json:"topN,omitempty"`
	Limit                         *Limit              `protobuf:"bytes,7,opt,name=limit" json:"limit,omitempty"`
	ExchangeReceiver              *ExchangeReceiver   `protobuf:"bytes,8,opt,name=exchange_receiver,json=exchangeReceiver" json:"exchange_receiver,omitempty"`
	Join                          *Join               `protobuf:"bytes,9,opt,name=join" json:"join,omitempty"`
	ExecutorId                    *string             `protobuf:"bytes,10,opt,name=executor_id,json=executorId" json:"executor_id,omitempty"`
	Kill                          *Kill               `protobuf:"bytes,11,opt,name=kill" json:"kill,omitempty"`
	ExchangeSender                *ExchangeSender     `protobuf:"bytes,12,opt,name=exchange_sender,json=exchangeSender" json:"exchange_sender,omitempty"`
	Projection                    *Projection         `protobuf:"bytes,13,opt,name=Projection" json:"Projection,omitempty"`
	PartitionTableScan            *PartitionTableScan `protobuf:"bytes,14,opt,name=partition_table_scan,json=partitionTableScan" json:"partition_table_scan,omitempty"`
	Sort                          *Sort               `protobuf:"bytes,15,opt,name=sort" json:"sort,omitempty"`
	Window                        *Window             `protobuf:"bytes,16,opt,name=window" json:"window,omitempty"`
	FineGrainedShuffleStreamCount uint64              `protobuf:"varint,17,opt,name=fine_grained_shuffle_stream_count,json=fineGrainedShuffleStreamCount" json:"fine_grained_shuffle_stream_count"`
	FineGrainedShuffleBatchSize   uint64              `protobuf:"varint,18,opt,name=fine_grained_shuffle_batch_size,json=fineGrainedShuffleBatchSize" json:"fine_grained_shuffle_batch_size"`
	Expand                        *Expand             `protobuf:"bytes,19,opt,name=expand" json:"expand,omitempty"`
	Expand2                       *Expand2            `protobuf:"bytes,20,opt,name=expand2" json:"expand2,omitempty"`
	XXX_unrecognized              []byte              `json:"-"`
}

func (m *Executor) Reset()                    { *m = Executor{} }
func (m *Executor) String() string            { return proto.CompactTextString(m) }
func (*Executor) ProtoMessage()               {}
func (*Executor) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{0} }

func (m *Executor) GetTp() ExecType {
	if m != nil {
		return m.Tp
	}
	return ExecType_TypeTableScan
}

func (m *Executor) GetTblScan() *TableScan {
	if m != nil {
		return m.TblScan
	}
	return nil
}

func (m *Executor) GetIdxScan() *IndexScan {
	if m != nil {
		return m.IdxScan
	}
	return nil
}

func (m *Executor) GetSelection() *Selection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *Executor) GetAggregation() *Aggregation {
	if m != nil {
		return m.Aggregation
	}
	return nil
}

func (m *Executor) GetTopN() *TopN {
	if m != nil {
		return m.TopN
	}
	return nil
}

func (m *Executor) GetLimit() *Limit {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *Executor) GetExchangeReceiver() *ExchangeReceiver {
	if m != nil {
		return m.ExchangeReceiver
	}
	return nil
}

func (m *Executor) GetJoin() *Join {
	if m != nil {
		return m.Join
	}
	return nil
}

func (m *Executor) GetExecutorId() string {
	if m != nil && m.ExecutorId != nil {
		return *m.ExecutorId
	}
	return ""
}

func (m *Executor) GetKill() *Kill {
	if m != nil {
		return m.Kill
	}
	return nil
}

func (m *Executor) GetExchangeSender() *ExchangeSender {
	if m != nil {
		return m.ExchangeSender
	}
	return nil
}

func (m *Executor) GetProjection() *Projection {
	if m != nil {
		return m.Projection
	}
	return nil
}

func (m *Executor) GetPartitionTableScan() *PartitionTableScan {
	if m != nil {
		return m.PartitionTableScan
	}
	return nil
}

func (m *Executor) GetSort() *Sort {
	if m != nil {
		return m.Sort
	}
	return nil
}

func (m *Executor) GetWindow() *Window {
	if m != nil {
		return m.Window
	}
	return nil
}

func (m *Executor) GetFineGrainedShuffleStreamCount() uint64 {
	if m != nil {
		return m.FineGrainedShuffleStreamCount
	}
	return 0
}

func (m *Executor) GetFineGrainedShuffleBatchSize() uint64 {
	if m != nil {
		return m.FineGrainedShuffleBatchSize
	}
	return 0
}

func (m *Executor) GetExpand() *Expand {
	if m != nil {
		return m.Expand
	}
	return nil
}

func (m *Executor) GetExpand2() *Expand2 {
	if m != nil {
		return m.Expand2
	}
	return nil
}

// ExchangeSender will build connection with ExchangeReceiver.
type ExchangeSender struct {
	Tp                  ExchangeType         `protobuf:"varint,1,opt,name=tp,enum=tipb.ExchangeType" json:"tp"`
	EncodedTaskMeta     [][]byte             `protobuf:"bytes,2,rep,name=encoded_task_meta,json=encodedTaskMeta" json:"encoded_task_meta,omitempty"`
	PartitionKeys       []*Expr              `protobuf:"bytes,3,rep,name=partition_keys,json=partitionKeys" json:"partition_keys,omitempty"`
	Child               *Executor            `protobuf:"bytes,4,opt,name=child" json:"child,omitempty"`
	Types               []*FieldType         `protobuf:"bytes,5,rep,name=types" json:"types,omitempty"`
	AllFieldTypes       []*FieldType         `protobuf:"bytes,6,rep,name=all_field_types,json=allFieldTypes" json:"all_field_types,omitempty"`
	Compression         CompressionMode      `protobuf:"varint,7,opt,name=compression,enum=tipb.CompressionMode" json:"compression"`
	UpstreamCteTaskMeta []*EncodedBytesSlice `protobuf:"bytes,8,rep,name=upstream_cte_task_meta,json=upstreamCteTaskMeta" json:"upstream_cte_task_meta,omitempty"`
	XXX_unrecognized    []byte               `json:"-"`
}

func (m *ExchangeSender) Reset()                    { *m = ExchangeSender{} }
func (m *ExchangeSender) String() string            { return proto.CompactTextString(m) }
func (*ExchangeSender) ProtoMessage()               {}
func (*ExchangeSender) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{1} }

func (m *ExchangeSender) GetTp() ExchangeType {
	if m != nil {
		return m.Tp
	}
	return ExchangeType_PassThrough
}

func (m *ExchangeSender) GetEncodedTaskMeta() [][]byte {
	if m != nil {
		return m.EncodedTaskMeta
	}
	return nil
}

func (m *ExchangeSender) GetPartitionKeys() []*Expr {
	if m != nil {
		return m.PartitionKeys
	}
	return nil
}

func (m *ExchangeSender) GetChild() *Executor {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *ExchangeSender) GetTypes() []*FieldType {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *ExchangeSender) GetAllFieldTypes() []*FieldType {
	if m != nil {
		return m.AllFieldTypes
	}
	return nil
}

func (m *ExchangeSender) GetCompression() CompressionMode {
	if m != nil {
		return m.Compression
	}
	return CompressionMode_NONE
}

func (m *ExchangeSender) GetUpstreamCteTaskMeta() []*EncodedBytesSlice {
	if m != nil {
		return m.UpstreamCteTaskMeta
	}
	return nil
}

type EncodedBytesSlice struct {
	EncodedTasks     [][]byte `protobuf:"bytes,1,rep,name=encoded_tasks,json=encodedTasks" json:"encoded_tasks,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *EncodedBytesSlice) Reset()                    { *m = EncodedBytesSlice{} }
func (m *EncodedBytesSlice) String() string            { return proto.CompactTextString(m) }
func (*EncodedBytesSlice) ProtoMessage()               {}
func (*EncodedBytesSlice) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{2} }

func (m *EncodedBytesSlice) GetEncodedTasks() [][]byte {
	if m != nil {
		return m.EncodedTasks
	}
	return nil
}

// ExchangeReceiver accept connection and receiver data from ExchangeSender.
type ExchangeReceiver struct {
	EncodedTaskMeta             [][]byte      `protobuf:"bytes,1,rep,name=encoded_task_meta,json=encodedTaskMeta" json:"encoded_task_meta,omitempty"`
	FieldTypes                  []*FieldType  `protobuf:"bytes,2,rep,name=field_types,json=fieldTypes" json:"field_types,omitempty"`
	Tp                          *ExchangeType `protobuf:"varint,3,opt,name=tp,enum=tipb.ExchangeType" json:"tp,omitempty"`
	OriginalCtePrdocuerTaskMeta [][]byte      `protobuf:"bytes,4,rep,name=original_cte_prdocuer_task_meta,json=originalCtePrdocuerTaskMeta" json:"original_cte_prdocuer_task_meta,omitempty"`
	XXX_unrecognized            []byte        `json:"-"`
}

func (m *ExchangeReceiver) Reset()                    { *m = ExchangeReceiver{} }
func (m *ExchangeReceiver) String() string            { return proto.CompactTextString(m) }
func (*ExchangeReceiver) ProtoMessage()               {}
func (*ExchangeReceiver) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{3} }

func (m *ExchangeReceiver) GetEncodedTaskMeta() [][]byte {
	if m != nil {
		return m.EncodedTaskMeta
	}
	return nil
}

func (m *ExchangeReceiver) GetFieldTypes() []*FieldType {
	if m != nil {
		return m.FieldTypes
	}
	return nil
}

func (m *ExchangeReceiver) GetTp() ExchangeType {
	if m != nil && m.Tp != nil {
		return *m.Tp
	}
	return ExchangeType_PassThrough
}

func (m *ExchangeReceiver) GetOriginalCtePrdocuerTaskMeta() [][]byte {
	if m != nil {
		return m.OriginalCtePrdocuerTaskMeta
	}
	return nil
}

// ANN = Approximate Nearest Neighbor. For some queries, ANN index can be used.
type ANNQueryInfo struct {
	QueryType        ANNQueryType           `protobuf:"varint,1,opt,name=query_type,json=queryType,enum=tipb.ANNQueryType" json:"query_type"`
	DistanceMetric   ANNQueryDistanceMetric `protobuf:"varint,2,opt,name=distance_metric,json=distanceMetric,enum=tipb.ANNQueryDistanceMetric" json:"distance_metric"`
	TopK             uint32                 `protobuf:"varint,3,opt,name=top_k,json=topK" json:"top_k"`
	ColumnName       string                 `protobuf:"bytes,4,opt,name=column_name,json=columnName" json:"column_name"`
	ColumnId         int64                  `protobuf:"varint,5,opt,name=column_id,json=columnId" json:"column_id"`
	RefVecF32        []byte                 `protobuf:"bytes,6,opt,name=ref_vec_f32,json=refVecF32" json:"ref_vec_f32,omitempty"`
	MaxDistance      float64                `protobuf:"fixed64,10,opt,name=max_distance,json=maxDistance" json:"max_distance"`
	HnswEfSearch     uint32                 `protobuf:"varint,20,opt,name=hnsw_ef_search,json=hnswEfSearch" json:"hnsw_ef_search"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *ANNQueryInfo) Reset()                    { *m = ANNQueryInfo{} }
func (m *ANNQueryInfo) String() string            { return proto.CompactTextString(m) }
func (*ANNQueryInfo) ProtoMessage()               {}
func (*ANNQueryInfo) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{4} }

func (m *ANNQueryInfo) GetQueryType() ANNQueryType {
	if m != nil {
		return m.QueryType
	}
	return ANNQueryType_InvalidQueryType
}

func (m *ANNQueryInfo) GetDistanceMetric() ANNQueryDistanceMetric {
	if m != nil {
		return m.DistanceMetric
	}
	return ANNQueryDistanceMetric_InvalidMetric
}

func (m *ANNQueryInfo) GetTopK() uint32 {
	if m != nil {
		return m.TopK
	}
	return 0
}

func (m *ANNQueryInfo) GetColumnName() string {
	if m != nil {
		return m.ColumnName
	}
	return ""
}

func (m *ANNQueryInfo) GetColumnId() int64 {
	if m != nil {
		return m.ColumnId
	}
	return 0
}

func (m *ANNQueryInfo) GetRefVecF32() []byte {
	if m != nil {
		return m.RefVecF32
	}
	return nil
}

func (m *ANNQueryInfo) GetMaxDistance() float64 {
	if m != nil {
		return m.MaxDistance
	}
	return 0
}

func (m *ANNQueryInfo) GetHnswEfSearch() uint32 {
	if m != nil {
		return m.HnswEfSearch
	}
	return 0
}

type TableScan struct {
	TableId                    int64            `protobuf:"varint,1,opt,name=table_id,json=tableId" json:"table_id"`
	Columns                    []*ColumnInfo    `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty"`
	Desc                       bool             `protobuf:"varint,3,opt,name=desc" json:"desc"`
	PrimaryColumnIds           []int64          `protobuf:"varint,4,rep,name=primary_column_ids,json=primaryColumnIds" json:"primary_column_ids,omitempty"`
	NextReadEngine             EngineType       `protobuf:"varint,5,opt,name=next_read_engine,json=nextReadEngine,enum=tipb.EngineType" json:"next_read_engine"`
	Ranges                     []KeyRange       `protobuf:"bytes,6,rep,name=ranges" json:"ranges"`
	PrimaryPrefixColumnIds     []int64          `protobuf:"varint,7,rep,name=primary_prefix_column_ids,json=primaryPrefixColumnIds" json:"primary_prefix_column_ids,omitempty"`
	KeepOrder                  *bool            `protobuf:"varint,8,opt,name=keep_order,json=keepOrder" json:"keep_order,omitempty"`
	IsFastScan                 *bool            `protobuf:"varint,9,opt,name=is_fast_scan,json=isFastScan" json:"is_fast_scan,omitempty"`
	PushedDownFilterConditions []*Expr          `protobuf:"bytes,10,rep,name=pushed_down_filter_conditions,json=pushedDownFilterConditions" json:"pushed_down_filter_conditions,omitempty"`
	AnnQuery                   *ANNQueryInfo    `protobuf:"bytes,13,opt,name=ann_query,json=annQuery" json:"ann_query,omitempty"`
	RuntimeFilterList          []*RuntimeFilter `protobuf:"bytes,11,rep,name=runtime_filter_list,json=runtimeFilterList" json:"runtime_filter_list,omitempty"`
	MaxWaitTimeMs              int32            `protobuf:"varint,12,opt,name=max_wait_time_ms,json=maxWaitTimeMs" json:"max_wait_time_ms"`
	XXX_unrecognized           []byte           `json:"-"`
}

func (m *TableScan) Reset()                    { *m = TableScan{} }
func (m *TableScan) String() string            { return proto.CompactTextString(m) }
func (*TableScan) ProtoMessage()               {}
func (*TableScan) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{5} }

func (m *TableScan) GetTableId() int64 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *TableScan) GetColumns() []*ColumnInfo {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *TableScan) GetDesc() bool {
	if m != nil {
		return m.Desc
	}
	return false
}

func (m *TableScan) GetPrimaryColumnIds() []int64 {
	if m != nil {
		return m.PrimaryColumnIds
	}
	return nil
}

func (m *TableScan) GetNextReadEngine() EngineType {
	if m != nil {
		return m.NextReadEngine
	}
	return EngineType_Local
}

func (m *TableScan) GetRanges() []KeyRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *TableScan) GetPrimaryPrefixColumnIds() []int64 {
	if m != nil {
		return m.PrimaryPrefixColumnIds
	}
	return nil
}

func (m *TableScan) GetKeepOrder() bool {
	if m != nil && m.KeepOrder != nil {
		return *m.KeepOrder
	}
	return false
}

func (m *TableScan) GetIsFastScan() bool {
	if m != nil && m.IsFastScan != nil {
		return *m.IsFastScan
	}
	return false
}

func (m *TableScan) GetPushedDownFilterConditions() []*Expr {
	if m != nil {
		return m.PushedDownFilterConditions
	}
	return nil
}

func (m *TableScan) GetAnnQuery() *ANNQueryInfo {
	if m != nil {
		return m.AnnQuery
	}
	return nil
}

func (m *TableScan) GetRuntimeFilterList() []*RuntimeFilter {
	if m != nil {
		return m.RuntimeFilterList
	}
	return nil
}

func (m *TableScan) GetMaxWaitTimeMs() int32 {
	if m != nil {
		return m.MaxWaitTimeMs
	}
	return 0
}

type PartitionTableScan struct {
	TableId                    int64            `protobuf:"varint,1,opt,name=table_id,json=tableId" json:"table_id"`
	Columns                    []*ColumnInfo    `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty"`
	Desc                       bool             `protobuf:"varint,3,opt,name=desc" json:"desc"`
	PrimaryColumnIds           []int64          `protobuf:"varint,4,rep,name=primary_column_ids,json=primaryColumnIds" json:"primary_column_ids,omitempty"`
	PrimaryPrefixColumnIds     []int64          `protobuf:"varint,5,rep,name=primary_prefix_column_ids,json=primaryPrefixColumnIds" json:"primary_prefix_column_ids,omitempty"`
	PartitionIds               []int64          `protobuf:"varint,6,rep,name=partition_ids,json=partitionIds" json:"partition_ids,omitempty"`
	IsFastScan                 *bool            `protobuf:"varint,7,opt,name=is_fast_scan,json=isFastScan" json:"is_fast_scan,omitempty"`
	PushedDownFilterConditions []*Expr          `protobuf:"bytes,8,rep,name=pushed_down_filter_conditions,json=pushedDownFilterConditions" json:"pushed_down_filter_conditions,omitempty"`
	AnnQuery                   *ANNQueryInfo    `protobuf:"bytes,11,opt,name=ann_query,json=annQuery" json:"ann_query,omitempty"`
	RuntimeFilterList          []*RuntimeFilter `protobuf:"bytes,9,rep,name=runtime_filter_list,json=runtimeFilterList" json:"runtime_filter_list,omitempty"`
	MaxWaitTimeMs              int32            `protobuf:"varint,10,opt,name=max_wait_time_ms,json=maxWaitTimeMs" json:"max_wait_time_ms"`
	XXX_unrecognized           []byte           `json:"-"`
}

func (m *PartitionTableScan) Reset()                    { *m = PartitionTableScan{} }
func (m *PartitionTableScan) String() string            { return proto.CompactTextString(m) }
func (*PartitionTableScan) ProtoMessage()               {}
func (*PartitionTableScan) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{6} }

func (m *PartitionTableScan) GetTableId() int64 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *PartitionTableScan) GetColumns() []*ColumnInfo {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *PartitionTableScan) GetDesc() bool {
	if m != nil {
		return m.Desc
	}
	return false
}

func (m *PartitionTableScan) GetPrimaryColumnIds() []int64 {
	if m != nil {
		return m.PrimaryColumnIds
	}
	return nil
}

func (m *PartitionTableScan) GetPrimaryPrefixColumnIds() []int64 {
	if m != nil {
		return m.PrimaryPrefixColumnIds
	}
	return nil
}

func (m *PartitionTableScan) GetPartitionIds() []int64 {
	if m != nil {
		return m.PartitionIds
	}
	return nil
}

func (m *PartitionTableScan) GetIsFastScan() bool {
	if m != nil && m.IsFastScan != nil {
		return *m.IsFastScan
	}
	return false
}

func (m *PartitionTableScan) GetPushedDownFilterConditions() []*Expr {
	if m != nil {
		return m.PushedDownFilterConditions
	}
	return nil
}

func (m *PartitionTableScan) GetAnnQuery() *ANNQueryInfo {
	if m != nil {
		return m.AnnQuery
	}
	return nil
}

func (m *PartitionTableScan) GetRuntimeFilterList() []*RuntimeFilter {
	if m != nil {
		return m.RuntimeFilterList
	}
	return nil
}

func (m *PartitionTableScan) GetMaxWaitTimeMs() int32 {
	if m != nil {
		return m.MaxWaitTimeMs
	}
	return 0
}

type Join struct {
	JoinType      JoinType     `protobuf:"varint,1,opt,name=join_type,json=joinType,enum=tipb.JoinType" json:"join_type"`
	JoinExecType  JoinExecType `protobuf:"varint,2,opt,name=join_exec_type,json=joinExecType,enum=tipb.JoinExecType" json:"join_exec_type"`
	Children      []*Executor  `protobuf:"bytes,3,rep,name=children" json:"children,omitempty"`
	InnerIdx      int64        `protobuf:"varint,4,opt,name=inner_idx,json=innerIdx" json:"inner_idx"`
	LeftJoinKeys  []*Expr      `protobuf:"bytes,5,rep,name=left_join_keys,json=leftJoinKeys" json:"left_join_keys,omitempty"`
	RightJoinKeys []*Expr      `protobuf:"bytes,6,rep,name=right_join_keys,json=rightJoinKeys" json:"right_join_keys,omitempty"`
	// used by TiFlash join when new collation is enabled.
	ProbeTypes              []*FieldType     `protobuf:"bytes,7,rep,name=probe_types,json=probeTypes" json:"probe_types,omitempty"`
	BuildTypes              []*FieldType     `protobuf:"bytes,8,rep,name=build_types,json=buildTypes" json:"build_types,omitempty"`
	LeftConditions          []*Expr          `protobuf:"bytes,9,rep,name=left_conditions,json=leftConditions" json:"left_conditions,omitempty"`
	RightConditions         []*Expr          `protobuf:"bytes,10,rep,name=right_conditions,json=rightConditions" json:"right_conditions,omitempty"`
	OtherConditions         []*Expr          `protobuf:"bytes,11,rep,name=other_conditions,json=otherConditions" json:"other_conditions,omitempty"`
	OtherEqConditionsFromIn []*Expr          `protobuf:"bytes,12,rep,name=other_eq_conditions_from_in,json=otherEqConditionsFromIn" json:"other_eq_conditions_from_in,omitempty"`
	IsNullAwareSemiJoin     *bool            `protobuf:"varint,13,opt,name=is_null_aware_semi_join,json=isNullAwareSemiJoin" json:"is_null_aware_semi_join,omitempty"`
	RuntimeFilterList       []*RuntimeFilter `protobuf:"bytes,14,rep,name=runtime_filter_list,json=runtimeFilterList" json:"runtime_filter_list,omitempty"`
	XXX_unrecognized        []byte           `json:"-"`
}

func (m *Join) Reset()                    { *m = Join{} }
func (m *Join) String() string            { return proto.CompactTextString(m) }
func (*Join) ProtoMessage()               {}
func (*Join) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{7} }

func (m *Join) GetJoinType() JoinType {
	if m != nil {
		return m.JoinType
	}
	return JoinType_TypeInnerJoin
}

func (m *Join) GetJoinExecType() JoinExecType {
	if m != nil {
		return m.JoinExecType
	}
	return JoinExecType_TypeHashJoin
}

func (m *Join) GetChildren() []*Executor {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *Join) GetInnerIdx() int64 {
	if m != nil {
		return m.InnerIdx
	}
	return 0
}

func (m *Join) GetLeftJoinKeys() []*Expr {
	if m != nil {
		return m.LeftJoinKeys
	}
	return nil
}

func (m *Join) GetRightJoinKeys() []*Expr {
	if m != nil {
		return m.RightJoinKeys
	}
	return nil
}

func (m *Join) GetProbeTypes() []*FieldType {
	if m != nil {
		return m.ProbeTypes
	}
	return nil
}

func (m *Join) GetBuildTypes() []*FieldType {
	if m != nil {
		return m.BuildTypes
	}
	return nil
}

func (m *Join) GetLeftConditions() []*Expr {
	if m != nil {
		return m.LeftConditions
	}
	return nil
}

func (m *Join) GetRightConditions() []*Expr {
	if m != nil {
		return m.RightConditions
	}
	return nil
}

func (m *Join) GetOtherConditions() []*Expr {
	if m != nil {
		return m.OtherConditions
	}
	return nil
}

func (m *Join) GetOtherEqConditionsFromIn() []*Expr {
	if m != nil {
		return m.OtherEqConditionsFromIn
	}
	return nil
}

func (m *Join) GetIsNullAwareSemiJoin() bool {
	if m != nil && m.IsNullAwareSemiJoin != nil {
		return *m.IsNullAwareSemiJoin
	}
	return false
}

func (m *Join) GetRuntimeFilterList() []*RuntimeFilter {
	if m != nil {
		return m.RuntimeFilterList
	}
	return nil
}

type RuntimeFilter struct {
	Id               int32             `protobuf:"varint,1,opt,name=id" json:"id"`
	SourceExprList   []*Expr           `protobuf:"bytes,2,rep,name=source_expr_list,json=sourceExprList" json:"source_expr_list,omitempty"`
	TargetExprList   []*Expr           `protobuf:"bytes,3,rep,name=target_expr_list,json=targetExprList" json:"target_expr_list,omitempty"`
	SourceExecutorId string            `protobuf:"bytes,4,opt,name=source_executor_id,json=sourceExecutorId" json:"source_executor_id"`
	TargetExecutorId string            `protobuf:"bytes,5,opt,name=target_executor_id,json=targetExecutorId" json:"target_executor_id"`
	RfType           RuntimeFilterType `protobuf:"varint,6,opt,name=rf_type,json=rfType,enum=tipb.RuntimeFilterType" json:"rf_type"`
	RfMode           RuntimeFilterMode `protobuf:"varint,7,opt,name=rf_mode,json=rfMode,enum=tipb.RuntimeFilterMode" json:"rf_mode"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *RuntimeFilter) Reset()                    { *m = RuntimeFilter{} }
func (m *RuntimeFilter) String() string            { return proto.CompactTextString(m) }
func (*RuntimeFilter) ProtoMessage()               {}
func (*RuntimeFilter) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{8} }

func (m *RuntimeFilter) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RuntimeFilter) GetSourceExprList() []*Expr {
	if m != nil {
		return m.SourceExprList
	}
	return nil
}

func (m *RuntimeFilter) GetTargetExprList() []*Expr {
	if m != nil {
		return m.TargetExprList
	}
	return nil
}

func (m *RuntimeFilter) GetSourceExecutorId() string {
	if m != nil {
		return m.SourceExecutorId
	}
	return ""
}

func (m *RuntimeFilter) GetTargetExecutorId() string {
	if m != nil {
		return m.TargetExecutorId
	}
	return ""
}

func (m *RuntimeFilter) GetRfType() RuntimeFilterType {
	if m != nil {
		return m.RfType
	}
	return RuntimeFilterType_IN
}

func (m *RuntimeFilter) GetRfMode() RuntimeFilterMode {
	if m != nil {
		return m.RfMode
	}
	return RuntimeFilterMode_LOCAL
}

type IndexScan struct {
	TableId          int64         `protobuf:"varint,1,opt,name=table_id,json=tableId" json:"table_id"`
	IndexId          int64         `protobuf:"varint,2,opt,name=index_id,json=indexId" json:"index_id"`
	Columns          []*ColumnInfo `protobuf:"bytes,3,rep,name=columns" json:"columns,omitempty"`
	Desc             bool          `protobuf:"varint,4,opt,name=desc" json:"desc"`
	Unique           *bool         `protobuf:"varint,5,opt,name=unique" json:"unique,omitempty"`
	PrimaryColumnIds []int64       `protobuf:"varint,6,rep,name=primary_column_ids,json=primaryColumnIds" json:"primary_column_ids,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *IndexScan) Reset()                    { *m = IndexScan{} }
func (m *IndexScan) String() string            { return proto.CompactTextString(m) }
func (*IndexScan) ProtoMessage()               {}
func (*IndexScan) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{9} }

func (m *IndexScan) GetTableId() int64 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *IndexScan) GetIndexId() int64 {
	if m != nil {
		return m.IndexId
	}
	return 0
}

func (m *IndexScan) GetColumns() []*ColumnInfo {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *IndexScan) GetDesc() bool {
	if m != nil {
		return m.Desc
	}
	return false
}

func (m *IndexScan) GetUnique() bool {
	if m != nil && m.Unique != nil {
		return *m.Unique
	}
	return false
}

func (m *IndexScan) GetPrimaryColumnIds() []int64 {
	if m != nil {
		return m.PrimaryColumnIds
	}
	return nil
}

type Selection struct {
	// Where conditions.
	Conditions       []*Expr    `protobuf:"bytes,1,rep,name=conditions" json:"conditions,omitempty"`
	RpnConditions    []*RpnExpr `protobuf:"bytes,2,rep,name=rpn_conditions,json=rpnConditions" json:"rpn_conditions,omitempty"`
	Child            *Executor  `protobuf:"bytes,3,opt,name=child" json:"child,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Selection) Reset()                    { *m = Selection{} }
func (m *Selection) String() string            { return proto.CompactTextString(m) }
func (*Selection) ProtoMessage()               {}
func (*Selection) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{10} }

func (m *Selection) GetConditions() []*Expr {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Selection) GetRpnConditions() []*RpnExpr {
	if m != nil {
		return m.RpnConditions
	}
	return nil
}

func (m *Selection) GetChild() *Executor {
	if m != nil {
		return m.Child
	}
	return nil
}

type Projection struct {
	// Projection expressions.
	Exprs            []*Expr    `protobuf:"bytes,1,rep,name=exprs" json:"exprs,omitempty"`
	RpnExprs         []*RpnExpr `protobuf:"bytes,2,rep,name=rpn_exprs,json=rpnExprs" json:"rpn_exprs,omitempty"`
	Child            *Executor  `protobuf:"bytes,3,opt,name=child" json:"child,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Projection) Reset()                    { *m = Projection{} }
func (m *Projection) String() string            { return proto.CompactTextString(m) }
func (*Projection) ProtoMessage()               {}
func (*Projection) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{11} }

func (m *Projection) GetExprs() []*Expr {
	if m != nil {
		return m.Exprs
	}
	return nil
}

func (m *Projection) GetRpnExprs() []*RpnExpr {
	if m != nil {
		return m.RpnExprs
	}
	return nil
}

func (m *Projection) GetChild() *Executor {
	if m != nil {
		return m.Child
	}
	return nil
}

type Aggregation struct {
	// Group by clause.
	GroupBy    []*Expr    `protobuf:"bytes,1,rep,name=group_by,json=groupBy" json:"group_by,omitempty"`
	RpnGroupBy []*RpnExpr `protobuf:"bytes,4,rep,name=rpn_group_by,json=rpnGroupBy" json:"rpn_group_by,omitempty"`
	// Aggregate functions.
	AggFunc    []*Expr    `protobuf:"bytes,2,rep,name=agg_func,json=aggFunc" json:"agg_func,omitempty"`
	RpnAggFunc []*RpnExpr `protobuf:"bytes,5,rep,name=rpn_agg_func,json=rpnAggFunc" json:"rpn_agg_func,omitempty"`
	// If it is a stream aggregation.
	Streamed         bool      `protobuf:"varint,3,opt,name=streamed" json:"streamed"`
	Child            *Executor `protobuf:"bytes,6,opt,name=child" json:"child,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Aggregation) Reset()                    { *m = Aggregation{} }
func (m *Aggregation) String() string            { return proto.CompactTextString(m) }
func (*Aggregation) ProtoMessage()               {}
func (*Aggregation) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{12} }

func (m *Aggregation) GetGroupBy() []*Expr {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *Aggregation) GetRpnGroupBy() []*RpnExpr {
	if m != nil {
		return m.RpnGroupBy
	}
	return nil
}

func (m *Aggregation) GetAggFunc() []*Expr {
	if m != nil {
		return m.AggFunc
	}
	return nil
}

func (m *Aggregation) GetRpnAggFunc() []*RpnExpr {
	if m != nil {
		return m.RpnAggFunc
	}
	return nil
}

func (m *Aggregation) GetStreamed() bool {
	if m != nil {
		return m.Streamed
	}
	return false
}

func (m *Aggregation) GetChild() *Executor {
	if m != nil {
		return m.Child
	}
	return nil
}

type TopN struct {
	// Order by clause.
	OrderBy []*ByItem `protobuf:"bytes,1,rep,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Limit   uint64    `protobuf:"varint,2,opt,name=limit" json:"limit"`
	Child   *Executor `protobuf:"bytes,3,opt,name=child" json:"child,omitempty"`
	// If partition_by is not empty, it means need to return topN of each partition.
	// Generally used in sqls like `where row_number() over (partition by ... order by ...) < X`
	PartitionBy      []*ByItem `protobuf:"bytes,4,rep,name=partition_by,json=partitionBy" json:"partition_by,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *TopN) Reset()                    { *m = TopN{} }
func (m *TopN) String() string            { return proto.CompactTextString(m) }
func (*TopN) ProtoMessage()               {}
func (*TopN) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{13} }

func (m *TopN) GetOrderBy() []*ByItem {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *TopN) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TopN) GetChild() *Executor {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *TopN) GetPartitionBy() []*ByItem {
	if m != nil {
		return m.PartitionBy
	}
	return nil
}

type Limit struct {
	// Limit the result to be returned.
	Limit uint64    `protobuf:"varint,1,opt,name=limit" json:"limit"`
	Child *Executor `protobuf:"bytes,2,opt,name=child" json:"child,omitempty"`
	// If partition_by is not empty, it means need to return limitN of each partition.
	// Generally used in sqls like `where row_number() over (partition by ...) < X`
	PartitionBy      []*ByItem `protobuf:"bytes,3,rep,name=partition_by,json=partitionBy" json:"partition_by,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Limit) Reset()                    { *m = Limit{} }
func (m *Limit) String() string            { return proto.CompactTextString(m) }
func (*Limit) ProtoMessage()               {}
func (*Limit) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{14} }

func (m *Limit) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Limit) GetChild() *Executor {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *Limit) GetPartitionBy() []*ByItem {
	if m != nil {
		return m.PartitionBy
	}
	return nil
}

type Kill struct {
	ConnID uint64 `protobuf:"varint,1,opt,name=connID" json:"connID"`
	// Query indicates whether terminate a single query on this connection or the whole connection.
	//   If Query is true, terminates the statement the connection is currently executing, but leaves the connection itself intact.
	//   If Query is false, terminates the connection associated with the given ConnectionID, after terminating any statement the connection is executing.
	//   See https://dev.mysql.com/doc/refman/8.0/en/kill.html.
	Query            bool   `protobuf:"varint,2,opt,name=query" json:"query"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Kill) Reset()                    { *m = Kill{} }
func (m *Kill) String() string            { return proto.CompactTextString(m) }
func (*Kill) ProtoMessage()               {}
func (*Kill) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{15} }

func (m *Kill) GetConnID() uint64 {
	if m != nil {
		return m.ConnID
	}
	return 0
}

func (m *Kill) GetQuery() bool {
	if m != nil {
		return m.Query
	}
	return false
}

type ExecutorExecutionSummary struct {
	// Total time cost in this executor. Includes self time cost and children time cost.
	TimeProcessedNs *uint64 `protobuf:"varint,1,opt,name=time_processed_ns,json=timeProcessedNs" json:"time_processed_ns,omitempty"`
	// How many rows this executor produced totally.
	NumProducedRows *uint64 `protobuf:"varint,2,opt,name=num_produced_rows,json=numProducedRows" json:"num_produced_rows,omitempty"`
	// How many times executor's `next()` is called.
	NumIterations *uint64 `protobuf:"varint,3,opt,name=num_iterations,json=numIterations" json:"num_iterations,omitempty"`
	// Coresponding executor id
	ExecutorId *string `protobuf:"bytes,4,opt,name=executor_id,json=executorId" json:"executor_id,omitempty"`
	// The execution concurrency for this executor
	Concurrency *uint64 `protobuf:"varint,5,opt,name=concurrency" json:"concurrency,omitempty"`
	// Types that are valid to be assigned to DetailInfo:
	//	*ExecutorExecutionSummary_TiflashScanContext
	DetailInfo isExecutorExecutionSummary_DetailInfo `protobuf_oneof:"DetailInfo"`
	// Serialize kvproto resource_manager.Consumption to tell tidb the consumption info. For now it's only for tiflash.
	// And it's the ru consumption of one MPPTask/cop/batchCop instead of one executor.
	RuConsumption    []byte `protobuf:"bytes,7,opt,name=ru_consumption,json=ruConsumption" json:"ru_consumption,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ExecutorExecutionSummary) Reset()         { *m = ExecutorExecutionSummary{} }
func (m *ExecutorExecutionSummary) String() string { return proto.CompactTextString(m) }
func (*ExecutorExecutionSummary) ProtoMessage()    {}
func (*ExecutorExecutionSummary) Descriptor() ([]byte, []int) {
	return fileDescriptorExecutor, []int{16}
}

type isExecutorExecutionSummary_DetailInfo interface {
	isExecutorExecutionSummary_DetailInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ExecutorExecutionSummary_TiflashScanContext struct {
	TiflashScanContext *TiFlashScanContext `protobuf:"bytes,6,opt,name=tiflash_scan_context,json=tiflashScanContext,oneof"`
}

func (*ExecutorExecutionSummary_TiflashScanContext) isExecutorExecutionSummary_DetailInfo() {}

func (m *ExecutorExecutionSummary) GetDetailInfo() isExecutorExecutionSummary_DetailInfo {
	if m != nil {
		return m.DetailInfo
	}
	return nil
}

func (m *ExecutorExecutionSummary) GetTimeProcessedNs() uint64 {
	if m != nil && m.TimeProcessedNs != nil {
		return *m.TimeProcessedNs
	}
	return 0
}

func (m *ExecutorExecutionSummary) GetNumProducedRows() uint64 {
	if m != nil && m.NumProducedRows != nil {
		return *m.NumProducedRows
	}
	return 0
}

func (m *ExecutorExecutionSummary) GetNumIterations() uint64 {
	if m != nil && m.NumIterations != nil {
		return *m.NumIterations
	}
	return 0
}

func (m *ExecutorExecutionSummary) GetExecutorId() string {
	if m != nil && m.ExecutorId != nil {
		return *m.ExecutorId
	}
	return ""
}

func (m *ExecutorExecutionSummary) GetConcurrency() uint64 {
	if m != nil && m.Concurrency != nil {
		return *m.Concurrency
	}
	return 0
}

func (m *ExecutorExecutionSummary) GetTiflashScanContext() *TiFlashScanContext {
	if x, ok := m.GetDetailInfo().(*ExecutorExecutionSummary_TiflashScanContext); ok {
		return x.TiflashScanContext
	}
	return nil
}

func (m *ExecutorExecutionSummary) GetRuConsumption() []byte {
	if m != nil {
		return m.RuConsumption
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExecutorExecutionSummary) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExecutorExecutionSummary_OneofMarshaler, _ExecutorExecutionSummary_OneofUnmarshaler, _ExecutorExecutionSummary_OneofSizer, []interface{}{
		(*ExecutorExecutionSummary_TiflashScanContext)(nil),
	}
}

func _ExecutorExecutionSummary_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExecutorExecutionSummary)
	// DetailInfo
	switch x := m.DetailInfo.(type) {
	case *ExecutorExecutionSummary_TiflashScanContext:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TiflashScanContext); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExecutorExecutionSummary.DetailInfo has unexpected type %T", x)
	}
	return nil
}

func _ExecutorExecutionSummary_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExecutorExecutionSummary)
	switch tag {
	case 6: // DetailInfo.tiflash_scan_context
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TiFlashScanContext)
		err := b.DecodeMessage(msg)
		m.DetailInfo = &ExecutorExecutionSummary_TiflashScanContext{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExecutorExecutionSummary_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExecutorExecutionSummary)
	// DetailInfo
	switch x := m.DetailInfo.(type) {
	case *ExecutorExecutionSummary_TiflashScanContext:
		s := proto.Size(x.TiflashScanContext)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TiFlashExecutionInfo struct {
	// The execution summary of each executor, no order limitation.
	ExecutionSummaries []*ExecutorExecutionSummary `protobuf:"bytes,1,rep,name=execution_summaries,json=executionSummaries" json:"execution_summaries,omitempty"`
	XXX_unrecognized   []byte                      `json:"-"`
}

func (m *TiFlashExecutionInfo) Reset()                    { *m = TiFlashExecutionInfo{} }
func (m *TiFlashExecutionInfo) String() string            { return proto.CompactTextString(m) }
func (*TiFlashExecutionInfo) ProtoMessage()               {}
func (*TiFlashExecutionInfo) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{17} }

func (m *TiFlashExecutionInfo) GetExecutionSummaries() []*ExecutorExecutionSummary {
	if m != nil {
		return m.ExecutionSummaries
	}
	return nil
}

type TiFlashScanContext struct {
	TotalDmfileScannedPacks             *uint64 `protobuf:"varint,1,opt,name=total_dmfile_scanned_packs,json=totalDmfileScannedPacks" json:"total_dmfile_scanned_packs,omitempty"`
	TotalDmfileSkippedPacks             *uint64 `protobuf:"varint,2,opt,name=total_dmfile_skipped_packs,json=totalDmfileSkippedPacks" json:"total_dmfile_skipped_packs,omitempty"`
	TotalDmfileScannedRows              *uint64 `protobuf:"varint,3,opt,name=total_dmfile_scanned_rows,json=totalDmfileScannedRows" json:"total_dmfile_scanned_rows,omitempty"`
	TotalDmfileSkippedRows              *uint64 `protobuf:"varint,4,opt,name=total_dmfile_skipped_rows,json=totalDmfileSkippedRows" json:"total_dmfile_skipped_rows,omitempty"`
	TotalDmfileRoughSetIndexLoadTimeMs  *uint64 `protobuf:"varint,5,opt,name=total_dmfile_rough_set_index_load_time_ms,json=totalDmfileRoughSetIndexLoadTimeMs" json:"total_dmfile_rough_set_index_load_time_ms,omitempty"`
	TotalDmfileReadTimeMs               *uint64 `protobuf:"varint,6,opt,name=total_dmfile_read_time_ms,json=totalDmfileReadTimeMs" json:"total_dmfile_read_time_ms,omitempty"`
	TotalCreateSnapshotTimeMs           *uint64 `protobuf:"varint,7,opt,name=total_create_snapshot_time_ms,json=totalCreateSnapshotTimeMs" json:"total_create_snapshot_time_ms,omitempty"`
	TotalLocalRegionNum                 *uint64 `protobuf:"varint,8,opt,name=total_local_region_num,json=totalLocalRegionNum" json:"total_local_region_num,omitempty"`
	TotalRemoteRegionNum                *uint64 `protobuf:"varint,9,opt,name=total_remote_region_num,json=totalRemoteRegionNum" json:"total_remote_region_num,omitempty"`
	TotalUserReadBytes                  *uint64 `protobuf:"varint,10,opt,name=total_user_read_bytes,json=totalUserReadBytes" json:"total_user_read_bytes,omitempty"`
	TotalLearnerReadMs                  *uint64 `protobuf:"varint,11,opt,name=total_learner_read_ms,json=totalLearnerReadMs" json:"total_learner_read_ms,omitempty"`
	TotalDisaggReadCacheHitSize         *uint64 `protobuf:"varint,12,opt,name=total_disagg_read_cache_hit_size,json=totalDisaggReadCacheHitSize" json:"total_disagg_read_cache_hit_size,omitempty"`
	TotalDisaggReadCacheMissSize        *uint64 `protobuf:"varint,13,opt,name=total_disagg_read_cache_miss_size,json=totalDisaggReadCacheMissSize" json:"total_disagg_read_cache_miss_size,omitempty"`
	TotalDmfileRoughSetIndexCheckTimeMs *uint64 `protobuf:"varint,14,opt,name=total_dmfile_rough_set_index_check_time_ms,json=totalDmfileRoughSetIndexCheckTimeMs" json:"total_dmfile_rough_set_index_check_time_ms,omitempty"`
	TotalVectorIdxLoadFromDisk          *uint64 `protobuf:"varint,101,opt,name=total_vector_idx_load_from_disk,json=totalVectorIdxLoadFromDisk" json:"total_vector_idx_load_from_disk,omitempty"`
	TotalVectorIdxLoadFromCache         *uint64 `protobuf:"varint,102,opt,name=total_vector_idx_load_from_cache,json=totalVectorIdxLoadFromCache" json:"total_vector_idx_load_from_cache,omitempty"`
	TotalVectorIdxLoadTimeMs            *uint64 `protobuf:"varint,103,opt,name=total_vector_idx_load_time_ms,json=totalVectorIdxLoadTimeMs" json:"total_vector_idx_load_time_ms,omitempty"`
	TotalVectorIdxSearchTimeMs          *uint64 `protobuf:"varint,104,opt,name=total_vector_idx_search_time_ms,json=totalVectorIdxSearchTimeMs" json:"total_vector_idx_search_time_ms,omitempty"`
	TotalVectorIdxSearchVisitedNodes    *uint64 `protobuf:"varint,105,opt,name=total_vector_idx_search_visited_nodes,json=totalVectorIdxSearchVisitedNodes" json:"total_vector_idx_search_visited_nodes,omitempty"`
	TotalVectorIdxSearchDiscardedNodes  *uint64 `protobuf:"varint,106,opt,name=total_vector_idx_search_discarded_nodes,json=totalVectorIdxSearchDiscardedNodes" json:"total_vector_idx_search_discarded_nodes,omitempty"`
	TotalVectorIdxReadVecTimeMs         *uint64 `protobuf:"varint,107,opt,name=total_vector_idx_read_vec_time_ms,json=totalVectorIdxReadVecTimeMs" json:"total_vector_idx_read_vec_time_ms,omitempty"`
	TotalVectorIdxReadOthersTimeMs      *uint64 `protobuf:"varint,108,opt,name=total_vector_idx_read_others_time_ms,json=totalVectorIdxReadOthersTimeMs" json:"total_vector_idx_read_others_time_ms,omitempty"`
	XXX_unrecognized                    []byte  `json:"-"`
}

func (m *TiFlashScanContext) Reset()                    { *m = TiFlashScanContext{} }
func (m *TiFlashScanContext) String() string            { return proto.CompactTextString(m) }
func (*TiFlashScanContext) ProtoMessage()               {}
func (*TiFlashScanContext) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{18} }

func (m *TiFlashScanContext) GetTotalDmfileScannedPacks() uint64 {
	if m != nil && m.TotalDmfileScannedPacks != nil {
		return *m.TotalDmfileScannedPacks
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalDmfileSkippedPacks() uint64 {
	if m != nil && m.TotalDmfileSkippedPacks != nil {
		return *m.TotalDmfileSkippedPacks
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalDmfileScannedRows() uint64 {
	if m != nil && m.TotalDmfileScannedRows != nil {
		return *m.TotalDmfileScannedRows
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalDmfileSkippedRows() uint64 {
	if m != nil && m.TotalDmfileSkippedRows != nil {
		return *m.TotalDmfileSkippedRows
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalDmfileRoughSetIndexLoadTimeMs() uint64 {
	if m != nil && m.TotalDmfileRoughSetIndexLoadTimeMs != nil {
		return *m.TotalDmfileRoughSetIndexLoadTimeMs
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalDmfileReadTimeMs() uint64 {
	if m != nil && m.TotalDmfileReadTimeMs != nil {
		return *m.TotalDmfileReadTimeMs
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalCreateSnapshotTimeMs() uint64 {
	if m != nil && m.TotalCreateSnapshotTimeMs != nil {
		return *m.TotalCreateSnapshotTimeMs
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalLocalRegionNum() uint64 {
	if m != nil && m.TotalLocalRegionNum != nil {
		return *m.TotalLocalRegionNum
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalRemoteRegionNum() uint64 {
	if m != nil && m.TotalRemoteRegionNum != nil {
		return *m.TotalRemoteRegionNum
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalUserReadBytes() uint64 {
	if m != nil && m.TotalUserReadBytes != nil {
		return *m.TotalUserReadBytes
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalLearnerReadMs() uint64 {
	if m != nil && m.TotalLearnerReadMs != nil {
		return *m.TotalLearnerReadMs
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalDisaggReadCacheHitSize() uint64 {
	if m != nil && m.TotalDisaggReadCacheHitSize != nil {
		return *m.TotalDisaggReadCacheHitSize
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalDisaggReadCacheMissSize() uint64 {
	if m != nil && m.TotalDisaggReadCacheMissSize != nil {
		return *m.TotalDisaggReadCacheMissSize
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalDmfileRoughSetIndexCheckTimeMs() uint64 {
	if m != nil && m.TotalDmfileRoughSetIndexCheckTimeMs != nil {
		return *m.TotalDmfileRoughSetIndexCheckTimeMs
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalVectorIdxLoadFromDisk() uint64 {
	if m != nil && m.TotalVectorIdxLoadFromDisk != nil {
		return *m.TotalVectorIdxLoadFromDisk
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalVectorIdxLoadFromCache() uint64 {
	if m != nil && m.TotalVectorIdxLoadFromCache != nil {
		return *m.TotalVectorIdxLoadFromCache
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalVectorIdxLoadTimeMs() uint64 {
	if m != nil && m.TotalVectorIdxLoadTimeMs != nil {
		return *m.TotalVectorIdxLoadTimeMs
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalVectorIdxSearchTimeMs() uint64 {
	if m != nil && m.TotalVectorIdxSearchTimeMs != nil {
		return *m.TotalVectorIdxSearchTimeMs
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalVectorIdxSearchVisitedNodes() uint64 {
	if m != nil && m.TotalVectorIdxSearchVisitedNodes != nil {
		return *m.TotalVectorIdxSearchVisitedNodes
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalVectorIdxSearchDiscardedNodes() uint64 {
	if m != nil && m.TotalVectorIdxSearchDiscardedNodes != nil {
		return *m.TotalVectorIdxSearchDiscardedNodes
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalVectorIdxReadVecTimeMs() uint64 {
	if m != nil && m.TotalVectorIdxReadVecTimeMs != nil {
		return *m.TotalVectorIdxReadVecTimeMs
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalVectorIdxReadOthersTimeMs() uint64 {
	if m != nil && m.TotalVectorIdxReadOthersTimeMs != nil {
		return *m.TotalVectorIdxReadOthersTimeMs
	}
	return 0
}

type Sort struct {
	ByItems          []*ByItem `protobuf:"bytes,1,rep,name=byItems" json:"byItems,omitempty"`
	IsPartialSort    *bool     `protobuf:"varint,2,opt,name=isPartialSort" json:"isPartialSort,omitempty"`
	Child            *Executor `protobuf:"bytes,3,opt,name=child" json:"child,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Sort) Reset()                    { *m = Sort{} }
func (m *Sort) String() string            { return proto.CompactTextString(m) }
func (*Sort) ProtoMessage()               {}
func (*Sort) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{19} }

func (m *Sort) GetByItems() []*ByItem {
	if m != nil {
		return m.ByItems
	}
	return nil
}

func (m *Sort) GetIsPartialSort() bool {
	if m != nil && m.IsPartialSort != nil {
		return *m.IsPartialSort
	}
	return false
}

func (m *Sort) GetChild() *Executor {
	if m != nil {
		return m.Child
	}
	return nil
}

type WindowFrameBound struct {
	Type             WindowBoundType   `protobuf:"varint,1,opt,name=type,enum=tipb.WindowBoundType" json:"type"`
	Unbounded        bool              `protobuf:"varint,2,opt,name=unbounded" json:"unbounded"`
	Offset           *uint64           `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	CalcFuncs        []*Expr           `protobuf:"bytes,4,rep,name=calcFuncs" json:"calcFuncs,omitempty"`
	FrameRange       *Expr             `protobuf:"bytes,5,opt,name=frame_range,json=frameRange" json:"frame_range,omitempty"`
	CmpDataType      *RangeCmpDataType `protobuf:"varint,6,opt,name=cmp_data_type,json=cmpDataType,enum=tipb.RangeCmpDataType" json:"cmp_data_type,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *WindowFrameBound) Reset()                    { *m = WindowFrameBound{} }
func (m *WindowFrameBound) String() string            { return proto.CompactTextString(m) }
func (*WindowFrameBound) ProtoMessage()               {}
func (*WindowFrameBound) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{20} }

func (m *WindowFrameBound) GetType() WindowBoundType {
	if m != nil {
		return m.Type
	}
	return WindowBoundType_Following
}

func (m *WindowFrameBound) GetUnbounded() bool {
	if m != nil {
		return m.Unbounded
	}
	return false
}

func (m *WindowFrameBound) GetOffset() uint64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *WindowFrameBound) GetCalcFuncs() []*Expr {
	if m != nil {
		return m.CalcFuncs
	}
	return nil
}

func (m *WindowFrameBound) GetFrameRange() *Expr {
	if m != nil {
		return m.FrameRange
	}
	return nil
}

func (m *WindowFrameBound) GetCmpDataType() RangeCmpDataType {
	if m != nil && m.CmpDataType != nil {
		return *m.CmpDataType
	}
	return RangeCmpDataType_Int
}

type WindowFrame struct {
	Type             WindowFrameType   `protobuf:"varint,1,opt,name=type,enum=tipb.WindowFrameType" json:"type"`
	Start            *WindowFrameBound `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	End              *WindowFrameBound `protobuf:"bytes,3,opt,name=end" json:"end,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *WindowFrame) Reset()                    { *m = WindowFrame{} }
func (m *WindowFrame) String() string            { return proto.CompactTextString(m) }
func (*WindowFrame) ProtoMessage()               {}
func (*WindowFrame) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{21} }

func (m *WindowFrame) GetType() WindowFrameType {
	if m != nil {
		return m.Type
	}
	return WindowFrameType_Rows
}

func (m *WindowFrame) GetStart() *WindowFrameBound {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *WindowFrame) GetEnd() *WindowFrameBound {
	if m != nil {
		return m.End
	}
	return nil
}

type Window struct {
	FuncDesc         []*Expr      `protobuf:"bytes,1,rep,name=func_desc,json=funcDesc" json:"func_desc,omitempty"`
	PartitionBy      []*ByItem    `protobuf:"bytes,2,rep,name=partition_by,json=partitionBy" json:"partition_by,omitempty"`
	OrderBy          []*ByItem    `protobuf:"bytes,3,rep,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Frame            *WindowFrame `protobuf:"bytes,4,opt,name=frame" json:"frame,omitempty"`
	Child            *Executor    `protobuf:"bytes,5,opt,name=child" json:"child,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Window) Reset()                    { *m = Window{} }
func (m *Window) String() string            { return proto.CompactTextString(m) }
func (*Window) ProtoMessage()               {}
func (*Window) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{22} }

func (m *Window) GetFuncDesc() []*Expr {
	if m != nil {
		return m.FuncDesc
	}
	return nil
}

func (m *Window) GetPartitionBy() []*ByItem {
	if m != nil {
		return m.PartitionBy
	}
	return nil
}

func (m *Window) GetOrderBy() []*ByItem {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *Window) GetFrame() *WindowFrame {
	if m != nil {
		return m.Frame
	}
	return nil
}

func (m *Window) GetChild() *Executor {
	if m != nil {
		return m.Child
	}
	return nil
}

type GroupingExpr struct {
	GroupingExpr     []*Expr `protobuf:"bytes,1,rep,name=grouping_expr,json=groupingExpr" json:"grouping_expr,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GroupingExpr) Reset()                    { *m = GroupingExpr{} }
func (m *GroupingExpr) String() string            { return proto.CompactTextString(m) }
func (*GroupingExpr) ProtoMessage()               {}
func (*GroupingExpr) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{23} }

func (m *GroupingExpr) GetGroupingExpr() []*Expr {
	if m != nil {
		return m.GroupingExpr
	}
	return nil
}

type GroupingSet struct {
	GroupingExprs    []*GroupingExpr `protobuf:"bytes,1,rep,name=grouping_exprs,json=groupingExprs" json:"grouping_exprs,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *GroupingSet) Reset()                    { *m = GroupingSet{} }
func (m *GroupingSet) String() string            { return proto.CompactTextString(m) }
func (*GroupingSet) ProtoMessage()               {}
func (*GroupingSet) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{24} }

func (m *GroupingSet) GetGroupingExprs() []*GroupingExpr {
	if m != nil {
		return m.GroupingExprs
	}
	return nil
}

// Deprecated in the nearly feature usage
type Expand struct {
	GroupingSets     []*GroupingSet `protobuf:"bytes,1,rep,name=grouping_sets,json=groupingSets" json:"grouping_sets,omitempty"`
	Child            *Executor      `protobuf:"bytes,2,opt,name=child" json:"child,omitempty"`
	Version          *uint64        `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Expand) Reset()                    { *m = Expand{} }
func (m *Expand) String() string            { return proto.CompactTextString(m) }
func (*Expand) ProtoMessage()               {}
func (*Expand) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{25} }

func (m *Expand) GetGroupingSets() []*GroupingSet {
	if m != nil {
		return m.GroupingSets
	}
	return nil
}

func (m *Expand) GetChild() *Executor {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *Expand) GetVersion() uint64 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

type ExprSlice struct {
	Exprs            []*Expr `protobuf:"bytes,1,rep,name=exprs" json:"exprs,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExprSlice) Reset()                    { *m = ExprSlice{} }
func (m *ExprSlice) String() string            { return proto.CompactTextString(m) }
func (*ExprSlice) ProtoMessage()               {}
func (*ExprSlice) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{26} }

func (m *ExprSlice) GetExprs() []*Expr {
	if m != nil {
		return m.Exprs
	}
	return nil
}

type Expand2 struct {
	ProjExprs            []*ExprSlice `protobuf:"bytes,1,rep,name=proj_exprs,json=projExprs" json:"proj_exprs,omitempty"`
	GeneratedOutputNames []string     `protobuf:"bytes,2,rep,name=generated_output_names,json=generatedOutputNames" json:"generated_output_names,omitempty"`
	Child                *Executor    `protobuf:"bytes,3,opt,name=child" json:"child,omitempty"`
	XXX_unrecognized     []byte       `json:"-"`
}

func (m *Expand2) Reset()                    { *m = Expand2{} }
func (m *Expand2) String() string            { return proto.CompactTextString(m) }
func (*Expand2) ProtoMessage()               {}
func (*Expand2) Descriptor() ([]byte, []int) { return fileDescriptorExecutor, []int{27} }

func (m *Expand2) GetProjExprs() []*ExprSlice {
	if m != nil {
		return m.ProjExprs
	}
	return nil
}

func (m *Expand2) GetGeneratedOutputNames() []string {
	if m != nil {
		return m.GeneratedOutputNames
	}
	return nil
}

func (m *Expand2) GetChild() *Executor {
	if m != nil {
		return m.Child
	}
	return nil
}

func init() {
	proto.RegisterType((*Executor)(nil), "tipb.Executor")
	proto.RegisterType((*ExchangeSender)(nil), "tipb.ExchangeSender")
	proto.RegisterType((*EncodedBytesSlice)(nil), "tipb.EncodedBytesSlice")
	proto.RegisterType((*ExchangeReceiver)(nil), "tipb.ExchangeReceiver")
	proto.RegisterType((*ANNQueryInfo)(nil), "tipb.ANNQueryInfo")
	proto.RegisterType((*TableScan)(nil), "tipb.TableScan")
	proto.RegisterType((*PartitionTableScan)(nil), "tipb.PartitionTableScan")
	proto.RegisterType((*Join)(nil), "tipb.Join")
	proto.RegisterType((*RuntimeFilter)(nil), "tipb.RuntimeFilter")
	proto.RegisterType((*IndexScan)(nil), "tipb.IndexScan")
	proto.RegisterType((*Selection)(nil), "tipb.Selection")
	proto.RegisterType((*Projection)(nil), "tipb.Projection")
	proto.RegisterType((*Aggregation)(nil), "tipb.Aggregation")
	proto.RegisterType((*TopN)(nil), "tipb.TopN")
	proto.RegisterType((*Limit)(nil), "tipb.Limit")
	proto.RegisterType((*Kill)(nil), "tipb.Kill")
	proto.RegisterType((*ExecutorExecutionSummary)(nil), "tipb.ExecutorExecutionSummary")
	proto.RegisterType((*TiFlashExecutionInfo)(nil), "tipb.TiFlashExecutionInfo")
	proto.RegisterType((*TiFlashScanContext)(nil), "tipb.TiFlashScanContext")
	proto.RegisterType((*Sort)(nil), "tipb.Sort")
	proto.RegisterType((*WindowFrameBound)(nil), "tipb.WindowFrameBound")
	proto.RegisterType((*WindowFrame)(nil), "tipb.WindowFrame")
	proto.RegisterType((*Window)(nil), "tipb.Window")
	proto.RegisterType((*GroupingExpr)(nil), "tipb.GroupingExpr")
	proto.RegisterType((*GroupingSet)(nil), "tipb.GroupingSet")
	proto.RegisterType((*Expand)(nil), "tipb.Expand")
	proto.RegisterType((*ExprSlice)(nil), "tipb.ExprSlice")
	proto.RegisterType((*Expand2)(nil), "tipb.Expand2")
	proto.RegisterEnum("tipb.ExecType", ExecType_name, ExecType_value)
	proto.RegisterEnum("tipb.ExchangeType", ExchangeType_name, ExchangeType_value)
	proto.RegisterEnum("tipb.CompressionMode", CompressionMode_name, CompressionMode_value)
	proto.RegisterEnum("tipb.EngineType", EngineType_name, EngineType_value)
	proto.RegisterEnum("tipb.ANNQueryDistanceMetric", ANNQueryDistanceMetric_name, ANNQueryDistanceMetric_value)
	proto.RegisterEnum("tipb.ANNQueryType", ANNQueryType_name, ANNQueryType_value)
	proto.RegisterEnum("tipb.JoinType", JoinType_name, JoinType_value)
	proto.RegisterEnum("tipb.JoinExecType", JoinExecType_name, JoinExecType_value)
	proto.RegisterEnum("tipb.RuntimeFilterType", RuntimeFilterType_name, RuntimeFilterType_value)
	proto.RegisterEnum("tipb.RuntimeFilterMode", RuntimeFilterMode_name, RuntimeFilterMode_value)
	proto.RegisterEnum("tipb.WindowBoundType", WindowBoundType_name, WindowBoundType_value)
	proto.RegisterEnum("tipb.RangeCmpDataType", RangeCmpDataType_name, RangeCmpDataType_value)
	proto.RegisterEnum("tipb.WindowFrameType", WindowFrameType_name, WindowFrameType_value)
}
func (m *Executor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Executor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.Tp))
	if m.TblScan != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.TblScan.Size()))
		n1, err := m.TblScan.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.IdxScan != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.IdxScan.Size()))
		n2, err := m.IdxScan.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Selection != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Selection.Size()))
		n3, err := m.Selection.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Aggregation != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Aggregation.Size()))
		n4, err := m.Aggregation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.TopN != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.TopN.Size()))
		n5, err := m.TopN.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Limit != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Limit.Size()))
		n6, err := m.Limit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.ExchangeReceiver != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.ExchangeReceiver.Size()))
		n7, err := m.ExchangeReceiver.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Join != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Join.Size()))
		n8, err := m.Join.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.ExecutorId != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(len(*m.ExecutorId)))
		i += copy(dAtA[i:], *m.ExecutorId)
	}
	if m.Kill != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Kill.Size()))
		n9, err := m.Kill.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.ExchangeSender != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.ExchangeSender.Size()))
		n10, err := m.ExchangeSender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Projection != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Projection.Size()))
		n11, err := m.Projection.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.PartitionTableScan != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.PartitionTableScan.Size()))
		n12, err := m.PartitionTableScan.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Sort != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Sort.Size()))
		n13, err := m.Sort.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Window != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Window.Size()))
		n14, err := m.Window.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.FineGrainedShuffleStreamCount))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.FineGrainedShuffleBatchSize))
	if m.Expand != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Expand.Size()))
		n15, err := m.Expand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.Expand2 != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Expand2.Size()))
		n16, err := m.Expand2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExchangeSender) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeSender) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.Tp))
	if len(m.EncodedTaskMeta) > 0 {
		for _, b := range m.EncodedTaskMeta {
			dAtA[i] = 0x12
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.PartitionKeys) > 0 {
		for _, msg := range m.PartitionKeys {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Child != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Child.Size()))
		n17, err := m.Child.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if len(m.Types) > 0 {
		for _, msg := range m.Types {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AllFieldTypes) > 0 {
		for _, msg := range m.AllFieldTypes {
			dAtA[i] = 0x32
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x38
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.Compression))
	if len(m.UpstreamCteTaskMeta) > 0 {
		for _, msg := range m.UpstreamCteTaskMeta {
			dAtA[i] = 0x42
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EncodedBytesSlice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncodedBytesSlice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EncodedTasks) > 0 {
		for _, b := range m.EncodedTasks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExchangeReceiver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeReceiver) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EncodedTaskMeta) > 0 {
		for _, b := range m.EncodedTaskMeta {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.FieldTypes) > 0 {
		for _, msg := range m.FieldTypes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Tp != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.Tp))
	}
	if len(m.OriginalCtePrdocuerTaskMeta) > 0 {
		for _, b := range m.OriginalCtePrdocuerTaskMeta {
			dAtA[i] = 0x22
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ANNQueryInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ANNQueryInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.QueryType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.DistanceMetric))
	dAtA[i] = 0x18
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.TopK))
	dAtA[i] = 0x22
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(len(m.ColumnName)))
	i += copy(dAtA[i:], m.ColumnName)
	dAtA[i] = 0x28
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.ColumnId))
	if m.RefVecF32 != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(len(m.RefVecF32)))
		i += copy(dAtA[i:], m.RefVecF32)
	}
	dAtA[i] = 0x51
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxDistance))))
	i += 8
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.HnswEfSearch))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableScan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableScan) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.TableId))
	if len(m.Columns) > 0 {
		for _, msg := range m.Columns {
			dAtA[i] = 0x12
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x18
	i++
	if m.Desc {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if len(m.PrimaryColumnIds) > 0 {
		for _, num := range m.PrimaryColumnIds {
			dAtA[i] = 0x20
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x28
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.NextReadEngine))
	if len(m.Ranges) > 0 {
		for _, msg := range m.Ranges {
			dAtA[i] = 0x32
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PrimaryPrefixColumnIds) > 0 {
		for _, num := range m.PrimaryPrefixColumnIds {
			dAtA[i] = 0x38
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(num))
		}
	}
	if m.KeepOrder != nil {
		dAtA[i] = 0x40
		i++
		if *m.KeepOrder {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsFastScan != nil {
		dAtA[i] = 0x48
		i++
		if *m.IsFastScan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.PushedDownFilterConditions) > 0 {
		for _, msg := range m.PushedDownFilterConditions {
			dAtA[i] = 0x52
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RuntimeFilterList) > 0 {
		for _, msg := range m.RuntimeFilterList {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x60
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.MaxWaitTimeMs))
	if m.AnnQuery != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.AnnQuery.Size()))
		n18, err := m.AnnQuery.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PartitionTableScan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionTableScan) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.TableId))
	if len(m.Columns) > 0 {
		for _, msg := range m.Columns {
			dAtA[i] = 0x12
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x18
	i++
	if m.Desc {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if len(m.PrimaryColumnIds) > 0 {
		for _, num := range m.PrimaryColumnIds {
			dAtA[i] = 0x20
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(num))
		}
	}
	if len(m.PrimaryPrefixColumnIds) > 0 {
		for _, num := range m.PrimaryPrefixColumnIds {
			dAtA[i] = 0x28
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(num))
		}
	}
	if len(m.PartitionIds) > 0 {
		for _, num := range m.PartitionIds {
			dAtA[i] = 0x30
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(num))
		}
	}
	if m.IsFastScan != nil {
		dAtA[i] = 0x38
		i++
		if *m.IsFastScan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.PushedDownFilterConditions) > 0 {
		for _, msg := range m.PushedDownFilterConditions {
			dAtA[i] = 0x42
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RuntimeFilterList) > 0 {
		for _, msg := range m.RuntimeFilterList {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x50
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.MaxWaitTimeMs))
	if m.AnnQuery != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.AnnQuery.Size()))
		n19, err := m.AnnQuery.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Join) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Join) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.JoinType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.JoinExecType))
	if len(m.Children) > 0 {
		for _, msg := range m.Children {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x20
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.InnerIdx))
	if len(m.LeftJoinKeys) > 0 {
		for _, msg := range m.LeftJoinKeys {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RightJoinKeys) > 0 {
		for _, msg := range m.RightJoinKeys {
			dAtA[i] = 0x32
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ProbeTypes) > 0 {
		for _, msg := range m.ProbeTypes {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BuildTypes) > 0 {
		for _, msg := range m.BuildTypes {
			dAtA[i] = 0x42
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.LeftConditions) > 0 {
		for _, msg := range m.LeftConditions {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RightConditions) > 0 {
		for _, msg := range m.RightConditions {
			dAtA[i] = 0x52
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OtherConditions) > 0 {
		for _, msg := range m.OtherConditions {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OtherEqConditionsFromIn) > 0 {
		for _, msg := range m.OtherEqConditionsFromIn {
			dAtA[i] = 0x62
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsNullAwareSemiJoin != nil {
		dAtA[i] = 0x68
		i++
		if *m.IsNullAwareSemiJoin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.RuntimeFilterList) > 0 {
		for _, msg := range m.RuntimeFilterList {
			dAtA[i] = 0x72
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RuntimeFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuntimeFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.Id))
	if len(m.SourceExprList) > 0 {
		for _, msg := range m.SourceExprList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TargetExprList) > 0 {
		for _, msg := range m.TargetExprList {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(len(m.SourceExecutorId)))
	i += copy(dAtA[i:], m.SourceExecutorId)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(len(m.TargetExecutorId)))
	i += copy(dAtA[i:], m.TargetExecutorId)
	dAtA[i] = 0x30
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.RfType))
	dAtA[i] = 0x38
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.RfMode))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IndexScan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexScan) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.TableId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.IndexId))
	if len(m.Columns) > 0 {
		for _, msg := range m.Columns {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x20
	i++
	if m.Desc {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.Unique != nil {
		dAtA[i] = 0x28
		i++
		if *m.Unique {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.PrimaryColumnIds) > 0 {
		for _, num := range m.PrimaryColumnIds {
			dAtA[i] = 0x30
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Selection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Selection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for _, msg := range m.Conditions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RpnConditions) > 0 {
		for _, msg := range m.RpnConditions {
			dAtA[i] = 0x12
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Child != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Child.Size()))
		n20, err := m.Child.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Projection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Projection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Exprs) > 0 {
		for _, msg := range m.Exprs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RpnExprs) > 0 {
		for _, msg := range m.RpnExprs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Child != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Child.Size()))
		n21, err := m.Child.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Aggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Aggregation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupBy) > 0 {
		for _, msg := range m.GroupBy {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AggFunc) > 0 {
		for _, msg := range m.AggFunc {
			dAtA[i] = 0x12
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x18
	i++
	if m.Streamed {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if len(m.RpnGroupBy) > 0 {
		for _, msg := range m.RpnGroupBy {
			dAtA[i] = 0x22
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RpnAggFunc) > 0 {
		for _, msg := range m.RpnAggFunc {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Child != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Child.Size()))
		n22, err := m.Child.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopN) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopN) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderBy) > 0 {
		for _, msg := range m.OrderBy {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.Limit))
	if m.Child != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Child.Size()))
		n23, err := m.Child.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if len(m.PartitionBy) > 0 {
		for _, msg := range m.PartitionBy {
			dAtA[i] = 0x22
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Limit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Limit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.Limit))
	if m.Child != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Child.Size()))
		n24, err := m.Child.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if len(m.PartitionBy) > 0 {
		for _, msg := range m.PartitionBy {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Kill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Kill) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.ConnID))
	dAtA[i] = 0x10
	i++
	if m.Query {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExecutorExecutionSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutorExecutionSummary) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TimeProcessedNs != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TimeProcessedNs))
	}
	if m.NumProducedRows != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.NumProducedRows))
	}
	if m.NumIterations != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.NumIterations))
	}
	if m.ExecutorId != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(len(*m.ExecutorId)))
		i += copy(dAtA[i:], *m.ExecutorId)
	}
	if m.Concurrency != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.Concurrency))
	}
	if m.DetailInfo != nil {
		nn25, err := m.DetailInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn25
	}
	if m.RuConsumption != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(len(m.RuConsumption)))
		i += copy(dAtA[i:], m.RuConsumption)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExecutorExecutionSummary_TiflashScanContext) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TiflashScanContext != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.TiflashScanContext.Size()))
		n26, err := m.TiflashScanContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *TiFlashExecutionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TiFlashExecutionInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ExecutionSummaries) > 0 {
		for _, msg := range m.ExecutionSummaries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TiFlashScanContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TiFlashScanContext) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalDmfileScannedPacks != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalDmfileScannedPacks))
	}
	if m.TotalDmfileSkippedPacks != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalDmfileSkippedPacks))
	}
	if m.TotalDmfileScannedRows != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalDmfileScannedRows))
	}
	if m.TotalDmfileSkippedRows != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalDmfileSkippedRows))
	}
	if m.TotalDmfileRoughSetIndexLoadTimeMs != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalDmfileRoughSetIndexLoadTimeMs))
	}
	if m.TotalDmfileReadTimeMs != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalDmfileReadTimeMs))
	}
	if m.TotalCreateSnapshotTimeMs != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalCreateSnapshotTimeMs))
	}
	if m.TotalLocalRegionNum != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalLocalRegionNum))
	}
	if m.TotalRemoteRegionNum != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalRemoteRegionNum))
	}
	if m.TotalUserReadBytes != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalUserReadBytes))
	}
	if m.TotalLearnerReadMs != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalLearnerReadMs))
	}
	if m.TotalDisaggReadCacheHitSize != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalDisaggReadCacheHitSize))
	}
	if m.TotalDisaggReadCacheMissSize != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalDisaggReadCacheMissSize))
	}
	if m.TotalDmfileRoughSetIndexCheckTimeMs != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalDmfileRoughSetIndexCheckTimeMs))
	}
	if m.TotalVectorIdxLoadFromDisk != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalVectorIdxLoadFromDisk))
	}
	if m.TotalVectorIdxLoadFromCache != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalVectorIdxLoadFromCache))
	}
	if m.TotalVectorIdxLoadTimeMs != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalVectorIdxLoadTimeMs))
	}
	if m.TotalVectorIdxSearchTimeMs != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalVectorIdxSearchTimeMs))
	}
	if m.TotalVectorIdxSearchVisitedNodes != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalVectorIdxSearchVisitedNodes))
	}
	if m.TotalVectorIdxSearchDiscardedNodes != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalVectorIdxSearchDiscardedNodes))
	}
	if m.TotalVectorIdxReadVecTimeMs != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalVectorIdxReadVecTimeMs))
	}
	if m.TotalVectorIdxReadOthersTimeMs != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalVectorIdxReadOthersTimeMs))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Sort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sort) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ByItems) > 0 {
		for _, msg := range m.ByItems {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsPartialSort != nil {
		dAtA[i] = 0x10
		i++
		if *m.IsPartialSort {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Child != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Child.Size()))
		n27, err := m.Child.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WindowFrameBound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WindowFrameBound) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x10
	i++
	if m.Unbounded {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.Offset != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.Offset))
	}
	if len(m.CalcFuncs) > 0 {
		for _, msg := range m.CalcFuncs {
			dAtA[i] = 0x22
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.FrameRange != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.FrameRange.Size()))
		n28, err := m.FrameRange.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.CmpDataType != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.CmpDataType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WindowFrame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WindowFrame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintExecutor(dAtA, i, uint64(m.Type))
	if m.Start != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Start.Size()))
		n29, err := m.Start.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.End != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.End.Size()))
		n30, err := m.End.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Window) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Window) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FuncDesc) > 0 {
		for _, msg := range m.FuncDesc {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PartitionBy) > 0 {
		for _, msg := range m.PartitionBy {
			dAtA[i] = 0x12
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OrderBy) > 0 {
		for _, msg := range m.OrderBy {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Frame != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Frame.Size()))
		n31, err := m.Frame.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.Child != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Child.Size()))
		n32, err := m.Child.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GroupingExpr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupingExpr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupingExpr) > 0 {
		for _, msg := range m.GroupingExpr {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GroupingSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupingSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupingExprs) > 0 {
		for _, msg := range m.GroupingExprs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Expand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupingSets) > 0 {
		for _, msg := range m.GroupingSets {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Child != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Child.Size()))
		n33, err := m.Child.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.Version != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(*m.Version))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExprSlice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExprSlice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Exprs) > 0 {
		for _, msg := range m.Exprs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Expand2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expand2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProjExprs) > 0 {
		for _, msg := range m.ProjExprs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExecutor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GeneratedOutputNames) > 0 {
		for _, s := range m.GeneratedOutputNames {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Child != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExecutor(dAtA, i, uint64(m.Child.Size()))
		n34, err := m.Child.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintExecutor(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Executor) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.Tp))
	if m.TblScan != nil {
		l = m.TblScan.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.IdxScan != nil {
		l = m.IdxScan.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Selection != nil {
		l = m.Selection.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Aggregation != nil {
		l = m.Aggregation.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.TopN != nil {
		l = m.TopN.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Limit != nil {
		l = m.Limit.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.ExchangeReceiver != nil {
		l = m.ExchangeReceiver.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Join != nil {
		l = m.Join.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.ExecutorId != nil {
		l = len(*m.ExecutorId)
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Kill != nil {
		l = m.Kill.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.ExchangeSender != nil {
		l = m.ExchangeSender.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Projection != nil {
		l = m.Projection.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.PartitionTableScan != nil {
		l = m.PartitionTableScan.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Sort != nil {
		l = m.Sort.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Window != nil {
		l = m.Window.Size()
		n += 2 + l + sovExecutor(uint64(l))
	}
	n += 2 + sovExecutor(uint64(m.FineGrainedShuffleStreamCount))
	n += 2 + sovExecutor(uint64(m.FineGrainedShuffleBatchSize))
	if m.Expand != nil {
		l = m.Expand.Size()
		n += 2 + l + sovExecutor(uint64(l))
	}
	if m.Expand2 != nil {
		l = m.Expand2.Size()
		n += 2 + l + sovExecutor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExchangeSender) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.Tp))
	if len(m.EncodedTaskMeta) > 0 {
		for _, b := range m.EncodedTaskMeta {
			l = len(b)
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.PartitionKeys) > 0 {
		for _, e := range m.PartitionKeys {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.Child != nil {
		l = m.Child.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if len(m.Types) > 0 {
		for _, e := range m.Types {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.AllFieldTypes) > 0 {
		for _, e := range m.AllFieldTypes {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	n += 1 + sovExecutor(uint64(m.Compression))
	if len(m.UpstreamCteTaskMeta) > 0 {
		for _, e := range m.UpstreamCteTaskMeta {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EncodedBytesSlice) Size() (n int) {
	var l int
	_ = l
	if len(m.EncodedTasks) > 0 {
		for _, b := range m.EncodedTasks {
			l = len(b)
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExchangeReceiver) Size() (n int) {
	var l int
	_ = l
	if len(m.EncodedTaskMeta) > 0 {
		for _, b := range m.EncodedTaskMeta {
			l = len(b)
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.FieldTypes) > 0 {
		for _, e := range m.FieldTypes {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.Tp != nil {
		n += 1 + sovExecutor(uint64(*m.Tp))
	}
	if len(m.OriginalCtePrdocuerTaskMeta) > 0 {
		for _, b := range m.OriginalCtePrdocuerTaskMeta {
			l = len(b)
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ANNQueryInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.QueryType))
	n += 1 + sovExecutor(uint64(m.DistanceMetric))
	n += 1 + sovExecutor(uint64(m.TopK))
	l = len(m.ColumnName)
	n += 1 + l + sovExecutor(uint64(l))
	n += 1 + sovExecutor(uint64(m.ColumnId))
	if m.RefVecF32 != nil {
		l = len(m.RefVecF32)
		n += 1 + l + sovExecutor(uint64(l))
	}
	n += 9
	n += 2 + sovExecutor(uint64(m.HnswEfSearch))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableScan) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.TableId))
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	n += 2
	if len(m.PrimaryColumnIds) > 0 {
		for _, e := range m.PrimaryColumnIds {
			n += 1 + sovExecutor(uint64(e))
		}
	}
	n += 1 + sovExecutor(uint64(m.NextReadEngine))
	if len(m.Ranges) > 0 {
		for _, e := range m.Ranges {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.PrimaryPrefixColumnIds) > 0 {
		for _, e := range m.PrimaryPrefixColumnIds {
			n += 1 + sovExecutor(uint64(e))
		}
	}
	if m.KeepOrder != nil {
		n += 2
	}
	if m.IsFastScan != nil {
		n += 2
	}
	if len(m.PushedDownFilterConditions) > 0 {
		for _, e := range m.PushedDownFilterConditions {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.RuntimeFilterList) > 0 {
		for _, e := range m.RuntimeFilterList {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	n += 1 + sovExecutor(uint64(m.MaxWaitTimeMs))
	if m.AnnQuery != nil {
		l = m.AnnQuery.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PartitionTableScan) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.TableId))
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	n += 2
	if len(m.PrimaryColumnIds) > 0 {
		for _, e := range m.PrimaryColumnIds {
			n += 1 + sovExecutor(uint64(e))
		}
	}
	if len(m.PrimaryPrefixColumnIds) > 0 {
		for _, e := range m.PrimaryPrefixColumnIds {
			n += 1 + sovExecutor(uint64(e))
		}
	}
	if len(m.PartitionIds) > 0 {
		for _, e := range m.PartitionIds {
			n += 1 + sovExecutor(uint64(e))
		}
	}
	if m.IsFastScan != nil {
		n += 2
	}
	if len(m.PushedDownFilterConditions) > 0 {
		for _, e := range m.PushedDownFilterConditions {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.RuntimeFilterList) > 0 {
		for _, e := range m.RuntimeFilterList {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	n += 1 + sovExecutor(uint64(m.MaxWaitTimeMs))
	if m.AnnQuery != nil {
		l = m.AnnQuery.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Join) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.JoinType))
	n += 1 + sovExecutor(uint64(m.JoinExecType))
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	n += 1 + sovExecutor(uint64(m.InnerIdx))
	if len(m.LeftJoinKeys) > 0 {
		for _, e := range m.LeftJoinKeys {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.RightJoinKeys) > 0 {
		for _, e := range m.RightJoinKeys {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.ProbeTypes) > 0 {
		for _, e := range m.ProbeTypes {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.BuildTypes) > 0 {
		for _, e := range m.BuildTypes {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.LeftConditions) > 0 {
		for _, e := range m.LeftConditions {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.RightConditions) > 0 {
		for _, e := range m.RightConditions {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.OtherConditions) > 0 {
		for _, e := range m.OtherConditions {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.OtherEqConditionsFromIn) > 0 {
		for _, e := range m.OtherEqConditionsFromIn {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.IsNullAwareSemiJoin != nil {
		n += 2
	}
	if len(m.RuntimeFilterList) > 0 {
		for _, e := range m.RuntimeFilterList {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RuntimeFilter) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.Id))
	if len(m.SourceExprList) > 0 {
		for _, e := range m.SourceExprList {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.TargetExprList) > 0 {
		for _, e := range m.TargetExprList {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	l = len(m.SourceExecutorId)
	n += 1 + l + sovExecutor(uint64(l))
	l = len(m.TargetExecutorId)
	n += 1 + l + sovExecutor(uint64(l))
	n += 1 + sovExecutor(uint64(m.RfType))
	n += 1 + sovExecutor(uint64(m.RfMode))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexScan) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.TableId))
	n += 1 + sovExecutor(uint64(m.IndexId))
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	n += 2
	if m.Unique != nil {
		n += 2
	}
	if len(m.PrimaryColumnIds) > 0 {
		for _, e := range m.PrimaryColumnIds {
			n += 1 + sovExecutor(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Selection) Size() (n int) {
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.RpnConditions) > 0 {
		for _, e := range m.RpnConditions {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.Child != nil {
		l = m.Child.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Projection) Size() (n int) {
	var l int
	_ = l
	if len(m.Exprs) > 0 {
		for _, e := range m.Exprs {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.RpnExprs) > 0 {
		for _, e := range m.RpnExprs {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.Child != nil {
		l = m.Child.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Aggregation) Size() (n int) {
	var l int
	_ = l
	if len(m.GroupBy) > 0 {
		for _, e := range m.GroupBy {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.AggFunc) > 0 {
		for _, e := range m.AggFunc {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	n += 2
	if len(m.RpnGroupBy) > 0 {
		for _, e := range m.RpnGroupBy {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.RpnAggFunc) > 0 {
		for _, e := range m.RpnAggFunc {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.Child != nil {
		l = m.Child.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopN) Size() (n int) {
	var l int
	_ = l
	if len(m.OrderBy) > 0 {
		for _, e := range m.OrderBy {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	n += 1 + sovExecutor(uint64(m.Limit))
	if m.Child != nil {
		l = m.Child.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if len(m.PartitionBy) > 0 {
		for _, e := range m.PartitionBy {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Limit) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.Limit))
	if m.Child != nil {
		l = m.Child.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if len(m.PartitionBy) > 0 {
		for _, e := range m.PartitionBy {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Kill) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.ConnID))
	n += 2
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExecutorExecutionSummary) Size() (n int) {
	var l int
	_ = l
	if m.TimeProcessedNs != nil {
		n += 1 + sovExecutor(uint64(*m.TimeProcessedNs))
	}
	if m.NumProducedRows != nil {
		n += 1 + sovExecutor(uint64(*m.NumProducedRows))
	}
	if m.NumIterations != nil {
		n += 1 + sovExecutor(uint64(*m.NumIterations))
	}
	if m.ExecutorId != nil {
		l = len(*m.ExecutorId)
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Concurrency != nil {
		n += 1 + sovExecutor(uint64(*m.Concurrency))
	}
	if m.DetailInfo != nil {
		n += m.DetailInfo.Size()
	}
	if m.RuConsumption != nil {
		l = len(m.RuConsumption)
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExecutorExecutionSummary_TiflashScanContext) Size() (n int) {
	var l int
	_ = l
	if m.TiflashScanContext != nil {
		l = m.TiflashScanContext.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	return n
}
func (m *TiFlashExecutionInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.ExecutionSummaries) > 0 {
		for _, e := range m.ExecutionSummaries {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TiFlashScanContext) Size() (n int) {
	var l int
	_ = l
	if m.TotalDmfileScannedPacks != nil {
		n += 1 + sovExecutor(uint64(*m.TotalDmfileScannedPacks))
	}
	if m.TotalDmfileSkippedPacks != nil {
		n += 1 + sovExecutor(uint64(*m.TotalDmfileSkippedPacks))
	}
	if m.TotalDmfileScannedRows != nil {
		n += 1 + sovExecutor(uint64(*m.TotalDmfileScannedRows))
	}
	if m.TotalDmfileSkippedRows != nil {
		n += 1 + sovExecutor(uint64(*m.TotalDmfileSkippedRows))
	}
	if m.TotalDmfileRoughSetIndexLoadTimeMs != nil {
		n += 1 + sovExecutor(uint64(*m.TotalDmfileRoughSetIndexLoadTimeMs))
	}
	if m.TotalDmfileReadTimeMs != nil {
		n += 1 + sovExecutor(uint64(*m.TotalDmfileReadTimeMs))
	}
	if m.TotalCreateSnapshotTimeMs != nil {
		n += 1 + sovExecutor(uint64(*m.TotalCreateSnapshotTimeMs))
	}
	if m.TotalLocalRegionNum != nil {
		n += 1 + sovExecutor(uint64(*m.TotalLocalRegionNum))
	}
	if m.TotalRemoteRegionNum != nil {
		n += 1 + sovExecutor(uint64(*m.TotalRemoteRegionNum))
	}
	if m.TotalUserReadBytes != nil {
		n += 1 + sovExecutor(uint64(*m.TotalUserReadBytes))
	}
	if m.TotalLearnerReadMs != nil {
		n += 1 + sovExecutor(uint64(*m.TotalLearnerReadMs))
	}
	if m.TotalDisaggReadCacheHitSize != nil {
		n += 1 + sovExecutor(uint64(*m.TotalDisaggReadCacheHitSize))
	}
	if m.TotalDisaggReadCacheMissSize != nil {
		n += 1 + sovExecutor(uint64(*m.TotalDisaggReadCacheMissSize))
	}
	if m.TotalDmfileRoughSetIndexCheckTimeMs != nil {
		n += 1 + sovExecutor(uint64(*m.TotalDmfileRoughSetIndexCheckTimeMs))
	}
	if m.TotalVectorIdxLoadFromDisk != nil {
		n += 2 + sovExecutor(uint64(*m.TotalVectorIdxLoadFromDisk))
	}
	if m.TotalVectorIdxLoadFromCache != nil {
		n += 2 + sovExecutor(uint64(*m.TotalVectorIdxLoadFromCache))
	}
	if m.TotalVectorIdxLoadTimeMs != nil {
		n += 2 + sovExecutor(uint64(*m.TotalVectorIdxLoadTimeMs))
	}
	if m.TotalVectorIdxSearchTimeMs != nil {
		n += 2 + sovExecutor(uint64(*m.TotalVectorIdxSearchTimeMs))
	}
	if m.TotalVectorIdxSearchVisitedNodes != nil {
		n += 2 + sovExecutor(uint64(*m.TotalVectorIdxSearchVisitedNodes))
	}
	if m.TotalVectorIdxSearchDiscardedNodes != nil {
		n += 2 + sovExecutor(uint64(*m.TotalVectorIdxSearchDiscardedNodes))
	}
	if m.TotalVectorIdxReadVecTimeMs != nil {
		n += 2 + sovExecutor(uint64(*m.TotalVectorIdxReadVecTimeMs))
	}
	if m.TotalVectorIdxReadOthersTimeMs != nil {
		n += 2 + sovExecutor(uint64(*m.TotalVectorIdxReadOthersTimeMs))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Sort) Size() (n int) {
	var l int
	_ = l
	if len(m.ByItems) > 0 {
		for _, e := range m.ByItems {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.IsPartialSort != nil {
		n += 2
	}
	if m.Child != nil {
		l = m.Child.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WindowFrameBound) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.Type))
	n += 2
	if m.Offset != nil {
		n += 1 + sovExecutor(uint64(*m.Offset))
	}
	if len(m.CalcFuncs) > 0 {
		for _, e := range m.CalcFuncs {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.FrameRange != nil {
		l = m.FrameRange.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.CmpDataType != nil {
		n += 1 + sovExecutor(uint64(*m.CmpDataType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WindowFrame) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.Type))
	if m.Start != nil {
		l = m.Start.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.End != nil {
		l = m.End.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Window) Size() (n int) {
	var l int
	_ = l
	if len(m.FuncDesc) > 0 {
		for _, e := range m.FuncDesc {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.PartitionBy) > 0 {
		for _, e := range m.PartitionBy {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.OrderBy) > 0 {
		for _, e := range m.OrderBy {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.Frame != nil {
		l = m.Frame.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Child != nil {
		l = m.Child.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupingExpr) Size() (n int) {
	var l int
	_ = l
	if len(m.GroupingExpr) > 0 {
		for _, e := range m.GroupingExpr {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupingSet) Size() (n int) {
	var l int
	_ = l
	if len(m.GroupingExprs) > 0 {
		for _, e := range m.GroupingExprs {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Expand) Size() (n int) {
	var l int
	_ = l
	if len(m.GroupingSets) > 0 {
		for _, e := range m.GroupingSets {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.Child != nil {
		l = m.Child.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Version != nil {
		n += 1 + sovExecutor(uint64(*m.Version))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExprSlice) Size() (n int) {
	var l int
	_ = l
	if len(m.Exprs) > 0 {
		for _, e := range m.Exprs {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Expand2) Size() (n int) {
	var l int
	_ = l
	if len(m.ProjExprs) > 0 {
		for _, e := range m.ProjExprs {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.GeneratedOutputNames) > 0 {
		for _, s := range m.GeneratedOutputNames {
			l = len(s)
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.Child != nil {
		l = m.Child.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovExecutor(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExecutor(x uint64) (n int) {
	return sovExecutor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Executor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Executor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Executor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= (ExecType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TblScan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TblScan == nil {
				m.TblScan = &TableScan{}
			}
			if err := m.TblScan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdxScan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdxScan == nil {
				m.IdxScan = &IndexScan{}
			}
			if err := m.IdxScan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Selection == nil {
				m.Selection = &Selection{}
			}
			if err := m.Selection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Aggregation == nil {
				m.Aggregation = &Aggregation{}
			}
			if err := m.Aggregation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopN", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopN == nil {
				m.TopN = &TopN{}
			}
			if err := m.TopN.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Limit == nil {
				m.Limit = &Limit{}
			}
			if err := m.Limit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExchangeReceiver == nil {
				m.ExchangeReceiver = &ExchangeReceiver{}
			}
			if err := m.ExchangeReceiver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Join", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Join == nil {
				m.Join = &Join{}
			}
			if err := m.Join.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ExecutorId = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kill == nil {
				m.Kill = &Kill{}
			}
			if err := m.Kill.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeSender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExchangeSender == nil {
				m.ExchangeSender = &ExchangeSender{}
			}
			if err := m.ExchangeSender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Projection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Projection == nil {
				m.Projection = &Projection{}
			}
			if err := m.Projection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionTableScan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PartitionTableScan == nil {
				m.PartitionTableScan = &PartitionTableScan{}
			}
			if err := m.PartitionTableScan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sort == nil {
				m.Sort = &Sort{}
			}
			if err := m.Sort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Window", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Window == nil {
				m.Window = &Window{}
			}
			if err := m.Window.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FineGrainedShuffleStreamCount", wireType)
			}
			m.FineGrainedShuffleStreamCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FineGrainedShuffleStreamCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FineGrainedShuffleBatchSize", wireType)
			}
			m.FineGrainedShuffleBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FineGrainedShuffleBatchSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expand == nil {
				m.Expand = &Expand{}
			}
			if err := m.Expand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expand2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expand2 == nil {
				m.Expand2 = &Expand2{}
			}
			if err := m.Expand2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeSender) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeSender: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeSender: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= (ExchangeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedTaskMeta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedTaskMeta = append(m.EncodedTaskMeta, make([]byte, postIndex-iNdEx))
			copy(m.EncodedTaskMeta[len(m.EncodedTaskMeta)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartitionKeys = append(m.PartitionKeys, &Expr{})
			if err := m.PartitionKeys[len(m.PartitionKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &Executor{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Types = append(m.Types, &FieldType{})
			if err := m.Types[len(m.Types)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllFieldTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllFieldTypes = append(m.AllFieldTypes, &FieldType{})
			if err := m.AllFieldTypes[len(m.AllFieldTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compression", wireType)
			}
			m.Compression = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Compression |= (CompressionMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamCteTaskMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpstreamCteTaskMeta = append(m.UpstreamCteTaskMeta, &EncodedBytesSlice{})
			if err := m.UpstreamCteTaskMeta[len(m.UpstreamCteTaskMeta)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncodedBytesSlice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncodedBytesSlice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncodedBytesSlice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedTasks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedTasks = append(m.EncodedTasks, make([]byte, postIndex-iNdEx))
			copy(m.EncodedTasks[len(m.EncodedTasks)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeReceiver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeReceiver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeReceiver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedTaskMeta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedTaskMeta = append(m.EncodedTaskMeta, make([]byte, postIndex-iNdEx))
			copy(m.EncodedTaskMeta[len(m.EncodedTaskMeta)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldTypes = append(m.FieldTypes, &FieldType{})
			if err := m.FieldTypes[len(m.FieldTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			var v ExchangeType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (ExchangeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tp = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalCtePrdocuerTaskMeta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalCtePrdocuerTaskMeta = append(m.OriginalCtePrdocuerTaskMeta, make([]byte, postIndex-iNdEx))
			copy(m.OriginalCtePrdocuerTaskMeta[len(m.OriginalCtePrdocuerTaskMeta)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ANNQueryInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ANNQueryInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ANNQueryInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryType", wireType)
			}
			m.QueryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryType |= (ANNQueryType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistanceMetric", wireType)
			}
			m.DistanceMetric = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistanceMetric |= (ANNQueryDistanceMetric(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopK", wireType)
			}
			m.TopK = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopK |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnId", wireType)
			}
			m.ColumnId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefVecF32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefVecF32 = append(m.RefVecF32[:0], dAtA[iNdEx:postIndex]...)
			if m.RefVecF32 == nil {
				m.RefVecF32 = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDistance", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxDistance = float64(math.Float64frombits(v))
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HnswEfSearch", wireType)
			}
			m.HnswEfSearch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HnswEfSearch |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableScan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableScan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableScan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			m.TableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &ColumnInfo{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Desc = bool(v != 0)
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PrimaryColumnIds = append(m.PrimaryColumnIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExecutor
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExecutor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PrimaryColumnIds = append(m.PrimaryColumnIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryColumnIds", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextReadEngine", wireType)
			}
			m.NextReadEngine = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextReadEngine |= (EngineType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ranges = append(m.Ranges, KeyRange{})
			if err := m.Ranges[len(m.Ranges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PrimaryPrefixColumnIds = append(m.PrimaryPrefixColumnIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExecutor
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExecutor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PrimaryPrefixColumnIds = append(m.PrimaryPrefixColumnIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryPrefixColumnIds", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepOrder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.KeepOrder = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFastScan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsFastScan = &b
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushedDownFilterConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushedDownFilterConditions = append(m.PushedDownFilterConditions, &Expr{})
			if err := m.PushedDownFilterConditions[len(m.PushedDownFilterConditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeFilterList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuntimeFilterList = append(m.RuntimeFilterList, &RuntimeFilter{})
			if err := m.RuntimeFilterList[len(m.RuntimeFilterList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxWaitTimeMs", wireType)
			}
			m.MaxWaitTimeMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxWaitTimeMs |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AnnQuery == nil {
				m.AnnQuery = &ANNQueryInfo{}
			}
			if err := m.AnnQuery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionTableScan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionTableScan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionTableScan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			m.TableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &ColumnInfo{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Desc = bool(v != 0)
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PrimaryColumnIds = append(m.PrimaryColumnIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExecutor
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExecutor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PrimaryColumnIds = append(m.PrimaryColumnIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryColumnIds", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PrimaryPrefixColumnIds = append(m.PrimaryPrefixColumnIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExecutor
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExecutor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PrimaryPrefixColumnIds = append(m.PrimaryPrefixColumnIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryPrefixColumnIds", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PartitionIds = append(m.PartitionIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExecutor
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExecutor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PartitionIds = append(m.PartitionIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionIds", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFastScan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsFastScan = &b
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushedDownFilterConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushedDownFilterConditions = append(m.PushedDownFilterConditions, &Expr{})
			if err := m.PushedDownFilterConditions[len(m.PushedDownFilterConditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeFilterList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuntimeFilterList = append(m.RuntimeFilterList, &RuntimeFilter{})
			if err := m.RuntimeFilterList[len(m.RuntimeFilterList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxWaitTimeMs", wireType)
			}
			m.MaxWaitTimeMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxWaitTimeMs |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AnnQuery == nil {
				m.AnnQuery = &ANNQueryInfo{}
			}
			if err := m.AnnQuery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Join) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Join: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Join: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinType", wireType)
			}
			m.JoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinType |= (JoinType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinExecType", wireType)
			}
			m.JoinExecType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinExecType |= (JoinExecType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &Executor{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerIdx", wireType)
			}
			m.InnerIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InnerIdx |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftJoinKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeftJoinKeys = append(m.LeftJoinKeys, &Expr{})
			if err := m.LeftJoinKeys[len(m.LeftJoinKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightJoinKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightJoinKeys = append(m.RightJoinKeys, &Expr{})
			if err := m.RightJoinKeys[len(m.RightJoinKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProbeTypes = append(m.ProbeTypes, &FieldType{})
			if err := m.ProbeTypes[len(m.ProbeTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildTypes = append(m.BuildTypes, &FieldType{})
			if err := m.BuildTypes[len(m.BuildTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeftConditions = append(m.LeftConditions, &Expr{})
			if err := m.LeftConditions[len(m.LeftConditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightConditions = append(m.RightConditions, &Expr{})
			if err := m.RightConditions[len(m.RightConditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherConditions = append(m.OtherConditions, &Expr{})
			if err := m.OtherConditions[len(m.OtherConditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherEqConditionsFromIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherEqConditionsFromIn = append(m.OtherEqConditionsFromIn, &Expr{})
			if err := m.OtherEqConditionsFromIn[len(m.OtherEqConditionsFromIn)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNullAwareSemiJoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsNullAwareSemiJoin = &b
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeFilterList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuntimeFilterList = append(m.RuntimeFilterList, &RuntimeFilter{})
			if err := m.RuntimeFilterList[len(m.RuntimeFilterList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuntimeFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuntimeFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuntimeFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceExprList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceExprList = append(m.SourceExprList, &Expr{})
			if err := m.SourceExprList[len(m.SourceExprList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetExprList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetExprList = append(m.TargetExprList, &Expr{})
			if err := m.TargetExprList[len(m.TargetExprList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceExecutorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceExecutorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetExecutorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetExecutorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RfType", wireType)
			}
			m.RfType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RfType |= (RuntimeFilterType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RfMode", wireType)
			}
			m.RfMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RfMode |= (RuntimeFilterMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexScan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexScan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexScan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			m.TableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexId", wireType)
			}
			m.IndexId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &ColumnInfo{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Desc = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unique", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Unique = &b
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PrimaryColumnIds = append(m.PrimaryColumnIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExecutor
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExecutor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PrimaryColumnIds = append(m.PrimaryColumnIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryColumnIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Selection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Selection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Selection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, &Expr{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpnConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpnConditions = append(m.RpnConditions, &RpnExpr{})
			if err := m.RpnConditions[len(m.RpnConditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &Executor{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Projection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Projection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Projection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exprs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exprs = append(m.Exprs, &Expr{})
			if err := m.Exprs[len(m.Exprs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpnExprs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpnExprs = append(m.RpnExprs, &RpnExpr{})
			if err := m.RpnExprs[len(m.RpnExprs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &Executor{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Aggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Aggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Aggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupBy = append(m.GroupBy, &Expr{})
			if err := m.GroupBy[len(m.GroupBy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggFunc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggFunc = append(m.AggFunc, &Expr{})
			if err := m.AggFunc[len(m.AggFunc)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streamed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Streamed = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpnGroupBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpnGroupBy = append(m.RpnGroupBy, &RpnExpr{})
			if err := m.RpnGroupBy[len(m.RpnGroupBy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpnAggFunc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpnAggFunc = append(m.RpnAggFunc, &RpnExpr{})
			if err := m.RpnAggFunc[len(m.RpnAggFunc)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &Executor{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopN) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopN: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopN: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = append(m.OrderBy, &ByItem{})
			if err := m.OrderBy[len(m.OrderBy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &Executor{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartitionBy = append(m.PartitionBy, &ByItem{})
			if err := m.PartitionBy[len(m.PartitionBy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Limit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Limit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Limit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &Executor{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartitionBy = append(m.PartitionBy, &ByItem{})
			if err := m.PartitionBy[len(m.PartitionBy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Kill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Kill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Kill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnID", wireType)
			}
			m.ConnID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Query = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutorExecutionSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutorExecutionSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutorExecutionSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeProcessedNs", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeProcessedNs = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumProducedRows", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumProducedRows = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumIterations", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumIterations = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ExecutorId = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Concurrency", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Concurrency = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TiflashScanContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TiFlashScanContext{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetailInfo = &ExecutorExecutionSummary_TiflashScanContext{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuConsumption", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuConsumption = append(m.RuConsumption[:0], dAtA[iNdEx:postIndex]...)
			if m.RuConsumption == nil {
				m.RuConsumption = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TiFlashExecutionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TiFlashExecutionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TiFlashExecutionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionSummaries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionSummaries = append(m.ExecutionSummaries, &ExecutorExecutionSummary{})
			if err := m.ExecutionSummaries[len(m.ExecutionSummaries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TiFlashScanContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TiFlashScanContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TiFlashScanContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDmfileScannedPacks", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalDmfileScannedPacks = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDmfileSkippedPacks", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalDmfileSkippedPacks = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDmfileScannedRows", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalDmfileScannedRows = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDmfileSkippedRows", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalDmfileSkippedRows = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDmfileRoughSetIndexLoadTimeMs", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalDmfileRoughSetIndexLoadTimeMs = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDmfileReadTimeMs", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalDmfileReadTimeMs = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCreateSnapshotTimeMs", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalCreateSnapshotTimeMs = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLocalRegionNum", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalLocalRegionNum = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRemoteRegionNum", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalRemoteRegionNum = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUserReadBytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalUserReadBytes = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLearnerReadMs", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalLearnerReadMs = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDisaggReadCacheHitSize", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalDisaggReadCacheHitSize = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDisaggReadCacheMissSize", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalDisaggReadCacheMissSize = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDmfileRoughSetIndexCheckTimeMs", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalDmfileRoughSetIndexCheckTimeMs = &v
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVectorIdxLoadFromDisk", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalVectorIdxLoadFromDisk = &v
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVectorIdxLoadFromCache", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalVectorIdxLoadFromCache = &v
		case 103:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVectorIdxLoadTimeMs", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalVectorIdxLoadTimeMs = &v
		case 104:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVectorIdxSearchTimeMs", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalVectorIdxSearchTimeMs = &v
		case 105:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVectorIdxSearchVisitedNodes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalVectorIdxSearchVisitedNodes = &v
		case 106:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVectorIdxSearchDiscardedNodes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalVectorIdxSearchDiscardedNodes = &v
		case 107:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVectorIdxReadVecTimeMs", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalVectorIdxReadVecTimeMs = &v
		case 108:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVectorIdxReadOthersTimeMs", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalVectorIdxReadOthersTimeMs = &v
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ByItems = append(m.ByItems, &ByItem{})
			if err := m.ByItems[len(m.ByItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPartialSort", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsPartialSort = &b
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &Executor{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WindowFrameBound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WindowFrameBound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WindowFrameBound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (WindowBoundType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unbounded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unbounded = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Offset = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalcFuncs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CalcFuncs = append(m.CalcFuncs, &Expr{})
			if err := m.CalcFuncs[len(m.CalcFuncs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FrameRange == nil {
				m.FrameRange = &Expr{}
			}
			if err := m.FrameRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmpDataType", wireType)
			}
			var v RangeCmpDataType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (RangeCmpDataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CmpDataType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WindowFrame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WindowFrame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WindowFrame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (WindowFrameType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Start == nil {
				m.Start = &WindowFrameBound{}
			}
			if err := m.Start.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.End == nil {
				m.End = &WindowFrameBound{}
			}
			if err := m.End.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Window) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Window: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Window: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuncDesc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FuncDesc = append(m.FuncDesc, &Expr{})
			if err := m.FuncDesc[len(m.FuncDesc)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartitionBy = append(m.PartitionBy, &ByItem{})
			if err := m.PartitionBy[len(m.PartitionBy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = append(m.OrderBy, &ByItem{})
			if err := m.OrderBy[len(m.OrderBy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Frame == nil {
				m.Frame = &WindowFrame{}
			}
			if err := m.Frame.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &Executor{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupingExpr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupingExpr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupingExpr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupingExpr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupingExpr = append(m.GroupingExpr, &Expr{})
			if err := m.GroupingExpr[len(m.GroupingExpr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupingSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupingSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupingSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupingExprs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupingExprs = append(m.GroupingExprs, &GroupingExpr{})
			if err := m.GroupingExprs[len(m.GroupingExprs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Expand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Expand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Expand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupingSets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupingSets = append(m.GroupingSets, &GroupingSet{})
			if err := m.GroupingSets[len(m.GroupingSets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &Executor{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExprSlice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExprSlice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExprSlice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exprs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exprs = append(m.Exprs, &Expr{})
			if err := m.Exprs[len(m.Exprs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Expand2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Expand2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Expand2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjExprs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjExprs = append(m.ProjExprs, &ExprSlice{})
			if err := m.ProjExprs[len(m.ProjExprs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeneratedOutputNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GeneratedOutputNames = append(m.GeneratedOutputNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &Executor{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExecutor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthExecutor
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExecutor(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExecutor = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExecutor   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("executor.proto", fileDescriptorExecutor) }

var fileDescriptorExecutor = []byte{
	// 3768 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xcd, 0x73, 0x1b, 0xc7,
	0x72, 0x27, 0x40, 0x7c, 0x36, 0x40, 0x70, 0x39, 0xa2, 0x24, 0x48, 0xb6, 0x24, 0x1a, 0x96, 0x22,
	0x3d, 0xc4, 0x96, 0x25, 0x4a, 0xef, 0x3d, 0xfb, 0xbd, 0x7a, 0xb1, 0xf9, 0x29, 0x41, 0x22, 0x41,
	0x66, 0xc1, 0x27, 0x27, 0xa7, 0xad, 0xe5, 0xee, 0x00, 0x18, 0x71, 0xbf, 0xb4, 0x33, 0x2b, 0x92,
	0x3e, 0xbd, 0x4b, 0xfe, 0x81, 0xa4, 0x92, 0xca, 0x2d, 0x55, 0x39, 0xa7, 0xf2, 0x4f, 0xa4, 0x52,
	0xf5, 0x8e, 0xb9, 0xe6, 0x1d, 0x12, 0x97, 0x73, 0xca, 0x3d, 0xa7, 0x9c, 0x52, 0xd3, 0x33, 0xbb,
	0x58, 0x10, 0x20, 0x2d, 0x57, 0x72, 0xc8, 0x89, 0xd8, 0xee, 0x5f, 0xf7, 0xf4, 0xf4, 0xf4, 0xcc,
	0x74, 0xf7, 0x10, 0x5a, 0xf4, 0x8c, 0x3a, 0x89, 0x08, 0xe3, 0xc7, 0x51, 0x1c, 0x8a, 0x90, 0x94,
	0x04, 0x8b, 0x8e, 0x6f, 0x1b, 0xf4, 0x2c, 0x8a, 0x29, 0xe7, 0x2c, 0x0c, 0x14, 0xfd, 0x76, 0x93,
	0x3b, 0x63, 0xea, 0xdb, 0xfa, 0x6b, 0x75, 0x14, 0x8e, 0x42, 0xfc, 0xf9, 0x85, 0xfc, 0xa5, 0xa8,
	0x9d, 0x7f, 0xaa, 0x42, 0x6d, 0x47, 0xab, 0x23, 0xf7, 0xa1, 0x28, 0xa2, 0x76, 0x61, 0xad, 0xf0,
	0xa8, 0xb5, 0xde, 0x7a, 0x2c, 0xb5, 0x3e, 0x96, 0xbc, 0xa3, 0xf3, 0x88, 0x6e, 0x96, 0x7e, 0xff,
	0x6f, 0xf7, 0x16, 0xcc, 0xa2, 0x88, 0x48, 0x17, 0x6a, 0xe2, 0xd8, 0xb3, 0xb8, 0x63, 0x07, 0xed,
	0xe2, 0x5a, 0xe1, 0x51, 0x63, 0x7d, 0x59, 0x61, 0x8f, 0xec, 0x63, 0x8f, 0x0e, 0x1c, 0x3b, 0x30,
	0xab, 0xe2, 0xd8, 0x93, 0x3f, 0x24, 0x96, 0xb9, 0x67, 0x0a, 0xbb, 0x98, 0xc7, 0xf6, 0x02, 0x97,
	0x9e, 0x29, 0x2c, 0x73, 0xf1, 0x07, 0xf9, 0x1c, 0xea, 0x9c, 0x7a, 0xd4, 0x11, 0x2c, 0x0c, 0xda,
	0xa5, 0x3c, 0x78, 0x90, 0x92, 0xcd, 0x09, 0x82, 0x3c, 0x83, 0x86, 0x3d, 0x1a, 0xc5, 0x74, 0x64,
	0xa3, 0x40, 0x19, 0x05, 0x56, 0x94, 0xc0, 0xc6, 0x84, 0x61, 0xe6, 0x51, 0xe4, 0x2e, 0x94, 0x44,
	0x18, 0xf5, 0xdb, 0x15, 0x44, 0x83, 0xb6, 0x3b, 0x8c, 0xfa, 0x26, 0xd2, 0xc9, 0x27, 0x50, 0xf6,
	0x98, 0xcf, 0x44, 0xbb, 0x8a, 0x80, 0x86, 0x02, 0xec, 0x49, 0x92, 0xa9, 0x38, 0x64, 0x0b, 0x56,
	0xe8, 0x99, 0x33, 0xb6, 0x83, 0x11, 0xb5, 0x62, 0xea, 0x50, 0xf6, 0x9e, 0xc6, 0xed, 0x1a, 0xc2,
	0x6f, 0xa4, 0x3e, 0x53, 0x6c, 0x53, 0x73, 0x4d, 0x83, 0x5e, 0xa0, 0x48, 0x3b, 0xde, 0x86, 0x2c,
	0x68, 0xd7, 0xf3, 0x76, 0xbc, 0x0a, 0x59, 0x60, 0x22, 0x9d, 0xdc, 0x83, 0x46, 0xba, 0xc8, 0x16,
	0x73, 0xdb, 0xb0, 0x56, 0x78, 0x54, 0x37, 0x21, 0x25, 0xf5, 0x5c, 0xa9, 0xe0, 0x84, 0x79, 0x5e,
	0xbb, 0x91, 0x57, 0xf0, 0x9a, 0x79, 0x9e, 0x89, 0x74, 0xf2, 0x1b, 0x58, 0xce, 0xac, 0xe4, 0x34,
	0x70, 0x69, 0xdc, 0x6e, 0x22, 0x74, 0x75, 0xda, 0xc6, 0x01, 0xf2, 0xcc, 0x16, 0x9d, 0xfa, 0x26,
	0x4f, 0x00, 0x0e, 0xe3, 0xf0, 0xad, 0x5e, 0x8c, 0x25, 0x94, 0x34, 0x94, 0xe4, 0x84, 0x6e, 0xe6,
	0x30, 0xe4, 0x15, 0xac, 0x46, 0x76, 0x2c, 0x98, 0xfc, 0xb0, 0x84, 0x8c, 0x04, 0xb5, 0xea, 0x2d,
	0x94, 0x6d, 0x6b, 0xd9, 0x14, 0x31, 0x09, 0x15, 0x12, 0xcd, 0xd0, 0xe4, 0xe4, 0x78, 0x18, 0x8b,
	0xf6, 0x72, 0x7e, 0x72, 0x83, 0x30, 0x16, 0x26, 0xd2, 0xc9, 0x7d, 0xa8, 0x9c, 0xb2, 0xc0, 0x0d,
	0x4f, 0xdb, 0x06, 0x22, 0x9a, 0x0a, 0xf1, 0x2d, 0xd2, 0x4c, 0xcd, 0x23, 0x7d, 0xf8, 0x64, 0xc8,
	0x02, 0x6a, 0x8d, 0x62, 0x9b, 0x05, 0xd4, 0xb5, 0xf8, 0x38, 0x19, 0x0e, 0xa5, 0x59, 0x22, 0xa6,
	0xb6, 0x6f, 0x39, 0x61, 0x12, 0x88, 0xf6, 0xca, 0x5a, 0xe1, 0x51, 0x49, 0x07, 0xf7, 0x1d, 0x09,
	0x7f, 0xa1, 0xd0, 0x03, 0x05, 0x1e, 0x20, 0x76, 0x4b, 0x42, 0xc9, 0x2b, 0xb8, 0x37, 0x57, 0xdf,
	0xb1, 0x2d, 0x9c, 0xb1, 0xc5, 0xd9, 0x77, 0xb4, 0x4d, 0x72, 0xda, 0x3e, 0x9a, 0xd5, 0xb6, 0x29,
	0x91, 0x03, 0xf6, 0x1d, 0x95, 0x33, 0xa0, 0x67, 0x91, 0x1d, 0xb8, 0xed, 0x6b, 0xf9, 0x19, 0xec,
	0x20, 0xcd, 0xd4, 0x3c, 0xf2, 0x10, 0xaa, 0xea, 0xd7, 0x7a, 0x7b, 0x15, 0x61, 0x4b, 0x79, 0xd8,
	0xba, 0x99, 0x72, 0x3b, 0xff, 0xb0, 0x08, 0xad, 0xe9, 0x15, 0x25, 0x8f, 0x72, 0x7b, 0x99, 0x4c,
	0xaf, 0xf9, 0xcc, 0x7e, 0x5e, 0xa1, 0x81, 0x13, 0xba, 0xd4, 0xb5, 0x84, 0xcd, 0x4f, 0x2c, 0x9f,
	0x0a, 0xbb, 0x5d, 0x5c, 0x5b, 0x7c, 0xd4, 0x34, 0x97, 0x35, 0xe3, 0xc8, 0xe6, 0x27, 0xfb, 0x54,
	0xd8, 0xe4, 0x29, 0xb4, 0x26, 0xab, 0x7c, 0x42, 0xcf, 0x79, 0x7b, 0x71, 0x6d, 0x71, 0xb2, 0x46,
	0x3b, 0x67, 0x51, 0x6c, 0x2e, 0x65, 0x88, 0xd7, 0xf4, 0x9c, 0x93, 0xfb, 0x50, 0x76, 0xc6, 0xcc,
	0x73, 0xf5, 0x96, 0xce, 0x9d, 0x2b, 0x32, 0x94, 0x4d, 0xc5, 0x24, 0x0f, 0xa0, 0x2c, 0xce, 0x23,
	0xca, 0xdb, 0x65, 0xd4, 0xa7, 0x37, 0xfe, 0x2e, 0xa3, 0x9e, 0x2b, 0xcd, 0x35, 0x15, 0x97, 0xfc,
	0x12, 0x96, 0x6d, 0xcf, 0xb3, 0x86, 0x92, 0x6e, 0x29, 0x81, 0xca, 0x7c, 0x81, 0x25, 0xdb, 0xf3,
	0xb2, 0x2f, 0x4e, 0x7e, 0x03, 0x0d, 0x27, 0xf4, 0xd3, 0x03, 0x12, 0xb7, 0x77, 0x6b, 0xfd, 0xba,
	0x12, 0xda, 0x9a, 0x30, 0xf6, 0x43, 0x37, 0x75, 0x4d, 0x1e, 0x4f, 0xf6, 0xe0, 0x46, 0x12, 0xa5,
	0x81, 0x23, 0x68, 0xce, 0x51, 0x35, 0x1c, 0xfe, 0xa6, 0x9e, 0x95, 0x72, 0xd7, 0xe6, 0xb9, 0xa0,
	0x7c, 0xe0, 0x31, 0x87, 0x9a, 0xd7, 0x52, 0xb1, 0x2d, 0x41, 0x53, 0x2f, 0x76, 0xbe, 0x84, 0x95,
	0x19, 0x24, 0xf9, 0x14, 0x96, 0xf2, 0xcb, 0xc0, 0xdb, 0x05, 0x5c, 0x82, 0x66, 0x6e, 0x09, 0x78,
	0xe7, 0x0f, 0x05, 0x30, 0x2e, 0x1e, 0x2f, 0xf3, 0x17, 0xb0, 0x30, 0x7f, 0x01, 0x9f, 0x40, 0x23,
	0xef, 0xbc, 0xe2, 0x7c, 0xe7, 0xc1, 0x70, 0xe2, 0xb9, 0x0e, 0x06, 0xd2, 0xe2, 0x65, 0x81, 0x84,
	0x21, 0xb4, 0x0d, 0xf7, 0xc2, 0x98, 0x8d, 0x58, 0x60, 0x7b, 0xe8, 0x9e, 0x28, 0x76, 0x43, 0x27,
	0xa1, 0x71, 0xce, 0x9e, 0x12, 0xda, 0xf3, 0x51, 0x0a, 0xdb, 0x12, 0xf4, 0x50, 0x83, 0x32, 0xb7,
	0xfc, 0x57, 0x11, 0x9a, 0x1b, 0xfd, 0xfe, 0x9f, 0x26, 0x34, 0x3e, 0xef, 0x05, 0xc3, 0x90, 0xfc,
	0x12, 0xe0, 0x9d, 0xfc, 0x40, 0x63, 0xa7, 0x63, 0x39, 0xc5, 0xe5, 0x62, 0xb9, 0xfe, 0x2e, 0x25,
	0x90, 0xd7, 0xb0, 0xec, 0x32, 0x2e, 0xec, 0xc0, 0xa1, 0x72, 0xf4, 0x98, 0x39, 0x78, 0x53, 0xb5,
	0xd6, 0x3f, 0x9e, 0x96, 0xde, 0xd6, 0xa0, 0x7d, 0xc4, 0x68, 0x3d, 0x2d, 0x77, 0x8a, 0x4a, 0x6e,
	0x41, 0x59, 0x84, 0x91, 0x75, 0x82, 0x3e, 0x58, 0xd2, 0x20, 0x79, 0x5d, 0xbc, 0x26, 0x0f, 0x64,
	0x54, 0x79, 0x89, 0x1f, 0x58, 0x81, 0xed, 0x53, 0x8c, 0xf0, 0xba, 0x06, 0x80, 0x62, 0xf4, 0x6d,
	0x9f, 0x92, 0x4f, 0xa0, 0xae, 0x61, 0xcc, 0xc5, 0x8b, 0x6a, 0x51, 0x83, 0x6a, 0x8a, 0x8c, 0xe7,
	0x79, 0x23, 0xa6, 0x43, 0xeb, 0x3d, 0x75, 0xac, 0xe1, 0xb3, 0x75, 0xbc, 0x9f, 0x9a, 0x66, 0x3d,
	0xa6, 0xc3, 0x37, 0xd4, 0xd9, 0x7d, 0xb6, 0x4e, 0x1e, 0x42, 0xd3, 0xb7, 0xcf, 0xac, 0xd4, 0x34,
	0xbc, 0x11, 0x0a, 0x69, 0xa4, 0xfa, 0xf6, 0x59, 0x3a, 0x13, 0xd2, 0x85, 0xd6, 0x38, 0xe0, 0xa7,
	0x16, 0x1d, 0x5a, 0x9c, 0xda, 0xb1, 0x33, 0xc6, 0xa3, 0x23, 0x35, 0xbb, 0x29, 0x79, 0x3b, 0xc3,
	0x01, 0x72, 0x5e, 0x95, 0x6a, 0x55, 0xa3, 0xd6, 0xf9, 0x5d, 0x19, 0xea, 0x93, 0xb3, 0xf7, 0x1e,
	0xd4, 0xd4, 0xe9, 0xcd, 0x5c, 0xf4, 0x78, 0x6a, 0x6a, 0x15, 0xa9, 0x3d, 0x97, 0x74, 0xa1, 0xaa,
	0xac, 0x4e, 0xa3, 0xc7, 0x48, 0x77, 0x11, 0x4e, 0x25, 0x18, 0x86, 0x66, 0x0a, 0x20, 0x6d, 0x28,
	0xb9, 0x94, 0x3b, 0xe8, 0xb9, 0x5a, 0xea, 0x39, 0x49, 0x21, 0x9f, 0x01, 0x89, 0x62, 0xe6, 0xdb,
	0xf1, 0xb9, 0x95, 0xb9, 0x86, 0x63, 0x90, 0x2c, 0x9a, 0x86, 0xe6, 0x68, 0x8d, 0x2e, 0x27, 0xdf,
	0x80, 0x11, 0xd0, 0x33, 0x61, 0xc5, 0xd4, 0x76, 0x2d, 0x1a, 0x8c, 0x58, 0x40, 0xd1, 0x8f, 0xad,
	0x74, 0xf0, 0x1d, 0xa4, 0xe5, 0x82, 0xa1, 0x25, 0xf1, 0x26, 0xb5, 0x5d, 0xc5, 0x21, 0x9f, 0x41,
	0x25, 0x96, 0x21, 0x9b, 0x9e, 0x17, 0xfa, 0x18, 0x7a, 0x4d, 0xcf, 0x4d, 0x49, 0xd6, 0x52, 0x1a,
	0x43, 0xbe, 0x82, 0x5b, 0xa9, 0x75, 0x51, 0x4c, 0x87, 0xec, 0x2c, 0x6f, 0x64, 0x15, 0x8d, 0xbc,
	0xa1, 0x01, 0x87, 0xc8, 0x9f, 0x98, 0x7a, 0x07, 0xe0, 0x84, 0xd2, 0xc8, 0x0a, 0x63, 0x57, 0xe7,
	0x05, 0x35, 0xb3, 0x2e, 0x29, 0x07, 0x92, 0x40, 0xd6, 0xa0, 0xc9, 0xb8, 0x35, 0xb4, 0xb9, 0x50,
	0xd7, 0x63, 0x1d, 0x01, 0xc0, 0xf8, 0xae, 0xcd, 0x05, 0x2e, 0xc0, 0x3e, 0xdc, 0x89, 0x12, 0x3e,
	0xa6, 0xae, 0xe5, 0x86, 0xa7, 0x81, 0x35, 0x64, 0x9e, 0xa0, 0xb1, 0xe5, 0x84, 0x81, 0x8b, 0x67,
	0x2a, 0x6f, 0xc3, 0xcc, 0x89, 0x7b, 0x5b, 0x09, 0x6c, 0x87, 0xa7, 0xc1, 0x2e, 0xc2, 0xb7, 0x32,
	0x34, 0xd9, 0x82, 0x6b, 0x71, 0x12, 0x08, 0xe6, 0xd3, 0x54, 0x95, 0xc7, 0xb8, 0x68, 0x37, 0x50,
	0xc9, 0x35, 0xa5, 0xc4, 0x54, 0x00, 0x25, 0x6b, 0xae, 0xc4, 0xf9, 0xcf, 0x3d, 0xc6, 0x05, 0xf9,
	0x1c, 0x0c, 0x19, 0x7d, 0xa7, 0x36, 0x13, 0x16, 0xaa, 0xf2, 0x39, 0xa6, 0x13, 0x65, 0xed, 0xb7,
	0x25, 0xdf, 0x3e, 0xfb, 0xd6, 0x66, 0xe2, 0x88, 0xf9, 0x74, 0x9f, 0x93, 0x2f, 0xa0, 0x6e, 0x07,
	0x81, 0x85, 0xfb, 0x51, 0x27, 0x0f, 0x17, 0xb6, 0x2d, 0x86, 0x49, 0xcd, 0x0e, 0x02, 0xfc, 0xea,
	0xfc, 0x5d, 0x09, 0xc8, 0x6c, 0x6e, 0xf0, 0xff, 0x33, 0x16, 0xaf, 0x8c, 0x8d, 0xf2, 0x95, 0xb1,
	0xf1, 0x29, 0x4c, 0xee, 0x46, 0x84, 0x57, 0x10, 0xde, 0xcc, 0x88, 0x12, 0x74, 0x31, 0x42, 0xaa,
	0x3f, 0x3d, 0x42, 0x6a, 0xff, 0x17, 0x11, 0x52, 0xff, 0x5f, 0x47, 0x08, 0x7c, 0x60, 0x84, 0x34,
	0x3e, 0x20, 0x42, 0xfe, 0xbb, 0x0c, 0x25, 0x99, 0x1f, 0x93, 0xa7, 0x50, 0x97, 0x19, 0x72, 0xfe,
	0x4a, 0x68, 0x4d, 0xd2, 0xe7, 0xdc, 0x09, 0x50, 0x7b, 0xab, 0xbf, 0xc9, 0x9f, 0x40, 0x0b, 0x45,
	0x64, 0xfa, 0xac, 0xe4, 0x8a, 0xf9, 0xab, 0x44, 0xca, 0x5d, 0x28, 0x73, 0x9a, 0x6f, 0x73, 0x34,
	0x59, 0xc4, 0x60, 0x92, 0x12, 0xd3, 0x40, 0xa7, 0x3b, 0x17, 0x93, 0x98, 0x8c, 0x2f, 0x8f, 0x7a,
	0x16, 0x04, 0x54, 0x66, 0xed, 0x67, 0x78, 0x1f, 0x64, 0x47, 0x3d, 0x92, 0x7b, 0xee, 0x19, 0x79,
	0x02, 0x2d, 0x8f, 0x0e, 0x85, 0x85, 0x36, 0x61, 0x0e, 0x55, 0x9e, 0x59, 0xaf, 0xa6, 0x44, 0x48,
	0xc3, 0x30, 0x85, 0x5a, 0x87, 0xe5, 0x98, 0x8d, 0xc6, 0x79, 0x91, 0xca, 0x6c, 0xda, 0x85, 0x90,
	0x4c, 0xe6, 0x09, 0x34, 0xa2, 0x38, 0x3c, 0xa6, 0xfa, 0xa2, 0xaf, 0x5e, 0x72, 0xd1, 0x23, 0x46,
	0x5d, 0xf4, 0x4f, 0xa0, 0x71, 0x9c, 0xb0, 0x2c, 0x35, 0xa8, 0x5d, 0x22, 0x81, 0x18, 0x25, 0xf1,
	0x0c, 0x96, 0x71, 0x26, 0xb9, 0xd0, 0xab, 0xcf, 0xd8, 0x85, 0x93, 0xcd, 0x85, 0xdb, 0xcf, 0xc1,
	0x50, 0x93, 0xb9, 0xf2, 0x48, 0x53, 0x13, 0x9e, 0x16, 0x0b, 0xc5, 0x78, 0x3a, 0xce, 0x1b, 0xb3,
	0x62, 0x88, 0xc9, 0x89, 0xbd, 0x84, 0x8f, 0x94, 0x18, 0x7d, 0x97, 0x93, 0xb4, 0x86, 0x71, 0xe8,
	0x5b, 0x2c, 0x68, 0x37, 0x67, 0x34, 0xdc, 0x44, 0xf8, 0xce, 0xbb, 0x89, 0x8e, 0xdd, 0x38, 0xf4,
	0x7b, 0x01, 0x79, 0x0e, 0x37, 0x19, 0xb7, 0x82, 0xc4, 0xf3, 0x2c, 0xfb, 0xd4, 0x8e, 0x65, 0x59,
	0xe5, 0x33, 0x5c, 0x11, 0x3c, 0xe2, 0x6a, 0xe6, 0x35, 0xc6, 0xfb, 0x89, 0xe7, 0x6d, 0x48, 0xe6,
	0x80, 0xfa, 0x0c, 0xc3, 0xf5, 0x92, 0xcd, 0xd5, 0xfa, 0x29, 0x9b, 0xab, 0xf3, 0x9f, 0x45, 0x58,
	0x9a, 0x02, 0x91, 0x55, 0x28, 0xea, 0x33, 0x31, 0xdd, 0x60, 0x45, 0xe6, 0x92, 0xe7, 0x60, 0xf0,
	0x30, 0x89, 0x1d, 0x6a, 0xd1, 0xb3, 0x48, 0x8f, 0x54, 0x9c, 0x5d, 0x10, 0x85, 0x91, 0xbf, 0x71,
	0xeb, 0x3e, 0x07, 0x43, 0xd8, 0xf1, 0x88, 0x8a, 0x9c, 0xd4, 0x6c, 0x56, 0xdf, 0x52, 0x98, 0x4c,
	0x6a, 0x1d, 0x48, 0x36, 0xd6, 0xa4, 0x50, 0xcd, 0x67, 0x40, 0x46, 0x3a, 0x4e, 0x56, 0xb4, 0xae,
	0x03, 0xc9, 0x46, 0x9a, 0xc8, 0x94, 0xf3, 0x32, 0xe9, 0x28, 0x99, 0xcc, 0x2f, 0xa0, 0x1a, 0x0f,
	0xd5, 0xae, 0xad, 0xe0, 0xae, 0xbd, 0x39, 0xc7, 0x69, 0xb9, 0xad, 0x5b, 0x89, 0x87, 0xb8, 0x69,
	0x95, 0x9c, 0x1f, 0xba, 0x54, 0x27, 0xfb, 0xf3, 0xe4, 0x72, 0xe9, 0x7e, 0x25, 0x1e, 0xca, 0xaf,
	0xce, 0xbf, 0x16, 0xa0, 0x9e, 0x35, 0x27, 0x7e, 0xfc, 0x06, 0xba, 0x07, 0x35, 0x26, 0xd1, 0x12,
	0x50, 0xcc, 0x03, 0x90, 0x3a, 0x7d, 0x45, 0x2d, 0x7e, 0xe8, 0x15, 0x55, 0x9a, 0xb9, 0xa2, 0x6e,
	0x40, 0x25, 0x09, 0xd8, 0xbb, 0x44, 0xa5, 0x3d, 0x35, 0x53, 0x7f, 0x5d, 0x72, 0x75, 0x55, 0xe6,
	0x5f, 0x5d, 0x9d, 0xbf, 0x2a, 0x40, 0x3d, 0xeb, 0xa5, 0x90, 0x2e, 0x40, 0x6e, 0x2f, 0x15, 0x66,
	0x56, 0x3c, 0xc7, 0x25, 0xcf, 0xa1, 0x15, 0x47, 0x41, 0x7e, 0xef, 0xa9, 0xb8, 0xd2, 0x05, 0xa9,
	0x19, 0x05, 0xfa, 0x0c, 0x8a, 0x82, 0xdc, 0xe6, 0xcb, 0x4a, 0xbf, 0xc5, 0x2b, 0x4a, 0xbf, 0xce,
	0xef, 0x0a, 0xf9, 0x66, 0x03, 0x59, 0x83, 0xb2, 0x8c, 0xc3, 0x79, 0x16, 0x29, 0x06, 0xe9, 0x42,
	0x5d, 0x1a, 0xa3, 0x50, 0x73, 0xed, 0xa8, 0xc5, 0xea, 0xc7, 0x87, 0x9a, 0xf0, 0x17, 0x45, 0x68,
	0xe4, 0x7a, 0x46, 0xe4, 0x01, 0xd4, 0x46, 0x71, 0x98, 0x44, 0xd6, 0xf1, 0xf9, 0x1c, 0x33, 0xaa,
	0xc8, 0xdb, 0x3c, 0x97, 0x30, 0x7b, 0x34, 0xb2, 0x86, 0x49, 0xe0, 0xcc, 0xd9, 0x67, 0x55, 0x7b,
	0x34, 0xda, 0x4d, 0x02, 0x87, 0xac, 0x41, 0x4d, 0xd5, 0x80, 0xd4, 0x9d, 0xca, 0x3e, 0x32, 0x2a,
	0xf9, 0x02, 0x9a, 0x72, 0x46, 0xd9, 0x98, 0xa5, 0x79, 0x93, 0x82, 0x38, 0x0a, 0x5e, 0xe8, 0x91,
	0xb5, 0x40, 0x36, 0x7a, 0xf9, 0x32, 0x81, 0x0d, 0x6d, 0x43, 0xe6, 0x87, 0xca, 0x55, 0x7e, 0xf8,
	0xfb, 0x02, 0x94, 0x8e, 0xc2, 0xa8, 0x4f, 0x1e, 0x42, 0x0d, 0x13, 0xd8, 0x89, 0x03, 0x74, 0x87,
	0x62, 0xf3, 0xbc, 0x27, 0xa8, 0x6f, 0x56, 0x91, 0xbb, 0x79, 0x4e, 0x6e, 0xa7, 0x0d, 0xb3, 0x62,
	0xae, 0xf5, 0xa1, 0x3b, 0x65, 0x1f, 0xe4, 0x7b, 0x39, 0x95, 0x49, 0x52, 0x94, 0xcd, 0x7d, 0x7a,
	0xb8, 0x46, 0x86, 0xd8, 0x3c, 0xef, 0x7c, 0x07, 0x65, 0x6c, 0xc8, 0x4d, 0xc6, 0x2e, 0x5c, 0x31,
	0x76, 0xf1, 0xa7, 0x8c, 0xbd, 0xf8, 0x63, 0x63, 0x7f, 0x03, 0xa5, 0xd7, 0xcc, 0xf3, 0xc8, 0xc7,
	0x50, 0x71, 0xc2, 0x20, 0xe8, 0x6d, 0x4f, 0x8d, 0xad, 0x69, 0xd2, 0x30, 0x95, 0xd9, 0x14, 0x73,
	0xab, 0xad, 0x48, 0x9d, 0x7f, 0x2f, 0x42, 0x3b, 0x35, 0x43, 0xfd, 0x65, 0x61, 0x30, 0x48, 0x7c,
	0xb9, 0x53, 0x65, 0x25, 0x8f, 0x57, 0x45, 0x14, 0x87, 0x0e, 0xe5, 0x9c, 0xba, 0x16, 0xee, 0xcc,
	0xc2, 0xa3, 0x92, 0xb9, 0x2c, 0x19, 0x87, 0x29, 0xbd, 0x2f, 0x77, 0xc1, 0x4a, 0x90, 0xf8, 0x12,
	0xea, 0x26, 0x0e, 0x75, 0xad, 0x38, 0x3c, 0xe5, 0x6a, 0x15, 0xcc, 0xe5, 0x20, 0xf1, 0x0f, 0x35,
	0xdd, 0x0c, 0x4f, 0x39, 0x79, 0x00, 0x2d, 0x89, 0x65, 0x82, 0xc6, 0xb6, 0xda, 0xbe, 0x8b, 0x08,
	0x5c, 0x0a, 0x12, 0xbf, 0x97, 0x11, 0x2f, 0x76, 0x1d, 0x4b, 0x33, 0x5d, 0xc7, 0x35, 0x59, 0xef,
	0x06, 0x4e, 0x12, 0xc7, 0x34, 0x70, 0xce, 0xf1, 0x2c, 0x2a, 0x99, 0x79, 0x12, 0xd9, 0x83, 0x55,
	0xc1, 0x86, 0x9e, 0xcd, 0xc7, 0x98, 0xbd, 0xca, 0x13, 0x43, 0xd0, 0x33, 0xa1, 0xc3, 0x4e, 0xb7,
	0x01, 0x8f, 0xd8, 0xae, 0x44, 0xc8, 0x13, 0x76, 0x4b, 0xf1, 0x5f, 0x2e, 0x98, 0x44, 0xcb, 0xe5,
	0xa8, 0xd2, 0xee, 0x38, 0x91, 0x3a, 0x78, 0xe2, 0x47, 0x22, 0x6d, 0xdc, 0x34, 0xcd, 0xa5, 0x38,
	0xd9, 0x9a, 0x10, 0x37, 0x9b, 0x00, 0xdb, 0x54, 0xd8, 0xcc, 0x93, 0xc7, 0x69, 0x67, 0x04, 0xab,
	0x7a, 0x80, 0xcc, 0xbf, 0xd8, 0x4d, 0x38, 0x80, 0x6b, 0x34, 0x25, 0x58, 0x1c, 0x3d, 0xce, 0x68,
	0x7a, 0xcc, 0xdc, 0x9d, 0x0e, 0x90, 0x8b, 0x2b, 0x63, 0x12, 0x3a, 0x4d, 0x61, 0x94, 0x77, 0xbe,
	0x6f, 0x00, 0x99, 0x9d, 0x0a, 0xf9, 0x35, 0xdc, 0x16, 0xa1, 0xb0, 0x3d, 0xcb, 0xf5, 0x87, 0x4c,
	0xb7, 0x41, 0x03, 0xea, 0x5a, 0x91, 0xed, 0x9c, 0xa4, 0xab, 0x79, 0x13, 0x11, 0xdb, 0x08, 0x18,
	0x28, 0xfe, 0xa1, 0x64, 0xcf, 0x0a, 0x9f, 0xb0, 0x28, 0xca, 0x84, 0x8b, 0xb3, 0xc2, 0x8a, 0xaf,
	0x84, 0xbf, 0x82, 0x5b, 0x73, 0x47, 0xc6, 0xd0, 0x50, 0x2b, 0x7e, 0x63, 0x76, 0x60, 0x8c, 0x90,
	0x19, 0x51, 0x3d, 0x2e, 0x8a, 0x96, 0x66, 0x45, 0x15, 0x1b, 0x45, 0x7f, 0x0b, 0x3f, 0x9b, 0x12,
	0x8d, 0xc3, 0x64, 0x34, 0xb6, 0x38, 0x15, 0x96, 0xba, 0x19, 0xbd, 0xd0, 0x76, 0xb3, 0x9a, 0x40,
	0x85, 0x4c, 0x27, 0xa7, 0xca, 0x94, 0xf0, 0x01, 0x15, 0x78, 0xe9, 0xee, 0x85, 0xb6, 0xab, 0x4b,
	0x84, 0x2f, 0x2f, 0x58, 0x84, 0xb5, 0x7f, 0xaa, 0xa6, 0x82, 0x6a, 0xae, 0xe7, 0xd5, 0xd0, 0x4c,
	0xf2, 0x1b, 0xb8, 0xa3, 0x24, 0x9d, 0x98, 0xda, 0x82, 0x5a, 0x3c, 0xb0, 0x23, 0x3e, 0x0e, 0x27,
	0x85, 0x49, 0x15, 0xa5, 0x95, 0xfa, 0x2d, 0xc4, 0x0c, 0x34, 0x44, 0x6b, 0x78, 0x06, 0x6a, 0xb2,
	0x96, 0x17, 0x3a, 0xb6, 0x67, 0xc5, 0x74, 0x24, 0x63, 0x26, 0x48, 0x7c, 0x2c, 0xe8, 0x4b, 0xe6,
	0x35, 0xe4, 0xee, 0x49, 0xa6, 0x89, 0xbc, 0x7e, 0xe2, 0x93, 0x9f, 0x83, 0x5a, 0x18, 0x2b, 0xa6,
	0x7e, 0x28, 0x68, 0x5e, 0xaa, 0x8e, 0x52, 0xab, 0xc8, 0x36, 0x91, 0x3b, 0x11, 0x7b, 0x0a, 0x6a,
	0x1a, 0x56, 0xc2, 0x69, 0xac, 0x66, 0x79, 0x7c, 0x2e, 0xa8, 0x2a, 0x9f, 0x4a, 0x26, 0x41, 0xe6,
	0x6f, 0x39, 0x8d, 0xe5, 0x0c, 0xb1, 0x5f, 0x38, 0x11, 0xf1, 0xa8, 0x1d, 0x07, 0xa9, 0x94, 0xcf,
	0xb1, 0x92, 0x4a, 0x45, 0xf6, 0x14, 0x4f, 0x4a, 0xed, 0x73, 0xb2, 0x03, 0x6b, 0xda, 0x9b, 0x8c,
	0xcb, 0x5b, 0x03, 0x25, 0x1c, 0xdb, 0x19, 0x53, 0x6b, 0xcc, 0x84, 0xea, 0x5e, 0x37, 0x51, 0xfa,
	0x23, 0xe5, 0x54, 0x84, 0x49, 0xe1, 0x2d, 0x09, 0x7a, 0xc9, 0x04, 0xf6, 0xad, 0x5f, 0xc0, 0x27,
	0x97, 0xa9, 0xf1, 0x19, 0xe7, 0x4a, 0xcf, 0x12, 0xea, 0xf9, 0x78, 0x9e, 0x9e, 0x7d, 0xc6, 0x39,
	0x2a, 0xfa, 0x16, 0xba, 0x57, 0x06, 0x8d, 0x33, 0xa6, 0xce, 0x49, 0xb6, 0x60, 0x2d, 0xd4, 0xf8,
	0xe9, 0x65, 0x51, 0xb3, 0x25, 0xc1, 0x7a, 0xe9, 0xb6, 0xe0, 0x9e, 0x52, 0xfc, 0x9e, 0x3a, 0xea,
	0x1c, 0xd3, 0x11, 0x88, 0x29, 0xbf, 0xcb, 0xf8, 0x49, 0x9b, 0xa2, 0x36, 0xb5, 0xcf, 0xde, 0x20,
	0xaa, 0xe7, 0x62, 0xe4, 0xc9, 0x4c, 0x7f, 0x9b, 0xf1, 0x93, 0x89, 0xb7, 0xe6, 0x2a, 0xc1, 0xf9,
	0xb6, 0x87, 0x39, 0x6f, 0xcd, 0x68, 0xc1, 0xc9, 0x92, 0xaf, 0xd3, 0x40, 0xbc, 0xa8, 0x26, 0x9d,
	0xd7, 0x08, 0x75, 0xb4, 0x67, 0x75, 0x5c, 0x31, 0x19, 0xd5, 0xd5, 0xcb, 0x54, 0x8c, 0xe7, 0x4d,
	0x46, 0xf5, 0xf7, 0xb4, 0x92, 0x03, 0x78, 0x70, 0x99, 0x92, 0xf7, 0x8c, 0x33, 0x21, 0x6f, 0x99,
	0xd0, 0xa5, 0xbc, 0xcd, 0x50, 0xd5, 0xda, 0x3c, 0x55, 0x6f, 0x14, 0xb0, 0x2f, 0x71, 0x64, 0x00,
	0x0f, 0x2f, 0x53, 0xe8, 0x32, 0xee, 0xd8, 0xb1, 0x9b, 0xa9, 0x7c, 0x9b, 0xdb, 0xee, 0x17, 0x54,
	0x6e, 0xa7, 0x50, 0xa5, 0x74, 0x37, 0x8d, 0xac, 0x9c, 0x52, 0x8c, 0xae, 0xf7, 0xb2, 0x68, 0xd7,
	0x93, 0x3d, 0x99, 0xe7, 0x73, 0x19, 0x5c, 0x6f, 0xa8, 0xa3, 0x67, 0xbb, 0x07, 0xf7, 0xe7, 0xeb,
	0xc1, 0xba, 0x8e, 0x67, 0xaa, 0x3c, 0x54, 0x75, 0x77, 0x56, 0xd5, 0x01, 0xe2, 0x94, 0xb6, 0xce,
	0x77, 0x50, 0x1a, 0x84, 0xb1, 0x20, 0x7f, 0x04, 0xd5, 0x63, 0x4c, 0x07, 0xf8, 0xfc, 0x74, 0x48,
	0x33, 0xc9, 0x7d, 0x58, 0x62, 0x1c, 0x3b, 0x59, 0xb6, 0x27, 0x05, 0x55, 0x06, 0x60, 0x4e, 0x13,
	0x3f, 0x30, 0x29, 0xfd, 0xcb, 0x22, 0x18, 0xea, 0x49, 0x6b, 0x37, 0xb6, 0x7d, 0xba, 0x19, 0x26,
	0x81, 0xcc, 0x58, 0x4a, 0xb9, 0xce, 0xc7, 0xf5, 0xfc, 0xc3, 0x17, 0x02, 0x72, 0x95, 0x10, 0x02,
	0x49, 0x07, 0xea, 0x49, 0x70, 0x2c, 0x59, 0xd4, 0x9d, 0xca, 0x47, 0x26, 0x64, 0x59, 0x5d, 0x84,
	0xc3, 0x21, 0xa7, 0x42, 0x5f, 0x12, 0xfa, 0x8b, 0x3c, 0x82, 0xba, 0x63, 0x7b, 0x8e, 0x4c, 0x20,
	0xb9, 0xce, 0xcb, 0xf2, 0x09, 0xee, 0x84, 0x49, 0xfe, 0x18, 0x1a, 0x43, 0x69, 0xa4, 0x85, 0x0d,
	0x54, 0xfd, 0x18, 0x3b, 0x55, 0x4c, 0x20, 0x1b, 0x7b, 0xad, 0xe4, 0x57, 0xb0, 0xe4, 0xf8, 0x91,
	0xe5, 0xda, 0xc2, 0xce, 0x17, 0x76, 0xfa, 0xf5, 0x14, 0x31, 0x5b, 0x7e, 0xb4, 0x6d, 0x0b, 0x1b,
	0x3b, 0x0e, 0x0d, 0x67, 0xf2, 0xd1, 0xf9, 0x9b, 0x02, 0x34, 0x72, 0x4e, 0xb9, 0xca, 0x1f, 0x08,
	0x98, 0xf1, 0xc7, 0x67, 0x50, 0xe6, 0xc2, 0xd6, 0x2b, 0x93, 0x3d, 0xd9, 0x5e, 0xf4, 0xb3, 0xa9,
	0x40, 0xe4, 0x11, 0x2c, 0xd2, 0x20, 0x5d, 0xa7, 0xcb, 0xb0, 0x12, 0xd2, 0xf9, 0x43, 0x01, 0x2a,
	0x8a, 0x43, 0x1e, 0x42, 0x5d, 0x26, 0xe5, 0x16, 0xd6, 0x72, 0xb3, 0xe5, 0x43, 0x4d, 0x32, 0xb7,
	0x65, 0x55, 0x77, 0x31, 0xfd, 0x2c, 0xfe, 0x48, 0xfa, 0x39, 0x95, 0x96, 0x2f, 0x5e, 0x95, 0x96,
	0x3f, 0x84, 0x32, 0x3a, 0x5c, 0x3f, 0xba, 0xad, 0xcc, 0x58, 0x6e, 0x2a, 0xfe, 0x24, 0x14, 0xcb,
	0x57, 0x85, 0xe2, 0xd7, 0xd0, 0xc4, 0xca, 0x83, 0x05, 0x23, 0x39, 0x05, 0xf2, 0x05, 0x2c, 0x8d,
	0xf4, 0x37, 0x96, 0x61, 0x73, 0x66, 0xd9, 0x1c, 0xe5, 0x04, 0x3a, 0x2f, 0xa1, 0x91, 0x2a, 0x18,
	0x50, 0x41, 0xbe, 0x82, 0xd6, 0x94, 0x7c, 0xba, 0xab, 0x74, 0x47, 0x2e, 0x3f, 0x96, 0xb9, 0x94,
	0x57, 0xc4, 0x65, 0xb5, 0x58, 0x51, 0xef, 0x9f, 0xe4, 0x17, 0x39, 0x2b, 0x38, 0x15, 0xa9, 0x92,
	0x95, 0x69, 0x25, 0x03, 0x2a, 0x26, 0xc6, 0x0c, 0xa8, 0xe0, 0x1f, 0x58, 0x1b, 0xb4, 0xa1, 0xfa,
	0x9e, 0xc6, 0xf8, 0x5a, 0xa8, 0x76, 0x45, 0xfa, 0xd9, 0xf9, 0x1c, 0xea, 0xd2, 0x16, 0xf5, 0x6c,
	0xf7, 0xa3, 0xe5, 0x6a, 0xe7, 0xaf, 0x0b, 0x50, 0xd5, 0x2f, 0xb6, 0xe4, 0x31, 0x40, 0x14, 0x87,
	0x6f, 0xa7, 0x26, 0xbd, 0x3c, 0x11, 0x51, 0x6f, 0x86, 0x75, 0x09, 0x51, 0xe5, 0xeb, 0x73, 0xb8,
	0x31, 0xa2, 0x81, 0x4c, 0xd0, 0xa9, 0x6b, 0x85, 0x89, 0x88, 0x12, 0x81, 0x4f, 0x4d, 0xaa, 0xee,
	0xad, 0x9b, 0xab, 0x19, 0xf7, 0x00, 0x99, 0x7d, 0xc9, 0xfb, 0xb0, 0xf3, 0xa5, 0xfb, 0xcf, 0x45,
	0xf5, 0xaf, 0x1f, 0xd8, 0x2e, 0x59, 0x81, 0x25, 0xf9, 0x37, 0xeb, 0xbd, 0x1b, 0x0b, 0x29, 0x29,
	0x6b, 0x86, 0x18, 0x85, 0x94, 0x94, 0xf5, 0x10, 0x8c, 0x22, 0xb9, 0x06, 0xcb, 0x92, 0x94, 0xab,
	0x9e, 0x8d, 0x45, 0xd2, 0x84, 0x1a, 0x6a, 0x0b, 0xa3, 0xbe, 0x51, 0x22, 0x4b, 0x50, 0x97, 0x5f,
	0x58, 0xb4, 0x19, 0xe5, 0x4c, 0x09, 0x16, 0xbf, 0x1b, 0xa3, 0x91, 0x51, 0x49, 0xf1, 0xaf, 0x42,
	0x16, 0x18, 0xd5, 0xf4, 0x4b, 0x16, 0x5a, 0x46, 0x8d, 0xdc, 0x00, 0x22, 0xbf, 0xa6, 0x9f, 0xb7,
	0x8d, 0x3a, 0x69, 0xc3, 0x6a, 0x9e, 0x9e, 0xbe, 0x86, 0x1a, 0x40, 0x08, 0xb4, 0x24, 0x67, 0xd2,
	0x53, 0x30, 0x1a, 0xe4, 0x36, 0xdc, 0x40, 0xda, 0xcc, 0x23, 0x83, 0xd1, 0x4c, 0xc7, 0x93, 0x47,
	0xb3, 0xb1, 0x44, 0x5a, 0x00, 0xf2, 0x4b, 0xed, 0x15, 0xa3, 0x95, 0x7e, 0xab, 0x15, 0x34, 0x96,
	0xc9, 0x32, 0x34, 0x26, 0xdf, 0xeb, 0x86, 0xd1, 0xfd, 0x12, 0x9a, 0xf9, 0x07, 0x51, 0x09, 0x38,
	0xb4, 0x39, 0x3f, 0x1a, 0x63, 0x4e, 0x63, 0x2c, 0xc8, 0xf9, 0x6f, 0xc6, 0xa1, 0xed, 0x3a, 0x36,
	0x17, 0x46, 0x81, 0xd4, 0xa0, 0xf4, 0xd2, 0xe6, 0x63, 0xa3, 0xd8, 0xfd, 0x35, 0x2c, 0x5f, 0x78,
	0x7b, 0x96, 0xcc, 0xfe, 0x41, 0x7f, 0xc7, 0x58, 0x90, 0xbf, 0x76, 0x37, 0x06, 0x47, 0x46, 0x81,
	0xac, 0x82, 0xf1, 0xb2, 0xf7, 0xe2, 0xa5, 0xb5, 0x75, 0xb0, 0x7f, 0x68, 0xee, 0x0c, 0x06, 0xbd,
	0x83, 0xbe, 0x51, 0xec, 0x3e, 0x06, 0x98, 0xbc, 0x7a, 0x91, 0x3a, 0x94, 0x31, 0x1d, 0x55, 0x82,
	0x47, 0xec, 0xf5, 0x1b, 0xa3, 0x40, 0x1a, 0x50, 0xd5, 0xf5, 0x89, 0x51, 0xec, 0xfe, 0x39, 0xdc,
	0x98, 0xff, 0xec, 0x29, 0x17, 0xa4, 0x17, 0xbc, 0xb7, 0x3d, 0xe6, 0x2a, 0x82, 0xb1, 0x40, 0x2a,
	0x50, 0xdc, 0x7b, 0x6a, 0x14, 0xf0, 0xef, 0xba, 0x51, 0x24, 0x00, 0x95, 0xad, 0x90, 0xb3, 0x80,
	0x1a, 0x8b, 0xc4, 0x80, 0x66, 0x2f, 0x08, 0x68, 0xac, 0x2a, 0x4c, 0x61, 0x94, 0xba, 0x4f, 0x27,
	0xef, 0xb6, 0x68, 0xcc, 0x2a, 0x18, 0x5a, 0x61, 0x46, 0x33, 0x16, 0xa4, 0x35, 0x07, 0xea, 0x78,
	0x32, 0x0a, 0xdd, 0x7f, 0x2c, 0x40, 0x2d, 0x6d, 0xd8, 0x4f, 0x22, 0x2d, 0xa0, 0x31, 0xc6, 0xc0,
	0x02, 0xb9, 0x0e, 0x2b, 0x18, 0x33, 0x74, 0x28, 0x0e, 0x12, 0xa1, 0xc9, 0x85, 0x34, 0x18, 0x4c,
	0x36, 0x1a, 0xe7, 0xe8, 0x45, 0x69, 0x93, 0x0a, 0x4c, 0xd5, 0x76, 0x35, 0x16, 0xa5, 0x0d, 0x18,
	0x97, 0x81, 0x60, 0x19, 0xb5, 0x44, 0x6e, 0xc1, 0xf5, 0x29, 0xb5, 0x19, 0xab, 0x4c, 0xee, 0xc0,
	0xad, 0x54, 0x60, 0x96, 0x5d, 0xe9, 0xae, 0x41, 0x33, 0xff, 0x50, 0x90, 0x8e, 0x28, 0x57, 0x52,
	0x99, 0xdc, 0xfd, 0x15, 0xac, 0xcc, 0x34, 0x25, 0xa5, 0x03, 0x7b, 0x7d, 0x35, 0xf9, 0xfd, 0x5e,
	0xdf, 0xda, 0xdf, 0xf8, 0x33, 0xa3, 0x20, 0x65, 0x37, 0xf7, 0x0e, 0x0e, 0xf6, 0xad, 0xdd, 0xde,
	0xde, 0xd1, 0x8e, 0x69, 0x14, 0xbb, 0xdd, 0x0b, 0xb2, 0x18, 0x0b, 0x72, 0x4d, 0x0f, 0xb6, 0x36,
	0xf6, 0x8c, 0x05, 0xe9, 0xff, 0x17, 0x7b, 0x07, 0x9b, 0x1b, 0x7b, 0x46, 0xa1, 0xfb, 0x35, 0x2c,
	0x5f, 0xb8, 0xf0, 0x65, 0x84, 0xed, 0x86, 0x9e, 0x17, 0x9e, 0xb2, 0x60, 0xa4, 0x02, 0xee, 0x30,
	0xa6, 0x0e, 0x75, 0xe5, 0x67, 0x41, 0x46, 0xf0, 0x16, 0xd6, 0xe7, 0xc2, 0x0c, 0x4f, 0x8d, 0x62,
	0xf7, 0x00, 0x8c, 0x8b, 0x97, 0x2c, 0xa9, 0xc2, 0x62, 0x2f, 0x10, 0xc6, 0x82, 0x1c, 0x74, 0xd7,
	0x0b, 0x6d, 0xa1, 0xc2, 0x67, 0x9b, 0x3a, 0xcc, 0xb7, 0x3d, 0xa3, 0x28, 0x37, 0xc9, 0xb6, 0x2d,
	0xa8, 0xcc, 0x8b, 0xd4, 0x06, 0xdf, 0x4e, 0x54, 0xdb, 0xc0, 0x28, 0x75, 0x9f, 0xa5, 0x16, 0x65,
	0x57, 0xae, 0x0c, 0x42, 0x59, 0x1c, 0x2a, 0xd3, 0x71, 0x34, 0x6e, 0x14, 0x70, 0x1a, 0xf2, 0x24,
	0xe6, 0x46, 0x71, 0xf3, 0x67, 0xbf, 0xff, 0xe1, 0x6e, 0xe1, 0x5f, 0x7e, 0xb8, 0x5b, 0xf8, 0xfe,
	0x87, 0xbb, 0x85, 0xbf, 0xfd, 0x8f, 0xbb, 0x0b, 0x70, 0xdd, 0x09, 0xfd, 0xc7, 0xf2, 0x94, 0x76,
	0xec, 0xe8, 0xb1, 0x60, 0xee, 0x31, 0x9e, 0x5b, 0x87, 0x85, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff,
	0xc3, 0x3e, 0x15, 0x58, 0xf1, 0x26, 0x00, 0x00,
}
