// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metadata.proto

package tipb

import (
	"fmt"
	"io"
	"math"

	_ "github.com/gogo/protobuf/gogoproto"
	github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"
	proto "github.com/golang/protobuf/proto"

	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GroupingMode int32

const (
	GroupingMode_ModeBitAnd     GroupingMode = 1
	GroupingMode_ModeNumericCmp GroupingMode = 2
	GroupingMode_ModeNumericSet GroupingMode = 3
)

var GroupingMode_name = map[int32]string{
	1: "ModeBitAnd",
	2: "ModeNumericCmp",
	3: "ModeNumericSet",
}

var GroupingMode_value = map[string]int32{
	"ModeBitAnd":     1,
	"ModeNumericCmp": 2,
	"ModeNumericSet": 3,
}

func (x GroupingMode) Enum() *GroupingMode {
	p := new(GroupingMode)
	*p = x
	return p
}

func (x GroupingMode) String() string {
	return proto.EnumName(GroupingMode_name, int32(x))
}

func (x *GroupingMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GroupingMode_value, data, "GroupingMode")
	if err != nil {
		return err
	}
	*x = GroupingMode(value)
	return nil
}

func (GroupingMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{0}
}

type InUnionMetadata struct {
	InUnion bool `protobuf:"varint,1,req,name=in_union,json=inUnion" json:"in_union"`
}

func (m *InUnionMetadata) Reset()         { *m = InUnionMetadata{} }
func (m *InUnionMetadata) String() string { return proto.CompactTextString(m) }
func (*InUnionMetadata) ProtoMessage()    {}
func (*InUnionMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{0}
}
func (m *InUnionMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InUnionMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InUnionMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InUnionMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InUnionMetadata.Merge(m, src)
}
func (m *InUnionMetadata) XXX_Size() int {
	return m.Size()
}
func (m *InUnionMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_InUnionMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_InUnionMetadata proto.InternalMessageInfo

func (m *InUnionMetadata) GetInUnion() bool {
	if m != nil {
		return m.InUnion
	}
	return false
}

type CompareInMetadata struct {
	HasNull bool `protobuf:"varint,1,req,name=has_null,json=hasNull" json:"has_null"`
	// consts represents all non-null const args in repeated Datum format.
	Consts []byte `protobuf:"bytes,2,opt,name=consts" json:"consts,omitempty"`
}

func (m *CompareInMetadata) Reset()         { *m = CompareInMetadata{} }
func (m *CompareInMetadata) String() string { return proto.CompactTextString(m) }
func (*CompareInMetadata) ProtoMessage()    {}
func (*CompareInMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{1}
}
func (m *CompareInMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompareInMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompareInMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompareInMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompareInMetadata.Merge(m, src)
}
func (m *CompareInMetadata) XXX_Size() int {
	return m.Size()
}
func (m *CompareInMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CompareInMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CompareInMetadata proto.InternalMessageInfo

func (m *CompareInMetadata) GetHasNull() bool {
	if m != nil {
		return m.HasNull
	}
	return false
}

func (m *CompareInMetadata) GetConsts() []byte {
	if m != nil {
		return m.Consts
	}
	return nil
}

type GroupingMark struct {
	GroupingNums []uint64 `protobuf:"varint,1,rep,name=grouping_nums,json=groupingNums" json:"grouping_nums,omitempty"`
}

func (m *GroupingMark) Reset()         { *m = GroupingMark{} }
func (m *GroupingMark) String() string { return proto.CompactTextString(m) }
func (*GroupingMark) ProtoMessage()    {}
func (*GroupingMark) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{2}
}
func (m *GroupingMark) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupingMark) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupingMark.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupingMark) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupingMark.Merge(m, src)
}
func (m *GroupingMark) XXX_Size() int {
	return m.Size()
}
func (m *GroupingMark) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupingMark.DiscardUnknown(m)
}

var xxx_messageInfo_GroupingMark proto.InternalMessageInfo

func (m *GroupingMark) GetGroupingNums() []uint64 {
	if m != nil {
		return m.GroupingNums
	}
	return nil
}

type GroupingFunctionMetadata struct {
	Mode *GroupingMode `protobuf:"varint,1,req,name=mode,enum=tipb.GroupingMode" json:"mode,omitempty"`
	// 2 dimension here, out-most dimension is for grouping(a,b) = grouping(a) << 1 + grouping(b); we should maintain a slice of grouping mark.
	GroupingMarks []*GroupingMark `protobuf:"bytes,2,rep,name=grouping_marks,json=groupingMarks" json:"grouping_marks,omitempty"`
}

func (m *GroupingFunctionMetadata) Reset()         { *m = GroupingFunctionMetadata{} }
func (m *GroupingFunctionMetadata) String() string { return proto.CompactTextString(m) }
func (*GroupingFunctionMetadata) ProtoMessage()    {}
func (*GroupingFunctionMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d9f74966f40d04, []int{3}
}
func (m *GroupingFunctionMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupingFunctionMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupingFunctionMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupingFunctionMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupingFunctionMetadata.Merge(m, src)
}
func (m *GroupingFunctionMetadata) XXX_Size() int {
	return m.Size()
}
func (m *GroupingFunctionMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupingFunctionMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_GroupingFunctionMetadata proto.InternalMessageInfo

func (m *GroupingFunctionMetadata) GetMode() GroupingMode {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return GroupingMode_ModeBitAnd
}

func (m *GroupingFunctionMetadata) GetGroupingMarks() []*GroupingMark {
	if m != nil {
		return m.GroupingMarks
	}
	return nil
}

func init() {
	proto.RegisterEnum("tipb.GroupingMode", GroupingMode_name, GroupingMode_value)
	proto.RegisterType((*InUnionMetadata)(nil), "tipb.InUnionMetadata")
	proto.RegisterType((*CompareInMetadata)(nil), "tipb.CompareInMetadata")
	proto.RegisterType((*GroupingMark)(nil), "tipb.GroupingMark")
	proto.RegisterType((*GroupingFunctionMetadata)(nil), "tipb.GroupingFunctionMetadata")
}

func init() { proto.RegisterFile("metadata.proto", fileDescriptor_56d9f74966f40d04) }

var fileDescriptor_56d9f74966f40d04 = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x4f, 0x6b, 0xe2, 0x40,
	0x18, 0xc6, 0x33, 0x1a, 0x76, 0x65, 0xd6, 0x8d, 0xee, 0xb0, 0xbb, 0x04, 0x0f, 0x51, 0xb2, 0xb0,
	0x84, 0x3d, 0x64, 0xc1, 0x9e, 0x3c, 0x56, 0xc1, 0x22, 0x54, 0x29, 0x29, 0x3d, 0xcb, 0x98, 0x84,
	0x38, 0x98, 0x99, 0x09, 0xf3, 0xe7, 0xd8, 0xef, 0xd0, 0x63, 0x3f, 0x42, 0x3f, 0x8a, 0x47, 0x8f,
	0x9e, 0x4a, 0x31, 0x5f, 0xa4, 0x4c, 0xfc, 0x83, 0xb6, 0xa7, 0xbc, 0xcf, 0xf3, 0xe6, 0x79, 0x9f,
	0x1f, 0x03, 0x1d, 0x9a, 0x2a, 0x9c, 0x60, 0x85, 0xc3, 0x42, 0x70, 0xc5, 0x91, 0xad, 0x48, 0xb1,
	0xe8, 0xfc, 0xcc, 0x78, 0xc6, 0x2b, 0xe3, 0xbf, 0x99, 0xf6, 0xbb, 0x4e, 0x4b, 0x68, 0xa9, 0xaa,
	0x71, 0x6f, 0xf8, 0x7d, 0xd8, 0x9a, 0xb0, 0x07, 0x46, 0x38, 0x9b, 0x1e, 0xae, 0xa0, 0x2e, 0x6c,
	0x10, 0x36, 0xd7, 0xc6, 0x73, 0x41, 0xaf, 0x16, 0x34, 0x86, 0xf6, 0xfa, 0xb5, 0x6b, 0x45, 0x5f,
	0xc9, 0xfe, 0x47, 0xff, 0x16, 0xfe, 0x18, 0x71, 0x5a, 0x60, 0x91, 0x4e, 0x2e, 0x52, 0x4b, 0x2c,
	0xe7, 0x4c, 0xe7, 0xf9, 0x65, 0x6a, 0x89, 0xe5, 0x4c, 0xe7, 0x39, 0xfa, 0x0d, 0xbf, 0xc4, 0x9c,
	0x49, 0x25, 0xdd, 0x5a, 0x0f, 0x04, 0xcd, 0xe8, 0xa0, 0xfc, 0x2b, 0xd8, 0xbc, 0x11, 0x5c, 0x17,
	0x84, 0x65, 0x53, 0x2c, 0x56, 0xe8, 0x0f, 0xfc, 0x9e, 0x1d, 0xf4, 0x9c, 0x69, 0x2a, 0x5d, 0xd0,
	0xab, 0x07, 0x76, 0xd4, 0x3c, 0x9a, 0x33, 0x4d, 0xa5, 0xff, 0x08, 0xdd, 0x63, 0x68, 0xac, 0x59,
	0xac, 0xce, 0xf9, 0xff, 0x42, 0x9b, 0xf2, 0x24, 0xad, 0x28, 0x9c, 0x3e, 0x0a, 0xcd, 0x73, 0x84,
	0xa7, 0x0a, 0x9e, 0xa4, 0x51, 0xb5, 0x47, 0x03, 0xe8, 0x9c, 0x8a, 0x28, 0x16, 0x2b, 0x03, 0x56,
	0x0f, 0xbe, 0x7d, 0x4a, 0x60, 0xb1, 0x8a, 0x4e, 0x48, 0x46, 0xc9, 0x7f, 0xe3, 0x33, 0x66, 0x73,
	0xca, 0x81, 0xd0, 0x7c, 0x87, 0x44, 0x5d, 0xb3, 0xa4, 0x0d, 0x10, 0x82, 0x8e, 0xd1, 0x33, 0x4d,
	0x53, 0x41, 0xe2, 0x11, 0x2d, 0xda, 0xb5, 0x0f, 0xde, 0x7d, 0xaa, 0xda, 0xf5, 0xe1, 0x60, 0xfb,
	0xd2, 0x00, 0xeb, 0x9d, 0x07, 0x36, 0x3b, 0x0f, 0xbc, 0xed, 0x3c, 0xf0, 0x54, 0x7a, 0xd6, 0x73,
	0xe9, 0x59, 0x9b, 0xd2, 0xb3, 0xb6, 0xa5, 0x67, 0xc1, 0x5f, 0x31, 0xa7, 0xa1, 0xe9, 0x89, 0x71,
	0x11, 0x2a, 0x92, 0x2c, 0x2a, 0xb8, 0x3b, 0xf0, 0x1e, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x18, 0x15,
	0x48, 0xf6, 0x01, 0x00, 0x00,
}

func (m *InUnionMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InUnionMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InUnionMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.InUnion {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CompareInMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompareInMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompareInMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Consts != nil {
		i -= len(m.Consts)
		copy(dAtA[i:], m.Consts)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Consts)))
		i--
		dAtA[i] = 0x12
	}
	i--
	if m.HasNull {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GroupingMark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupingMark) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupingMark) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupingNums) > 0 {
		for iNdEx := len(m.GroupingNums) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintMetadata(dAtA, i, uint64(m.GroupingNums[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *GroupingFunctionMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupingFunctionMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupingFunctionMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupingMarks) > 0 {
		for iNdEx := len(m.GroupingMarks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupingMarks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Mode == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintMetadata(dAtA, i, uint64(*m.Mode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMetadata(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetadata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InUnionMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}

func (m *CompareInMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	if m.Consts != nil {
		l = len(m.Consts)
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GroupingMark) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GroupingNums) > 0 {
		for _, e := range m.GroupingNums {
			n += 1 + sovMetadata(uint64(e))
		}
	}
	return n
}

func (m *GroupingFunctionMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mode != nil {
		n += 1 + sovMetadata(uint64(*m.Mode))
	}
	if len(m.GroupingMarks) > 0 {
		for _, e := range m.GroupingMarks {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func sovMetadata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetadata(x uint64) (n int) {
	return sovMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InUnionMetadata) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InUnionMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InUnionMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InUnion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InUnion = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompareInMetadata) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompareInMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompareInMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasNull", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasNull = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consts", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consts = append(m.Consts[:0], dAtA[iNdEx:postIndex]...)
			if m.Consts == nil {
				m.Consts = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupingMark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupingMark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupingMark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupingNums = append(m.GroupingNums, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMetadata
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMetadata
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GroupingNums) == 0 {
					m.GroupingNums = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupingNums = append(m.GroupingNums, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupingNums", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupingFunctionMetadata) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupingFunctionMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupingFunctionMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var v GroupingMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= GroupingMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mode = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupingMarks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupingMarks = append(m.GroupingMarks, &GroupingMark{})
			if err := m.GroupingMarks[len(m.GroupingMarks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetadata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetadata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetadata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetadata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetadata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetadata = fmt.Errorf("proto: unexpected end of group")
)
