syntax = "proto3";

package binlog;

import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.sizer_all) = true;

// Interfaces exported by CisternServer.
service Cistern {
    // DumpBinlog dumps a continuous binlogs from a given position in binlog-server.
    rpc DumpBinlog(DumpBinlogReq) returns (DumpBinlogResp) {}
}

message DumpBinlogReq {
    // beginCommitTS speicifies the position from which begin to dump binlogs.
    // note that actually the result of dump starts from the one next to beginCommitTS
    // it should be zero in case of the first request.
    int64 beginCommitTS = 1;

    // limit defines the maximum number of binlogs requested once call.
    int32 limit = 2;
}

message DumpBinlogResp {
    // An empty errmsg means that the successful acquisition of binlogs.
    string errmsg = 1;

    // payloads is an array of binlog bytecodes returned.
    repeated bytes payloads = 2;

    // endCommitTS is the commitTS of the last one in binlog payloads
    // client can use it as beginCommitTS of the next request of dump.
    int64 endCommitTS = 3;
}
